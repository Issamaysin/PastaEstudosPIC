

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Nov 19 18:08:38 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F687
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 2.20
    36                           ; Generated 12/02/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F687 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     	;# 
    70  0001                     	;# 
    71  0002                     	;# 
    72  0003                     	;# 
    73  0004                     	;# 
    74  0005                     	;# 
    75  0006                     	;# 
    76  0007                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  000E                     	;# 
    83  000F                     	;# 
    84  0010                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0118                     	;# 
   122  0119                     	;# 
   123  011A                     	;# 
   124  011B                     	;# 
   125  011E                     	;# 
   126  011F                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  019E                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  000A                     	;# 
   139  000B                     	;# 
   140  000C                     	;# 
   141  000D                     	;# 
   142  000E                     	;# 
   143  000E                     	;# 
   144  000F                     	;# 
   145  0010                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  0081                     	;# 
   154  0085                     	;# 
   155  0086                     	;# 
   156  0087                     	;# 
   157  008C                     	;# 
   158  008D                     	;# 
   159  008E                     	;# 
   160  008F                     	;# 
   161  0090                     	;# 
   162  0093                     	;# 
   163  0093                     	;# 
   164  0093                     	;# 
   165  0094                     	;# 
   166  0095                     	;# 
   167  0095                     	;# 
   168  0096                     	;# 
   169  0096                     	;# 
   170  0097                     	;# 
   171  0098                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009B                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010C                     	;# 
   179  010D                     	;# 
   180  0115                     	;# 
   181  0116                     	;# 
   182  0118                     	;# 
   183  0119                     	;# 
   184  011A                     	;# 
   185  011B                     	;# 
   186  011E                     	;# 
   187  011F                     	;# 
   188  018C                     	;# 
   189  018D                     	;# 
   190  019E                     	;# 
   191  0000                     	;# 
   192  0001                     	;# 
   193  0002                     	;# 
   194  0003                     	;# 
   195  0004                     	;# 
   196  0005                     	;# 
   197  0006                     	;# 
   198  0007                     	;# 
   199  000A                     	;# 
   200  000B                     	;# 
   201  000C                     	;# 
   202  000D                     	;# 
   203  000E                     	;# 
   204  000E                     	;# 
   205  000F                     	;# 
   206  0010                     	;# 
   207  0013                     	;# 
   208  0014                     	;# 
   209  0018                     	;# 
   210  0019                     	;# 
   211  001A                     	;# 
   212  001E                     	;# 
   213  001F                     	;# 
   214  0081                     	;# 
   215  0085                     	;# 
   216  0086                     	;# 
   217  0087                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  008F                     	;# 
   222  0090                     	;# 
   223  0093                     	;# 
   224  0093                     	;# 
   225  0093                     	;# 
   226  0094                     	;# 
   227  0095                     	;# 
   228  0095                     	;# 
   229  0096                     	;# 
   230  0096                     	;# 
   231  0097                     	;# 
   232  0098                     	;# 
   233  0099                     	;# 
   234  009A                     	;# 
   235  009B                     	;# 
   236  009E                     	;# 
   237  009F                     	;# 
   238  010C                     	;# 
   239  010C                     	;# 
   240  010D                     	;# 
   241  0115                     	;# 
   242  0116                     	;# 
   243  0118                     	;# 
   244  0119                     	;# 
   245  011A                     	;# 
   246  011B                     	;# 
   247  011E                     	;# 
   248  011F                     	;# 
   249  018C                     	;# 
   250  018D                     	;# 
   251  019E                     	;# 
   252                           
   253                           	psect	idataBANK0
   254  078E                     __pidataBANK0:
   255                           
   256                           ;initializer for _readButtonStatus
   257  078E  3401               	retlw	1
   258  078F  3401               	retlw	1
   259  0790  3401               	retlw	1
   260  0791  3401               	retlw	1
   261  0792  3401               	retlw	1
   262                           
   263                           ;initializer for _diceState
   264  0793  3401               	retlw	1
   265  0794  3406               	retlw	6
   266                           
   267                           ;initializer for _deviceCurrentState
   268  0795  3401               	retlw	1
   269  0007                     _PORTC	set	7
   270  0006                     _PORTB	set	6
   271  0005                     _PORTA	set	5
   272  0001                     _TMR0	set	1
   273  005B                     _RABIE	set	91
   274  005D                     _T0IE	set	93
   275  005E                     _PEIE	set	94
   276  005F                     _GIE	set	95
   277  0058                     _RABIF	set	88
   278  005A                     _T0IF	set	90
   279  0096                     _IOCA	set	150
   280  0087                     _TRISC	set	135
   281  0086                     _TRISB	set	134
   282  0085                     _TRISA	set	133
   283  008F                     _OSCCON	set	143
   284  04AD                     _WPUA5	set	1197
   285  04AC                     _WPUA4	set	1196
   286  04AA                     _WPUA2	set	1194
   287  04A9                     _WPUA1	set	1193
   288  04A8                     _WPUA0	set	1192
   289  040A                     _PS2	set	1034
   290  0409                     _PS1	set	1033
   291  0408                     _PS0	set	1032
   292  040B                     _PSA	set	1035
   293  040D                     _T0CS	set	1037
   294  040F                     _nRABPU	set	1039
   295  011E                     _ANSEL	set	286
   296                           
   297                           	psect	cinit
   298  000B                     start_initialization:	
   299                           ; #config settings
   300                           
   301  000B                     __initialization:
   302                           
   303                           ; Initialize objects allocated to BANK0
   304  000B  278E               	fcall	__pidataBANK0	;fetch initializer
   305  000C  00E7               	movwf	__pdataBANK0& (0+127)
   306  000D  278F               	fcall	__pidataBANK0+1	;fetch initializer
   307  000E  00E8               	movwf	(__pdataBANK0+1)& (0+127)
   308  000F  2790               	fcall	__pidataBANK0+2	;fetch initializer
   309  0010  00E9               	movwf	(__pdataBANK0+2)& (0+127)
   310  0011  2791               	fcall	__pidataBANK0+3	;fetch initializer
   311  0012  00EA               	movwf	(__pdataBANK0+3)& (0+127)
   312  0013  2792               	fcall	__pidataBANK0+4	;fetch initializer
   313  0014  00EB               	movwf	(__pdataBANK0+4)& (0+127)
   314  0015  2793               	fcall	__pidataBANK0+5	;fetch initializer
   315  0016  00EC               	movwf	(__pdataBANK0+5)& (0+127)
   316  0017  2794               	fcall	__pidataBANK0+6	;fetch initializer
   317  0018  00ED               	movwf	(__pdataBANK0+6)& (0+127)
   318  0019  2795               	fcall	__pidataBANK0+7	;fetch initializer
   319  001A  00EE               	movwf	(__pdataBANK0+7)& (0+127)
   320                           
   321                           ; Clear objects allocated to BANK1
   322  001B  1383               	bcf	3,7	;select IRP bank0
   323  001C  30A0               	movlw	low __pbssBANK1
   324  001D  0084               	movwf	4
   325  001E  30AE               	movlw	low (__pbssBANK1+14)
   326  001F  2796               	fcall	clear_ram0
   327                           
   328                           ; Clear objects allocated to BANK0
   329  0020  305B               	movlw	low __pbssBANK0
   330  0021  0084               	movwf	4
   331  0022  3067               	movlw	low (__pbssBANK0+12)
   332  0023  2796               	fcall	clear_ram0
   333                           
   334                           ; Clear objects allocated to COMMON
   335  0024  3070               	movlw	low __pbssCOMMON
   336  0025  0084               	movwf	4
   337  0026  3076               	movlw	low (__pbssCOMMON+6)
   338  0027  2796               	fcall	clear_ram0
   339  0028                     end_of_initialization:	
   340                           ;End of C runtime variable initialization code
   341                           
   342  0028                     __end_of__initialization:
   343  0028  0183               	clrf	3
   344  0029  2933               	ljmp	_main	;jump to C main() function
   345                           
   346                           	psect	bssCOMMON
   347  0070                     __pbssCOMMON:
   348  0070                     _indiceDisplay:
   349  0070                     	ds	2
   350  0072                     _randomSeed:
   351  0072                     	ds	4
   352                           
   353                           	psect	bssBANK0
   354  005B                     __pbssBANK0:
   355  005B                     _Display7seg4digitsVetor:
   356  005B                     	ds	8
   357  0063                     _uiCounterms:
   358  0063                     	ds	4
   359                           
   360                           	psect	dataBANK0
   361  0067                     __pdataBANK0:
   362  0067                     _readButtonStatus:
   363  0067                     	ds	5
   364  006C                     _diceState:
   365  006C                     	ds	2
   366  006E                     _deviceCurrentState:
   367  006E                     	ds	1
   368                           
   369                           	psect	bssBANK1
   370  00A0                     __pbssBANK1:
   371  00A0                     _Botoes:
   372  00A0                     	ds	10
   373  00AA                     _uiButtonDebounce:
   374  00AA                     	ds	4
   375                           
   376                           	psect	clrtext
   377  0796                     clear_ram0:	
   378                           ;	Called with FSR containing the base address, and
   379                           ;	W with the last address+1
   380                           
   381  0796  0064               	clrwdt	;clear the watchdog before getting into this loop
   382  0797                     clrloop0:
   383  0797  0180               	clrf	0	;clear RAM location pointed to by FSR
   384  0798  0A84               	incf	4,f	;increment pointer
   385  0799  0604               	xorwf	4,w	;XOR with final address
   386  079A  1903               	btfsc	3,2	;have we reached the end yet?
   387  079B  3400               	retlw	0	;all done for this memory range, return
   388  079C  0604               	xorwf	4,w	;XOR again to restore value
   389  079D  2F97               	goto	clrloop0	;do the next byte
   390                           
   391                           	psect	cstackCOMMON
   392  0076                     __pcstackCOMMON:
   393  0076                     ?_configBoard:
   394  0076                     ?_initDisplay:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0076                     ?_initButtons:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0076                     ?_shiftDisplays:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0076                     ?_deviceStateMachine:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0076                     ?_rollDice:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0076                     ?_my_isr_routine:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0076                     ??_my_isr_routine:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0076                     ?_main:	
   416                           ; 1 bytes @ 0x0
   417                           
   418                           
   419                           ; 1 bytes @ 0x0
   420  0076                     	ds	6
   421                           
   422                           	psect	cstackBANK0
   423  0020                     __pcstackBANK0:
   424  0020                     ??_configBoard:
   425  0020                     ??_initDisplay:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0020                     ??_initButtons:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0020                     ?_setPin:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0020                     ?_clearPin:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0020                     ?___awdiv:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0020                     ?___awmod:	
   441                           ; 2 bytes @ 0x0
   442                           
   443  0020                     ?___lwdiv:	
   444                           ; 2 bytes @ 0x0
   445                           
   446  0020                     ?___lmul:	
   447                           ; 2 bytes @ 0x0
   448                           
   449  0020                     setPin@ucPort:	
   450                           ; 4 bytes @ 0x0
   451                           
   452  0020                     clearPin@ucPort:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0020                     ___awdiv@divisor:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0020                     ___awmod@divisor:	
   459                           ; 2 bytes @ 0x0
   460                           
   461  0020                     ___lwdiv@divisor:	
   462                           ; 2 bytes @ 0x0
   463                           
   464  0020                     ___lmul@multiplier:	
   465                           ; 2 bytes @ 0x0
   466                           
   467                           
   468                           ; 4 bytes @ 0x0
   469  0020                     	ds	1
   470  0021                     ??_setPin:
   471  0021                     ??_clearPin:	
   472                           ; 1 bytes @ 0x1
   473                           
   474                           
   475                           ; 1 bytes @ 0x1
   476  0021                     	ds	1
   477  0022                     ___awdiv@dividend:
   478  0022                     ___awmod@dividend:	
   479                           ; 2 bytes @ 0x2
   480                           
   481  0022                     ___lwdiv@dividend:	
   482                           ; 2 bytes @ 0x2
   483                           
   484                           
   485                           ; 2 bytes @ 0x2
   486  0022                     	ds	1
   487  0023                     setPin@ucPin:
   488  0023                     clearPin@ucPin:	
   489                           ; 1 bytes @ 0x3
   490                           
   491                           
   492                           ; 1 bytes @ 0x3
   493  0023                     	ds	1
   494  0024                     ??_shiftDisplays:
   495  0024                     ??___awdiv:	
   496                           ; 1 bytes @ 0x4
   497                           
   498  0024                     ??___awmod:	
   499                           ; 1 bytes @ 0x4
   500                           
   501  0024                     ??___lwdiv:	
   502                           ; 1 bytes @ 0x4
   503                           
   504  0024                     ___lmul@multiplicand:	
   505                           ; 1 bytes @ 0x4
   506                           
   507                           
   508                           ; 4 bytes @ 0x4
   509  0024                     	ds	1
   510  0025                     ___awdiv@counter:
   511  0025                     ___awmod@counter:	
   512                           ; 1 bytes @ 0x5
   513                           
   514  0025                     ___lwdiv@counter:	
   515                           ; 1 bytes @ 0x5
   516                           
   517                           
   518                           ; 1 bytes @ 0x5
   519  0025                     	ds	1
   520  0026                     ___awdiv@sign:
   521  0026                     ___awmod@sign:	
   522                           ; 1 bytes @ 0x6
   523                           
   524  0026                     ___lwdiv@quotient:	
   525                           ; 1 bytes @ 0x6
   526                           
   527                           
   528                           ; 2 bytes @ 0x6
   529  0026                     	ds	1
   530  0027                     ___awdiv@quotient:
   531                           
   532                           ; 2 bytes @ 0x7
   533  0027                     	ds	1
   534  0028                     ??___lmul:
   535                           
   536                           ; 1 bytes @ 0x8
   537  0028                     	ds	1
   538  0029                     ___lmul@product:
   539                           
   540                           ; 4 bytes @ 0x9
   541  0029                     	ds	4
   542  002D                     ?___llmod:
   543  002D                     ___llmod@divisor:	
   544                           ; 4 bytes @ 0xD
   545                           
   546                           
   547                           ; 4 bytes @ 0xD
   548  002D                     	ds	4
   549  0031                     ___llmod@dividend:
   550                           
   551                           ; 4 bytes @ 0x11
   552  0031                     	ds	4
   553  0035                     ??___llmod:
   554                           
   555                           ; 1 bytes @ 0x15
   556  0035                     	ds	1
   557  0036                     ___llmod@counter:
   558                           
   559                           ; 1 bytes @ 0x16
   560  0036                     	ds	1
   561  0037                     ?_randomNumber:
   562                           
   563                           ; 4 bytes @ 0x17
   564  0037                     	ds	4
   565  003B                     ??_randomNumber:
   566                           
   567                           ; 1 bytes @ 0x1B
   568  003B                     	ds	4
   569  003F                     ?___lwmod:
   570  003F                     ___lwmod@divisor:	
   571                           ; 2 bytes @ 0x1F
   572                           
   573                           
   574                           ; 2 bytes @ 0x1F
   575  003F                     	ds	2
   576  0041                     ___lwmod@dividend:
   577                           
   578                           ; 2 bytes @ 0x21
   579  0041                     	ds	2
   580  0043                     ??___lwmod:
   581                           
   582                           ; 1 bytes @ 0x23
   583  0043                     	ds	1
   584  0044                     ___lwmod@counter:
   585                           
   586                           ; 1 bytes @ 0x24
   587  0044                     	ds	1
   588  0045                     ?_writeCharOnDisplay:
   589  0045                     writeCharOnDisplay@ucDisplay:	
   590                           ; 1 bytes @ 0x25
   591                           
   592                           
   593                           ; 1 bytes @ 0x25
   594  0045                     	ds	1
   595  0046                     ??_writeCharOnDisplay:
   596                           
   597                           ; 1 bytes @ 0x26
   598  0046                     	ds	2
   599  0048                     writeCharOnDisplay@ucCharacter:
   600                           
   601                           ; 1 bytes @ 0x28
   602  0048                     	ds	1
   603  0049                     ??_rollDice:
   604                           
   605                           ; 1 bytes @ 0x29
   606  0049                     	ds	4
   607  004D                     rollDice@i:
   608                           
   609                           ; 2 bytes @ 0x2D
   610  004D                     	ds	2
   611  004F                     rollDice@ulTotal:
   612                           
   613                           ; 2 bytes @ 0x2F
   614  004F                     	ds	2
   615  0051                     ??_deviceStateMachine:
   616                           
   617                           ; 1 bytes @ 0x31
   618  0051                     	ds	3
   619  0054                     deviceStateMachine@ucButton:
   620                           
   621                           ; 1 bytes @ 0x34
   622  0054                     	ds	1
   623  0055                     ??_main:
   624                           
   625                           ; 1 bytes @ 0x35
   626  0055                     	ds	4
   627  0059                     main@i:
   628                           
   629                           ; 2 bytes @ 0x39
   630  0059                     	ds	2
   631                           
   632                           	psect	maintext
   633  0133                     __pmaintext:	
   634 ;;
   635 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   636 ;;
   637 ;; *************** function _main *****************
   638 ;; Defined at:
   639 ;;		line 71 in file "main.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;		None
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  i               2   57[BANK0 ] int 
   644 ;; Return value:  Size  Location     Type
   645 ;;                  1    wreg      void 
   646 ;; Registers used:
   647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   648 ;; Tracked objects:
   649 ;;		On entry : B00/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMMON   BANK0   BANK1
   653 ;;      Params:         0       0       0
   654 ;;      Locals:         0       2       0
   655 ;;      Temps:          0       4       0
   656 ;;      Totals:         0       6       0
   657 ;;Total ram usage:        6 bytes
   658 ;; Hardware stack levels required when called: 5
   659 ;; This function calls:
   660 ;;		___llmod
   661 ;;		_configBoard
   662 ;;		_deviceStateMachine
   663 ;;		_initButtons
   664 ;;		_initDisplay
   665 ;;		_randomNumber
   666 ;;		_shiftDisplays
   667 ;; This function is called by:
   668 ;;		Startup code after reset
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           
   673                           ;psect for function _main
   674  0133                     _main:
   675  0133                     l2479:	
   676                           ;incstack = 0
   677                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   678                           
   679                           
   680                           ;main.c: 74:     configBoard();
   681  0133  2580               	fcall	_configBoard
   682                           
   683                           ;main.c: 77:     initDisplay();
   684  0134  2777               	fcall	_initDisplay
   685                           
   686                           ;main.c: 78:     initButtons();
   687  0135  274F               	fcall	_initButtons
   688  0136                     l51:	
   689                           ;main.c: 81:      while(1){
   690                           
   691                           
   692                           ;main.c: 83:            if(0 == (uiCounterms%5)){
   693  0136  3000               	movlw	0
   694  0137  1283               	bcf	3,5	;RP0=0, select bank0
   695  0138  1303               	bcf	3,6	;RP1=0, select bank0
   696  0139  00B0               	movwf	___llmod@divisor+3
   697  013A  3000               	movlw	0
   698  013B  00AF               	movwf	___llmod@divisor+2
   699  013C  3000               	movlw	0
   700  013D  00AE               	movwf	___llmod@divisor+1
   701  013E  3005               	movlw	5
   702  013F  00AD               	movwf	___llmod@divisor
   703  0140  0866               	movf	_uiCounterms+3,w
   704  0141  00B4               	movwf	___llmod@dividend+3
   705  0142  0865               	movf	_uiCounterms+2,w
   706  0143  00B3               	movwf	___llmod@dividend+2
   707  0144  0864               	movf	_uiCounterms+1,w
   708  0145  00B2               	movwf	___llmod@dividend+1
   709  0146  0863               	movf	_uiCounterms,w
   710  0147  00B1               	movwf	___llmod@dividend
   711  0148  24D7               	fcall	___llmod
   712  0149  1283               	bcf	3,5	;RP0=0, select bank0
   713  014A  1303               	bcf	3,6	;RP1=0, select bank0
   714  014B  0830               	movf	?___llmod+3,w
   715  014C  042F               	iorwf	?___llmod+2,w
   716  014D  042E               	iorwf	?___llmod+1,w
   717  014E  042D               	iorwf	?___llmod,w
   718  014F  1D03               	skipz
   719  0150  2952               	goto	u2101
   720  0151  2953               	goto	u2100
   721  0152                     u2101:
   722  0152  2954               	goto	l2483
   723  0153                     u2100:
   724  0153                     l2481:
   725                           
   726                           ;main.c: 84:                 shiftDisplays();
   727  0153  271A               	fcall	_shiftDisplays
   728  0154                     l2483:
   729                           
   730                           ;main.c: 86:             if((readButtonStatus[0] != Botoes[0].status) && readButtonStatu
      +                          s[0] == 0){
   731  0154  1683               	bsf	3,5	;RP0=1, select bank1
   732  0155  1303               	bcf	3,6	;RP1=0, select bank1
   733  0156  0821               	movf	(_Botoes^(0+128)+1),w
   734  0157  1283               	bcf	3,5	;RP0=0, select bank0
   735  0158  1303               	bcf	3,6	;RP1=0, select bank0
   736  0159  0667               	xorwf	_readButtonStatus,w
   737  015A  1903               	skipnz
   738  015B  295D               	goto	u2111
   739  015C  295E               	goto	u2110
   740  015D                     u2111:
   741  015D  298C               	goto	l2491
   742  015E                     u2110:
   743  015E                     l2485:
   744  015E  0867               	movf	_readButtonStatus,w
   745  015F  1D03               	btfss	3,2
   746  0160  2962               	goto	u2121
   747  0161  2963               	goto	u2120
   748  0162                     u2121:
   749  0162  298C               	goto	l2491
   750  0163                     u2120:
   751  0163                     l2487:
   752                           
   753                           ;main.c: 87:                 randomSeed = uiCounterms + 47;
   754  0163  302F               	movlw	47
   755  0164  00D5               	movwf	??_main
   756  0165  3000               	movlw	0
   757  0166  00D6               	movwf	??_main+1
   758  0167  3000               	movlw	0
   759  0168  00D7               	movwf	??_main+2
   760  0169  3000               	movlw	0
   761  016A  00D8               	movwf	??_main+3
   762  016B  0863               	movf	_uiCounterms,w
   763  016C  07D5               	addwf	??_main,f
   764  016D  0864               	movf	_uiCounterms+1,w
   765  016E  1803               	skipnc
   766  016F  0F64               	incfsz	_uiCounterms+1,w
   767  0170  2972               	goto	u2130
   768  0171  2973               	goto	u2131
   769  0172                     u2130:
   770  0172  07D6               	addwf	??_main+1,f
   771  0173                     u2131:
   772  0173  0865               	movf	_uiCounterms+2,w
   773  0174  1803               	skipnc
   774  0175  0F65               	incfsz	_uiCounterms+2,w
   775  0176  2978               	goto	u2132
   776  0177  2979               	goto	u2133
   777  0178                     u2132:
   778  0178  07D7               	addwf	??_main+2,f
   779  0179                     u2133:
   780  0179  0866               	movf	_uiCounterms+3,w
   781  017A  1803               	skipnc
   782  017B  0A66               	incf	_uiCounterms+3,w
   783  017C  07D8               	addwf	??_main+3,f
   784  017D  0858               	movf	??_main+3,w
   785  017E  00F5               	movwf	_randomSeed+3
   786  017F  0857               	movf	??_main+2,w
   787  0180  00F4               	movwf	_randomSeed+2
   788  0181  0856               	movf	??_main+1,w
   789  0182  00F3               	movwf	_randomSeed+1
   790  0183  0855               	movf	??_main,w
   791  0184  00F2               	movwf	_randomSeed
   792                           
   793                           ;main.c: 88:                 Botoes[0].status = readButtonStatus[0];
   794  0185  0867               	movf	_readButtonStatus,w
   795  0186  00D5               	movwf	??_main
   796  0187  0855               	movf	??_main,w
   797  0188  1683               	bsf	3,5	;RP0=1, select bank1
   798  0189  1303               	bcf	3,6	;RP1=0, select bank1
   799  018A  00A1               	movwf	(_Botoes^(0+128)+1)
   800                           
   801                           ;main.c: 89:                 break;
   802  018B  29A2               	goto	l2497
   803  018C                     l2491:
   804  018C  1683               	bsf	3,5	;RP0=1, select bank1
   805  018D  1303               	bcf	3,6	;RP1=0, select bank1
   806  018E  0821               	movf	(_Botoes^(0+128)+1),w
   807  018F  1283               	bcf	3,5	;RP0=0, select bank0
   808  0190  1303               	bcf	3,6	;RP1=0, select bank0
   809  0191  0667               	xorwf	_readButtonStatus,w
   810  0192  1903               	skipnz
   811  0193  2995               	goto	u2141
   812  0194  2996               	goto	u2140
   813  0195                     u2141:
   814  0195  2936               	goto	l51
   815  0196                     u2140:
   816  0196                     l2493:
   817  0196  0367               	decf	_readButtonStatus,w
   818  0197  1D03               	btfss	3,2
   819  0198  299A               	goto	u2151
   820  0199  299B               	goto	u2150
   821  019A                     u2151:
   822  019A  2936               	goto	l51
   823  019B                     u2150:
   824  019B                     l2495:
   825                           
   826                           ;main.c: 91:                 Botoes[0].status = readButtonStatus[0];
   827  019B  0867               	movf	_readButtonStatus,w
   828  019C  00D5               	movwf	??_main
   829  019D  0855               	movf	??_main,w
   830  019E  1683               	bsf	3,5	;RP0=1, select bank1
   831  019F  1303               	bcf	3,6	;RP1=0, select bank1
   832  01A0  00A1               	movwf	(_Botoes^(0+128)+1)
   833  01A1  2936               	goto	l51
   834  01A2                     l2497:
   835                           
   836                           ;main.c: 95:    randomNumber();
   837  01A2  252D               	fcall	_randomNumber
   838                           
   839                           ;main.c: 96:    randomNumber();
   840  01A3  252D               	fcall	_randomNumber
   841  01A4                     l58:	
   842                           ;main.c: 98:       while(1){
   843                           
   844                           
   845                           ;main.c: 102:         if(0 == (uiCounterms%5)){
   846  01A4  3000               	movlw	0
   847  01A5  1283               	bcf	3,5	;RP0=0, select bank0
   848  01A6  1303               	bcf	3,6	;RP1=0, select bank0
   849  01A7  00B0               	movwf	___llmod@divisor+3
   850  01A8  3000               	movlw	0
   851  01A9  00AF               	movwf	___llmod@divisor+2
   852  01AA  3000               	movlw	0
   853  01AB  00AE               	movwf	___llmod@divisor+1
   854  01AC  3005               	movlw	5
   855  01AD  00AD               	movwf	___llmod@divisor
   856  01AE  0866               	movf	_uiCounterms+3,w
   857  01AF  00B4               	movwf	___llmod@dividend+3
   858  01B0  0865               	movf	_uiCounterms+2,w
   859  01B1  00B3               	movwf	___llmod@dividend+2
   860  01B2  0864               	movf	_uiCounterms+1,w
   861  01B3  00B2               	movwf	___llmod@dividend+1
   862  01B4  0863               	movf	_uiCounterms,w
   863  01B5  00B1               	movwf	___llmod@dividend
   864  01B6  24D7               	fcall	___llmod
   865  01B7  1283               	bcf	3,5	;RP0=0, select bank0
   866  01B8  1303               	bcf	3,6	;RP1=0, select bank0
   867  01B9  0830               	movf	?___llmod+3,w
   868  01BA  042F               	iorwf	?___llmod+2,w
   869  01BB  042E               	iorwf	?___llmod+1,w
   870  01BC  042D               	iorwf	?___llmod,w
   871  01BD  1D03               	skipz
   872  01BE  29C0               	goto	u2161
   873  01BF  29C1               	goto	u2160
   874  01C0                     u2161:
   875  01C0  29C2               	goto	l2501
   876  01C1                     u2160:
   877  01C1                     l2499:
   878                           
   879                           ;main.c: 103:             shiftDisplays();
   880  01C1  271A               	fcall	_shiftDisplays
   881  01C2                     l2501:
   882                           
   883                           ;main.c: 106:         int i;;main.c: 108:         for (i = 0; i < 5; i++){
   884  01C2  1283               	bcf	3,5	;RP0=0, select bank0
   885  01C3  1303               	bcf	3,6	;RP1=0, select bank0
   886  01C4  01D9               	clrf	main@i
   887  01C5  01DA               	clrf	main@i+1
   888  01C6                     l2507:
   889                           
   890                           ;main.c: 110:             if((readButtonStatus[i] != Botoes[i].status) && readButtonStat
      +                          us[i] == 0){
   891  01C6  1283               	bcf	3,5	;RP0=0, select bank0
   892  01C7  1303               	bcf	3,6	;RP1=0, select bank0
   893  01C8  0859               	movf	main@i,w
   894  01C9  3E67               	addlw	(low (_readButtonStatus| 0))& (0+255)
   895  01CA  0084               	movwf	4
   896  01CB  1383               	bcf	3,7	;select IRP bank0
   897  01CC  0800               	movf	0,w
   898  01CD  00D5               	movwf	??_main
   899  01CE  0859               	movf	main@i,w
   900  01CF  00D6               	movwf	??_main+1
   901  01D0  0756               	addwf	??_main+1,w
   902  01D1  3EA1               	addlw	(low ((_Botoes| 0+1)))& (0+255)
   903  01D2  0084               	movwf	4
   904  01D3  0800               	movf	0,w
   905  01D4  0655               	xorwf	??_main,w
   906  01D5  1903               	skipnz
   907  01D6  29D8               	goto	u2171
   908  01D7  29D9               	goto	u2170
   909  01D8                     u2171:
   910  01D8  29F4               	goto	l2515
   911  01D9                     u2170:
   912  01D9                     l2509:
   913  01D9  0859               	movf	main@i,w
   914  01DA  3E67               	addlw	(low (_readButtonStatus| 0))& (0+255)
   915  01DB  0084               	movwf	4
   916  01DC  0800               	movf	0,w
   917  01DD  1D03               	btfss	3,2
   918  01DE  29E0               	goto	u2181
   919  01DF  29E1               	goto	u2180
   920  01E0                     u2181:
   921  01E0  29F4               	goto	l2515
   922  01E1                     u2180:
   923  01E1                     l2511:
   924                           
   925                           ;main.c: 112:                 deviceStateMachine(i + 1);
   926  01E1  0859               	movf	main@i,w
   927  01E2  3E01               	addlw	1
   928  01E3  202A               	fcall	_deviceStateMachine
   929  01E4                     l2513:
   930                           
   931                           ;main.c: 114:                 Botoes[i].status = readButtonStatus[i];
   932  01E4  1283               	bcf	3,5	;RP0=0, select bank0
   933  01E5  1303               	bcf	3,6	;RP1=0, select bank0
   934  01E6  0859               	movf	main@i,w
   935  01E7  3E67               	addlw	(low (_readButtonStatus| 0))& (0+255)
   936  01E8  0084               	movwf	4
   937  01E9  1383               	bcf	3,7	;select IRP bank0
   938  01EA  0800               	movf	0,w
   939  01EB  00D5               	movwf	??_main
   940  01EC  0859               	movf	main@i,w
   941  01ED  00D6               	movwf	??_main+1
   942  01EE  0756               	addwf	??_main+1,w
   943  01EF  3EA1               	addlw	(low ((_Botoes| 0+1)))& (0+255)
   944  01F0  0084               	movwf	4
   945  01F1  0855               	movf	??_main,w
   946  01F2  0080               	movwf	0
   947                           
   948                           ;main.c: 115:             }else if((readButtonStatus[i] != Botoes[i].status) && readButt
      +                          onStatus[i] == 1){
   949  01F3  2A0D               	goto	l2521
   950  01F4                     l2515:
   951  01F4  0859               	movf	main@i,w
   952  01F5  3E67               	addlw	(low (_readButtonStatus| 0))& (0+255)
   953  01F6  0084               	movwf	4
   954  01F7  0800               	movf	0,w
   955  01F8  00D5               	movwf	??_main
   956  01F9  0859               	movf	main@i,w
   957  01FA  00D6               	movwf	??_main+1
   958  01FB  0756               	addwf	??_main+1,w
   959  01FC  3EA1               	addlw	(low ((_Botoes| 0+1)))& (0+255)
   960  01FD  0084               	movwf	4
   961  01FE  0800               	movf	0,w
   962  01FF  0655               	xorwf	??_main,w
   963  0200  1903               	skipnz
   964  0201  2A03               	goto	u2191
   965  0202  2A04               	goto	u2190
   966  0203                     u2191:
   967  0203  2A0D               	goto	l2521
   968  0204                     u2190:
   969  0204                     l2517:
   970  0204  0859               	movf	main@i,w
   971  0205  3E67               	addlw	(low (_readButtonStatus| 0))& (0+255)
   972  0206  0084               	movwf	4
   973  0207  0300               	decf	0,w
   974  0208  1D03               	btfss	3,2
   975  0209  2A0B               	goto	u2201
   976  020A  2A0C               	goto	u2200
   977  020B                     u2201:
   978  020B  2A0D               	goto	l2521
   979  020C                     u2200:
   980  020C  29E4               	goto	l2513
   981  020D                     l2521:
   982                           
   983                           ;main.c: 119:         }
   984  020D  3001               	movlw	1
   985  020E  07D9               	addwf	main@i,f
   986  020F  1803               	skipnc
   987  0210  0ADA               	incf	main@i+1,f
   988  0211  3000               	movlw	0
   989  0212  07DA               	addwf	main@i+1,f
   990  0213                     l2523:
   991  0213  085A               	movf	main@i+1,w
   992  0214  3A80               	xorlw	128
   993  0215  00FF               	movwf	btemp+1
   994  0216  3080               	movlw	128
   995  0217  027F               	subwf	btemp+1,w
   996  0218  1D03               	skipz
   997  0219  2A1C               	goto	u2215
   998  021A  3005               	movlw	5
   999  021B  0259               	subwf	main@i,w
  1000  021C                     u2215:
  1001  021C  1C03               	skipc
  1002  021D  2A1F               	goto	u2211
  1003  021E  2A20               	goto	u2210
  1004  021F                     u2211:
  1005  021F  29C6               	goto	l2507
  1006  0220                     u2210:
  1007  0220  29A4               	goto	l58
  1008  0221  280A               	ljmp	start
  1009  0222                     __end_of_main:
  1010                           
  1011                           	psect	text1
  1012  071A                     __ptext1:	
  1013 ;; *************** function _shiftDisplays *****************
  1014 ;; Defined at:
  1015 ;;		line 116 in file "utils.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;		None
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;		None
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  1    wreg      void 
  1022 ;; Registers used:
  1023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMMON   BANK0   BANK1
  1029 ;;      Params:         0       0       0
  1030 ;;      Locals:         0       0       0
  1031 ;;      Temps:          0       1       0
  1032 ;;      Totals:         0       1       0
  1033 ;;Total ram usage:        1 bytes
  1034 ;; Hardware stack levels used: 1
  1035 ;; Hardware stack levels required when called: 2
  1036 ;; This function calls:
  1037 ;;		_clearPin
  1038 ;;		_setPin
  1039 ;; This function is called by:
  1040 ;;		_main
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044                           
  1045                           ;psect for function _shiftDisplays
  1046  071A                     _shiftDisplays:
  1047  071A                     l2389:	
  1048                           ;incstack = 0
  1049                           ; Regs used in _shiftDisplays: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1050                           
  1051                           
  1052                           ;utils.c: 119:     setPin(Display7seg4digitsVetor[indiceDisplay].pin, 1);
  1053  071A  1283               	bcf	3,5	;RP0=0, select bank0
  1054  071B  1303               	bcf	3,6	;RP1=0, select bank0
  1055  071C  01A0               	clrf	setPin@ucPort
  1056  071D  0AA0               	incf	setPin@ucPort,f
  1057  071E  0870               	movf	_indiceDisplay,w
  1058  071F  00A4               	movwf	??_shiftDisplays
  1059  0720  0724               	addwf	??_shiftDisplays,w
  1060  0721  3E5B               	addlw	(low (_Display7seg4digitsVetor| 0))& (0+255)
  1061  0722  0084               	movwf	4
  1062  0723  1383               	bcf	3,7	;select IRP bank0
  1063  0724  0800               	movf	0,w
  1064  0725  269C               	fcall	_setPin
  1065  0726                     l2391:
  1066                           
  1067                           ;utils.c: 122:     if(++indiceDisplay > 3){
  1068  0726  3001               	movlw	1
  1069  0727  07F0               	addwf	_indiceDisplay,f
  1070  0728  1803               	skipnc
  1071  0729  0AF1               	incf	_indiceDisplay+1,f
  1072  072A  3000               	movlw	0
  1073  072B  07F1               	addwf	_indiceDisplay+1,f
  1074  072C  0871               	movf	_indiceDisplay+1,w
  1075  072D  3A80               	xorlw	128
  1076  072E  00FF               	movwf	btemp+1
  1077  072F  3080               	movlw	128
  1078  0730  027F               	subwf	btemp+1,w
  1079  0731  1D03               	skipz
  1080  0732  2F35               	goto	u2035
  1081  0733  3004               	movlw	4
  1082  0734  0270               	subwf	_indiceDisplay,w
  1083  0735                     u2035:
  1084  0735  1C03               	skipc
  1085  0736  2F38               	goto	u2031
  1086  0737  2F39               	goto	u2030
  1087  0738                     u2031:
  1088  0738  2F3B               	goto	l2395
  1089  0739                     u2030:
  1090  0739                     l2393:
  1091                           
  1092                           ;utils.c: 123:         indiceDisplay = 0;
  1093  0739  01F0               	clrf	_indiceDisplay
  1094  073A  01F1               	clrf	_indiceDisplay+1
  1095  073B                     l2395:
  1096                           
  1097                           ;utils.c: 127:     PORTC = (Display7seg4digitsVetor[indiceDisplay].data);
  1098  073B  0870               	movf	_indiceDisplay,w
  1099  073C  1283               	bcf	3,5	;RP0=0, select bank0
  1100  073D  1303               	bcf	3,6	;RP1=0, select bank0
  1101  073E  00A4               	movwf	??_shiftDisplays
  1102  073F  0724               	addwf	??_shiftDisplays,w
  1103  0740  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  1104  0741  0084               	movwf	4
  1105  0742  1383               	bcf	3,7	;select IRP bank0
  1106  0743  0800               	movf	0,w
  1107  0744  0087               	movwf	7	;volatile
  1108  0745                     l2397:
  1109                           
  1110                           ;utils.c: 130:     clearPin(Display7seg4digitsVetor[indiceDisplay].pin, 1);
  1111  0745  01A0               	clrf	clearPin@ucPort
  1112  0746  0AA0               	incf	clearPin@ucPort,f
  1113  0747  0870               	movf	_indiceDisplay,w
  1114  0748  00A4               	movwf	??_shiftDisplays
  1115  0749  0724               	addwf	??_shiftDisplays,w
  1116  074A  3E5B               	addlw	(low (_Display7seg4digitsVetor| 0))& (0+255)
  1117  074B  0084               	movwf	4
  1118  074C  0800               	movf	0,w
  1119  074D  2657               	fcall	_clearPin
  1120  074E                     l172:
  1121  074E  0008               	return
  1122  074F                     __end_of_shiftDisplays:
  1123                           
  1124                           	psect	text2
  1125  069C                     __ptext2:	
  1126 ;; *************** function _setPin *****************
  1127 ;; Defined at:
  1128 ;;		line 18 in file "utils.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;  ucPin           1    wreg     unsigned char 
  1131 ;;  ucPort          1    0[BANK0 ] unsigned char 
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;  ucPin           1    3[BANK0 ] unsigned char 
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMMON   BANK0   BANK1
  1143 ;;      Params:         0       1       0
  1144 ;;      Locals:         0       1       0
  1145 ;;      Temps:          0       2       0
  1146 ;;      Totals:         0       4       0
  1147 ;;Total ram usage:        4 bytes
  1148 ;; Hardware stack levels used: 1
  1149 ;; Hardware stack levels required when called: 1
  1150 ;; This function calls:
  1151 ;;		Nothing
  1152 ;; This function is called by:
  1153 ;;		_shiftDisplays
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           
  1158                           ;psect for function _setPin
  1159  069C                     _setPin:
  1160                           
  1161                           ;incstack = 0
  1162                           ; Regs used in _setPin: [wreg-fsr0h+status,2+status,0]
  1163                           ;setPin@ucPin stored from wreg
  1164  069C  1283               	bcf	3,5	;RP0=0, select bank0
  1165  069D  1303               	bcf	3,6	;RP1=0, select bank0
  1166  069E  00A3               	movwf	setPin@ucPin
  1167  069F                     l2167:
  1168                           
  1169                           ;utils.c: 21:     switch(ucPort){
  1170  069F  2ECA               	goto	l2179
  1171  06A0                     l2169:
  1172                           
  1173                           ;utils.c: 23:                 PORTA |= (1<<ucPin);
  1174  06A0  3001               	movlw	1
  1175  06A1  00A1               	movwf	??_setPin
  1176  06A2  0A23               	incf	setPin@ucPin,w
  1177  06A3  2EA6               	goto	u1774
  1178  06A4                     u1775:
  1179  06A4  1003               	clrc
  1180  06A5  0DA1               	rlf	??_setPin,f
  1181  06A6                     u1774:
  1182  06A6  3EFF               	addlw	-1
  1183  06A7  1D03               	skipz
  1184  06A8  2EA4               	goto	u1775
  1185  06A9  0821               	movf	??_setPin,w
  1186  06AA  00A2               	movwf	??_setPin+1
  1187  06AB  0822               	movf	??_setPin+1,w
  1188  06AC  0485               	iorwf	5,f	;volatile
  1189                           
  1190                           ;utils.c: 24:             break;
  1191  06AD  2EDD               	goto	l144
  1192  06AE                     l2171:
  1193                           
  1194                           ;utils.c: 26:                 PORTB |= (1<<ucPin);
  1195  06AE  3001               	movlw	1
  1196  06AF  00A1               	movwf	??_setPin
  1197  06B0  0A23               	incf	setPin@ucPin,w
  1198  06B1  2EB4               	goto	u1784
  1199  06B2                     u1785:
  1200  06B2  1003               	clrc
  1201  06B3  0DA1               	rlf	??_setPin,f
  1202  06B4                     u1784:
  1203  06B4  3EFF               	addlw	-1
  1204  06B5  1D03               	skipz
  1205  06B6  2EB2               	goto	u1785
  1206  06B7  0821               	movf	??_setPin,w
  1207  06B8  00A2               	movwf	??_setPin+1
  1208  06B9  0822               	movf	??_setPin+1,w
  1209  06BA  0486               	iorwf	6,f	;volatile
  1210                           
  1211                           ;utils.c: 27:             break;
  1212  06BB  2EDD               	goto	l144
  1213  06BC                     l2173:
  1214                           
  1215                           ;utils.c: 29:                 PORTC |= (1<<ucPin);
  1216  06BC  3001               	movlw	1
  1217  06BD  00A1               	movwf	??_setPin
  1218  06BE  0A23               	incf	setPin@ucPin,w
  1219  06BF  2EC2               	goto	u1794
  1220  06C0                     u1795:
  1221  06C0  1003               	clrc
  1222  06C1  0DA1               	rlf	??_setPin,f
  1223  06C2                     u1794:
  1224  06C2  3EFF               	addlw	-1
  1225  06C3  1D03               	skipz
  1226  06C4  2EC0               	goto	u1795
  1227  06C5  0821               	movf	??_setPin,w
  1228  06C6  00A2               	movwf	??_setPin+1
  1229  06C7  0822               	movf	??_setPin+1,w
  1230  06C8  0487               	iorwf	7,f	;volatile
  1231                           
  1232                           ;utils.c: 30:             break;
  1233  06C9  2EDD               	goto	l144
  1234  06CA                     l2179:
  1235  06CA  0820               	movf	setPin@ucPort,w
  1236  06CB  00A1               	movwf	??_setPin
  1237  06CC  01A2               	clrf	??_setPin+1
  1238                           
  1239                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1240                           ; Switch size 1, requested type "simple"
  1241                           ; Number of cases is 1, Range of values is 0 to 0
  1242                           ; switch strategies available:
  1243                           ; Name         Instructions Cycles
  1244                           ; simple_byte            4     3 (average)
  1245                           ; direct_byte            7     6 (fixed)
  1246                           ; jumptable            260     6 (fixed)
  1247                           ;	Chosen strategy is simple_byte
  1248  06CD  0822               	movf	??_setPin+1,w
  1249  06CE  3A00               	xorlw	0	; case 0
  1250  06CF  1903               	skipnz
  1251  06D0  2ED2               	goto	l2675
  1252  06D1  2EDD               	goto	l144
  1253  06D2                     l2675:
  1254                           
  1255                           ; Switch size 1, requested type "simple"
  1256                           ; Number of cases is 3, Range of values is 0 to 2
  1257                           ; switch strategies available:
  1258                           ; Name         Instructions Cycles
  1259                           ; direct_byte            9     6 (fixed)
  1260                           ; simple_byte           10     6 (average)
  1261                           ; jumptable            260     6 (fixed)
  1262                           ;	Chosen strategy is simple_byte
  1263  06D2  0821               	movf	??_setPin,w
  1264  06D3  3A00               	xorlw	0	; case 0
  1265  06D4  1903               	skipnz
  1266  06D5  2EA0               	goto	l2169
  1267  06D6  3A01               	xorlw	1	; case 1
  1268  06D7  1903               	skipnz
  1269  06D8  2EAE               	goto	l2171
  1270  06D9  3A03               	xorlw	3	; case 2
  1271  06DA  1903               	skipnz
  1272  06DB  2EBC               	goto	l2173
  1273  06DC  2EDD               	goto	l144
  1274  06DD                     l144:
  1275  06DD  0008               	return
  1276  06DE                     __end_of_setPin:
  1277                           
  1278                           	psect	text3
  1279  0657                     __ptext3:	
  1280 ;; *************** function _clearPin *****************
  1281 ;; Defined at:
  1282 ;;		line 39 in file "utils.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  ucPin           1    wreg     unsigned char 
  1285 ;;  ucPort          1    0[BANK0 ] unsigned char 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  ucPin           1    3[BANK0 ] unsigned char 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  1    wreg      void 
  1290 ;; Registers used:
  1291 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMMON   BANK0   BANK1
  1297 ;;      Params:         0       1       0
  1298 ;;      Locals:         0       1       0
  1299 ;;      Temps:          0       2       0
  1300 ;;      Totals:         0       4       0
  1301 ;;Total ram usage:        4 bytes
  1302 ;; Hardware stack levels used: 1
  1303 ;; Hardware stack levels required when called: 1
  1304 ;; This function calls:
  1305 ;;		Nothing
  1306 ;; This function is called by:
  1307 ;;		_shiftDisplays
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           
  1312                           ;psect for function _clearPin
  1313  0657                     _clearPin:
  1314                           
  1315                           ;incstack = 0
  1316                           ; Regs used in _clearPin: [wreg-fsr0h+status,2+status,0]
  1317                           ;clearPin@ucPin stored from wreg
  1318  0657  1283               	bcf	3,5	;RP0=0, select bank0
  1319  0658  1303               	bcf	3,6	;RP1=0, select bank0
  1320  0659  00A3               	movwf	clearPin@ucPin
  1321  065A                     l2187:
  1322                           
  1323                           ;utils.c: 41:     switch(ucPort){
  1324  065A  2E88               	goto	l2199
  1325  065B                     l2189:
  1326                           
  1327                           ;utils.c: 43:                 PORTA &= ~(1<<ucPin);
  1328  065B  3001               	movlw	1
  1329  065C  00A1               	movwf	??_clearPin
  1330  065D  0A23               	incf	clearPin@ucPin,w
  1331  065E  2E61               	goto	u1804
  1332  065F                     u1805:
  1333  065F  1003               	clrc
  1334  0660  0DA1               	rlf	??_clearPin,f
  1335  0661                     u1804:
  1336  0661  3EFF               	addlw	-1
  1337  0662  1D03               	skipz
  1338  0663  2E5F               	goto	u1805
  1339  0664  0821               	movf	??_clearPin,w
  1340  0665  3AFF               	xorlw	255
  1341  0666  00A2               	movwf	??_clearPin+1
  1342  0667  0822               	movf	??_clearPin+1,w
  1343  0668  0585               	andwf	5,f	;volatile
  1344                           
  1345                           ;utils.c: 44:             break;
  1346  0669  2E9B               	goto	l153
  1347  066A                     l2191:
  1348                           
  1349                           ;utils.c: 46:                 PORTB &= ~(1<<ucPin);
  1350  066A  3001               	movlw	1
  1351  066B  00A1               	movwf	??_clearPin
  1352  066C  0A23               	incf	clearPin@ucPin,w
  1353  066D  2E70               	goto	u1814
  1354  066E                     u1815:
  1355  066E  1003               	clrc
  1356  066F  0DA1               	rlf	??_clearPin,f
  1357  0670                     u1814:
  1358  0670  3EFF               	addlw	-1
  1359  0671  1D03               	skipz
  1360  0672  2E6E               	goto	u1815
  1361  0673  0821               	movf	??_clearPin,w
  1362  0674  3AFF               	xorlw	255
  1363  0675  00A2               	movwf	??_clearPin+1
  1364  0676  0822               	movf	??_clearPin+1,w
  1365  0677  0586               	andwf	6,f	;volatile
  1366                           
  1367                           ;utils.c: 47:             break;
  1368  0678  2E9B               	goto	l153
  1369  0679                     l2193:
  1370                           
  1371                           ;utils.c: 49:                 PORTC &= ~(1<<ucPin);
  1372  0679  3001               	movlw	1
  1373  067A  00A1               	movwf	??_clearPin
  1374  067B  0A23               	incf	clearPin@ucPin,w
  1375  067C  2E7F               	goto	u1824
  1376  067D                     u1825:
  1377  067D  1003               	clrc
  1378  067E  0DA1               	rlf	??_clearPin,f
  1379  067F                     u1824:
  1380  067F  3EFF               	addlw	-1
  1381  0680  1D03               	skipz
  1382  0681  2E7D               	goto	u1825
  1383  0682  0821               	movf	??_clearPin,w
  1384  0683  3AFF               	xorlw	255
  1385  0684  00A2               	movwf	??_clearPin+1
  1386  0685  0822               	movf	??_clearPin+1,w
  1387  0686  0587               	andwf	7,f	;volatile
  1388                           
  1389                           ;utils.c: 50:             break;
  1390  0687  2E9B               	goto	l153
  1391  0688                     l2199:
  1392  0688  0820               	movf	clearPin@ucPort,w
  1393  0689  00A1               	movwf	??_clearPin
  1394  068A  01A2               	clrf	??_clearPin+1
  1395                           
  1396                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1397                           ; Switch size 1, requested type "simple"
  1398                           ; Number of cases is 1, Range of values is 0 to 0
  1399                           ; switch strategies available:
  1400                           ; Name         Instructions Cycles
  1401                           ; simple_byte            4     3 (average)
  1402                           ; direct_byte            7     6 (fixed)
  1403                           ; jumptable            260     6 (fixed)
  1404                           ;	Chosen strategy is simple_byte
  1405  068B  0822               	movf	??_clearPin+1,w
  1406  068C  3A00               	xorlw	0	; case 0
  1407  068D  1903               	skipnz
  1408  068E  2E90               	goto	l2677
  1409  068F  2E9B               	goto	l153
  1410  0690                     l2677:
  1411                           
  1412                           ; Switch size 1, requested type "simple"
  1413                           ; Number of cases is 3, Range of values is 0 to 2
  1414                           ; switch strategies available:
  1415                           ; Name         Instructions Cycles
  1416                           ; direct_byte            9     6 (fixed)
  1417                           ; simple_byte           10     6 (average)
  1418                           ; jumptable            260     6 (fixed)
  1419                           ;	Chosen strategy is simple_byte
  1420  0690  0821               	movf	??_clearPin,w
  1421  0691  3A00               	xorlw	0	; case 0
  1422  0692  1903               	skipnz
  1423  0693  2E5B               	goto	l2189
  1424  0694  3A01               	xorlw	1	; case 1
  1425  0695  1903               	skipnz
  1426  0696  2E6A               	goto	l2191
  1427  0697  3A03               	xorlw	3	; case 2
  1428  0698  1903               	skipnz
  1429  0699  2E79               	goto	l2193
  1430  069A  2E9B               	goto	l153
  1431  069B                     l153:
  1432  069B  0008               	return
  1433  069C                     __end_of_clearPin:
  1434                           
  1435                           	psect	text4
  1436  0777                     __ptext4:	
  1437 ;; *************** function _initDisplay *****************
  1438 ;; Defined at:
  1439 ;;		line 80 in file "utils.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;		None
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;		None
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		wreg, status,2
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMMON   BANK0   BANK1
  1453 ;;      Params:         0       0       0
  1454 ;;      Locals:         0       0       0
  1455 ;;      Temps:          0       1       0
  1456 ;;      Totals:         0       1       0
  1457 ;;Total ram usage:        1 bytes
  1458 ;; Hardware stack levels used: 1
  1459 ;; Hardware stack levels required when called: 1
  1460 ;; This function calls:
  1461 ;;		Nothing
  1462 ;; This function is called by:
  1463 ;;		_main
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           
  1468                           ;psect for function _initDisplay
  1469  0777                     _initDisplay:
  1470  0777                     l2357:	
  1471                           ;incstack = 0
  1472                           ; Regs used in _initDisplay: [wreg+status,2]
  1473                           
  1474                           
  1475                           ;utils.c: 82:     Display7seg4digitsVetor[0].data = 0x00;
  1476  0777  1283               	bcf	3,5	;RP0=0, select bank0
  1477  0778  1303               	bcf	3,6	;RP1=0, select bank0
  1478  0779  01DC               	clrf	_Display7seg4digitsVetor+1
  1479  077A                     l2359:
  1480                           
  1481                           ;utils.c: 83:     Display7seg4digitsVetor[0].pin = 4;
  1482  077A  3004               	movlw	4
  1483  077B  00A0               	movwf	??_initDisplay
  1484  077C  0820               	movf	??_initDisplay,w
  1485  077D  00DB               	movwf	_Display7seg4digitsVetor
  1486  077E                     l2361:
  1487                           
  1488                           ;utils.c: 85:     Display7seg4digitsVetor[1].data = 0x00;
  1489  077E  01DE               	clrf	_Display7seg4digitsVetor+3
  1490                           
  1491                           ;utils.c: 86:     Display7seg4digitsVetor[1].pin = 5;
  1492  077F  3005               	movlw	5
  1493  0780  00A0               	movwf	??_initDisplay
  1494  0781  0820               	movf	??_initDisplay,w
  1495  0782  00DD               	movwf	_Display7seg4digitsVetor+2
  1496  0783                     l2363:
  1497                           
  1498                           ;utils.c: 88:     Display7seg4digitsVetor[2].data = 0x00;
  1499  0783  01E0               	clrf	_Display7seg4digitsVetor+5
  1500  0784                     l2365:
  1501                           
  1502                           ;utils.c: 89:     Display7seg4digitsVetor[2].pin = 6;
  1503  0784  3006               	movlw	6
  1504  0785  00A0               	movwf	??_initDisplay
  1505  0786  0820               	movf	??_initDisplay,w
  1506  0787  00DF               	movwf	_Display7seg4digitsVetor+4
  1507                           
  1508                           ;utils.c: 91:     Display7seg4digitsVetor[3].data = 0x00;
  1509  0788  01E2               	clrf	_Display7seg4digitsVetor+7
  1510  0789                     l2367:
  1511                           
  1512                           ;utils.c: 92:     Display7seg4digitsVetor[3].pin = 7;
  1513  0789  3007               	movlw	7
  1514  078A  00A0               	movwf	??_initDisplay
  1515  078B  0820               	movf	??_initDisplay,w
  1516  078C  00E1               	movwf	_Display7seg4digitsVetor+6
  1517  078D                     l165:
  1518  078D  0008               	return
  1519  078E                     __end_of_initDisplay:
  1520                           
  1521                           	psect	text5
  1522  074F                     __ptext5:	
  1523 ;; *************** function _initButtons *****************
  1524 ;; Defined at:
  1525 ;;		line 96 in file "utils.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;		None
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;		None
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  1    wreg      void 
  1532 ;; Registers used:
  1533 ;;		wreg, status,2
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMMON   BANK0   BANK1
  1539 ;;      Params:         0       0       0
  1540 ;;      Locals:         0       0       0
  1541 ;;      Temps:          0       1       0
  1542 ;;      Totals:         0       1       0
  1543 ;;Total ram usage:        1 bytes
  1544 ;; Hardware stack levels used: 1
  1545 ;; Hardware stack levels required when called: 1
  1546 ;; This function calls:
  1547 ;;		Nothing
  1548 ;; This function is called by:
  1549 ;;		_main
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           
  1554                           ;psect for function _initButtons
  1555  074F                     _initButtons:
  1556  074F                     l2369:	
  1557                           ;incstack = 0
  1558                           ; Regs used in _initButtons: [wreg+status,2]
  1559                           
  1560                           
  1561                           ;utils.c: 97:     Botoes[0].pin = 0;
  1562  074F  1683               	bsf	3,5	;RP0=1, select bank1
  1563  0750  1303               	bcf	3,6	;RP1=0, select bank1
  1564  0751  01A0               	clrf	_Botoes^(0+128)
  1565  0752                     l2371:
  1566                           
  1567                           ;utils.c: 98:     Botoes[0].status = 1;
  1568  0752  01A1               	clrf	(_Botoes^(0+128)+1)
  1569  0753  0AA1               	incf	(_Botoes^(0+128)+1),f
  1570  0754                     l2373:
  1571                           
  1572                           ;utils.c: 100:     Botoes[1].pin = 1;
  1573  0754  01A2               	clrf	(_Botoes^(0+128)+2)
  1574  0755  0AA2               	incf	(_Botoes^(0+128)+2),f
  1575  0756                     l2375:
  1576                           
  1577                           ;utils.c: 101:     Botoes[1].status = 1;
  1578  0756  01A3               	clrf	(_Botoes^(0+128)+3)
  1579  0757  0AA3               	incf	(_Botoes^(0+128)+3),f
  1580  0758                     l2377:
  1581                           
  1582                           ;utils.c: 103:     Botoes[2].pin = 2;
  1583  0758  3002               	movlw	2
  1584  0759  1283               	bcf	3,5	;RP0=0, select bank0
  1585  075A  1303               	bcf	3,6	;RP1=0, select bank0
  1586  075B  00A0               	movwf	??_initButtons
  1587  075C  0820               	movf	??_initButtons,w
  1588  075D  1683               	bsf	3,5	;RP0=1, select bank1
  1589  075E  1303               	bcf	3,6	;RP1=0, select bank1
  1590  075F  00A4               	movwf	(_Botoes^(0+128)+4)
  1591  0760                     l2379:
  1592                           
  1593                           ;utils.c: 104:     Botoes[2].status = 1;
  1594  0760  01A5               	clrf	(_Botoes^(0+128)+5)
  1595  0761  0AA5               	incf	(_Botoes^(0+128)+5),f
  1596  0762                     l2381:
  1597                           
  1598                           ;utils.c: 106:     Botoes[3].pin = 4;
  1599  0762  3004               	movlw	4
  1600  0763  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0764  1303               	bcf	3,6	;RP1=0, select bank0
  1602  0765  00A0               	movwf	??_initButtons
  1603  0766  0820               	movf	??_initButtons,w
  1604  0767  1683               	bsf	3,5	;RP0=1, select bank1
  1605  0768  1303               	bcf	3,6	;RP1=0, select bank1
  1606  0769  00A6               	movwf	(_Botoes^(0+128)+6)
  1607  076A                     l2383:
  1608                           
  1609                           ;utils.c: 107:     Botoes[3].status = 1;
  1610  076A  01A7               	clrf	(_Botoes^(0+128)+7)
  1611  076B  0AA7               	incf	(_Botoes^(0+128)+7),f
  1612  076C                     l2385:
  1613                           
  1614                           ;utils.c: 109:     Botoes[4].pin = 5;
  1615  076C  3005               	movlw	5
  1616  076D  1283               	bcf	3,5	;RP0=0, select bank0
  1617  076E  1303               	bcf	3,6	;RP1=0, select bank0
  1618  076F  00A0               	movwf	??_initButtons
  1619  0770  0820               	movf	??_initButtons,w
  1620  0771  1683               	bsf	3,5	;RP0=1, select bank1
  1621  0772  1303               	bcf	3,6	;RP1=0, select bank1
  1622  0773  00A8               	movwf	(_Botoes^(0+128)+8)
  1623  0774                     l2387:
  1624                           
  1625                           ;utils.c: 110:     Botoes[4].status = 1;
  1626  0774  01A9               	clrf	(_Botoes^(0+128)+9)
  1627  0775  0AA9               	incf	(_Botoes^(0+128)+9),f
  1628  0776                     l168:
  1629  0776  0008               	return
  1630  0777                     __end_of_initButtons:
  1631                           
  1632                           	psect	text6
  1633  002A                     __ptext6:	
  1634 ;; *************** function _deviceStateMachine *****************
  1635 ;; Defined at:
  1636 ;;		line 258 in file "utils.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;  ucButton        1    wreg     unsigned char 
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;  ucButton        1   52[BANK0 ] unsigned char 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMMON   BANK0   BANK1
  1650 ;;      Params:         0       0       0
  1651 ;;      Locals:         0       1       0
  1652 ;;      Temps:          0       3       0
  1653 ;;      Totals:         0       4       0
  1654 ;;Total ram usage:        4 bytes
  1655 ;; Hardware stack levels used: 1
  1656 ;; Hardware stack levels required when called: 4
  1657 ;; This function calls:
  1658 ;;		___awdiv
  1659 ;;		___awmod
  1660 ;;		_rollDice
  1661 ;;		_writeCharOnDisplay
  1662 ;; This function is called by:
  1663 ;;		_main
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           
  1668                           ;psect for function _deviceStateMachine
  1669  002A                     _deviceStateMachine:
  1670                           
  1671                           ;incstack = 0
  1672                           ; Regs used in _deviceStateMachine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1673                           ;deviceStateMachine@ucButton stored from wreg
  1674  002A  1283               	bcf	3,5	;RP0=0, select bank0
  1675  002B  1303               	bcf	3,6	;RP1=0, select bank0
  1676  002C  00D4               	movwf	deviceStateMachine@ucButton
  1677  002D                     l2399:
  1678                           
  1679                           ;utils.c: 261:     if(1 == ucButton){
  1680  002D  0354               	decf	deviceStateMachine@ucButton,w
  1681  002E  1D03               	btfss	3,2
  1682  002F  2831               	goto	u2041
  1683  0030  2832               	goto	u2040
  1684  0031                     u2041:
  1685  0031  2835               	goto	l2409
  1686  0032                     u2040:
  1687  0032                     l2401:
  1688                           
  1689                           ;utils.c: 262:         deviceCurrentState = ROLL;
  1690  0032  01EE               	clrf	_deviceCurrentState
  1691  0033                     l2403:
  1692                           
  1693                           ;utils.c: 264:         rollDice();
  1694  0033  22CB               	fcall	_rollDice
  1695  0034  2932               	goto	l195
  1696  0035                     l2409:
  1697  0035  086E               	movf	_deviceCurrentState,w
  1698  0036  1D03               	btfss	3,2
  1699  0037  2839               	goto	u2051
  1700  0038  283A               	goto	u2050
  1701  0039                     u2051:
  1702  0039  28E4               	goto	l2463
  1703  003A                     u2050:
  1704  003A                     l2411:
  1705                           
  1706                           ;utils.c: 268:         deviceCurrentState = MENU;
  1707  003A  01EE               	clrf	_deviceCurrentState
  1708  003B  0AEE               	incf	_deviceCurrentState,f
  1709  003C                     l2413:
  1710                           
  1711                           ;utils.c: 270:         writeCharOnDisplay('0' + diceState[0], 0);
  1712  003C  01C5               	clrf	writeCharOnDisplay@ucDisplay
  1713  003D  086C               	movf	_diceState,w
  1714  003E  3E30               	addlw	48
  1715  003F  2222               	fcall	_writeCharOnDisplay
  1716                           
  1717                           ;utils.c: 271:         writeCharOnDisplay('d', 1);
  1718  0040  1283               	bcf	3,5	;RP0=0, select bank0
  1719  0041  1303               	bcf	3,6	;RP1=0, select bank0
  1720  0042  01C5               	clrf	writeCharOnDisplay@ucDisplay
  1721  0043  0AC5               	incf	writeCharOnDisplay@ucDisplay,f
  1722  0044  3064               	movlw	100
  1723  0045  2222               	fcall	_writeCharOnDisplay
  1724                           
  1725                           ;utils.c: 272:         writeCharOnDisplay('0' + diceState[1]/10, 2);
  1726  0046  3002               	movlw	2
  1727  0047  1283               	bcf	3,5	;RP0=0, select bank0
  1728  0048  1303               	bcf	3,6	;RP1=0, select bank0
  1729  0049  00D1               	movwf	??_deviceStateMachine
  1730  004A  0851               	movf	??_deviceStateMachine,w
  1731  004B  00C5               	movwf	writeCharOnDisplay@ucDisplay
  1732  004C  300A               	movlw	10
  1733  004D  00A0               	movwf	___awdiv@divisor
  1734  004E  3000               	movlw	0
  1735  004F  00A1               	movwf	___awdiv@divisor+1
  1736  0050  086D               	movf	_diceState+1,w
  1737  0051  00D2               	movwf	??_deviceStateMachine+1
  1738  0052  01D3               	clrf	??_deviceStateMachine+2
  1739  0053  0852               	movf	??_deviceStateMachine+1,w
  1740  0054  00A2               	movwf	___awdiv@dividend
  1741  0055  0853               	movf	??_deviceStateMachine+2,w
  1742  0056  00A3               	movwf	___awdiv@dividend+1
  1743  0057  2413               	fcall	___awdiv
  1744  0058  1283               	bcf	3,5	;RP0=0, select bank0
  1745  0059  1303               	bcf	3,6	;RP1=0, select bank0
  1746  005A  0820               	movf	?___awdiv,w
  1747  005B  3E30               	addlw	48
  1748  005C  2222               	fcall	_writeCharOnDisplay
  1749                           
  1750                           ;utils.c: 273:         writeCharOnDisplay('0' + diceState[1]%10, 3);
  1751  005D  3003               	movlw	3
  1752  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1753  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1754  0060  00D1               	movwf	??_deviceStateMachine
  1755  0061  0851               	movf	??_deviceStateMachine,w
  1756  0062  00C5               	movwf	writeCharOnDisplay@ucDisplay
  1757  0063  300A               	movlw	10
  1758  0064  00A0               	movwf	___awmod@divisor
  1759  0065  3000               	movlw	0
  1760  0066  00A1               	movwf	___awmod@divisor+1
  1761  0067  086D               	movf	_diceState+1,w
  1762  0068  00D2               	movwf	??_deviceStateMachine+1
  1763  0069  01D3               	clrf	??_deviceStateMachine+2
  1764  006A  0852               	movf	??_deviceStateMachine+1,w
  1765  006B  00A2               	movwf	___awmod@dividend
  1766  006C  0853               	movf	??_deviceStateMachine+2,w
  1767  006D  00A3               	movwf	___awmod@dividend+1
  1768  006E  247C               	fcall	___awmod
  1769  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1770  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1771  0071  0820               	movf	?___awmod,w
  1772  0072  3E30               	addlw	48
  1773  0073  2222               	fcall	_writeCharOnDisplay
  1774  0074  2932               	goto	l195
  1775  0075                     l2417:
  1776                           
  1777                           ;utils.c: 281:             if(diceState[0] < 9 ){
  1778  0075  3009               	movlw	9
  1779  0076  026C               	subwf	_diceState,w
  1780  0077  1803               	skipnc
  1781  0078  287A               	goto	u2061
  1782  0079  287B               	goto	u2060
  1783  007A                     u2061:
  1784  007A  28FA               	goto	l2465
  1785  007B                     u2060:
  1786  007B                     l2419:
  1787                           
  1788                           ;utils.c: 282:                 diceState[0]++;
  1789  007B  3001               	movlw	1
  1790  007C  00D1               	movwf	??_deviceStateMachine
  1791  007D  0851               	movf	??_deviceStateMachine,w
  1792  007E  07EC               	addwf	_diceState,f
  1793  007F  28FA               	goto	l2465
  1794  0080                     l2421:
  1795                           
  1796                           ;utils.c: 287:             if(diceState[0] > 1){
  1797  0080  3002               	movlw	2
  1798  0081  026C               	subwf	_diceState,w
  1799  0082  1C03               	skipc
  1800  0083  2885               	goto	u2071
  1801  0084  2886               	goto	u2070
  1802  0085                     u2071:
  1803  0085  28FA               	goto	l2465
  1804  0086                     u2070:
  1805  0086                     l2423:
  1806                           
  1807                           ;utils.c: 288:                 diceState[0]--;
  1808  0086  3001               	movlw	1
  1809  0087  02EC               	subwf	_diceState,f
  1810  0088  28FA               	goto	l2465
  1811  0089                     l2425:
  1812                           
  1813                           ;utils.c: 293:             if(diceState[1] < 20){
  1814  0089  3014               	movlw	20
  1815  008A  026D               	subwf	_diceState+1,w
  1816  008B  1803               	skipnc
  1817  008C  288E               	goto	u2081
  1818  008D  288F               	goto	u2080
  1819  008E                     u2081:
  1820  008E  28FA               	goto	l2465
  1821  008F                     u2080:
  1822  008F  28A9               	goto	l2441
  1823  0090                     l2429:
  1824                           
  1825                           ;utils.c: 296:                         diceState[1] = 20;
  1826  0090  3014               	movlw	20
  1827  0091  00D1               	movwf	??_deviceStateMachine
  1828  0092  0851               	movf	??_deviceStateMachine,w
  1829  0093  00ED               	movwf	_diceState+1
  1830                           
  1831                           ;utils.c: 297:                         break;
  1832  0094  28FA               	goto	l2465
  1833  0095                     l2431:
  1834                           
  1835                           ;utils.c: 299:                         diceState[1] = 12;
  1836  0095  300C               	movlw	12
  1837  0096  00D1               	movwf	??_deviceStateMachine
  1838  0097  0851               	movf	??_deviceStateMachine,w
  1839  0098  00ED               	movwf	_diceState+1
  1840                           
  1841                           ;utils.c: 300:                         break;
  1842  0099  28FA               	goto	l2465
  1843  009A                     l2433:
  1844                           
  1845                           ;utils.c: 302:                         diceState[1] = 10;
  1846  009A  300A               	movlw	10
  1847  009B  00D1               	movwf	??_deviceStateMachine
  1848  009C  0851               	movf	??_deviceStateMachine,w
  1849  009D  00ED               	movwf	_diceState+1
  1850                           
  1851                           ;utils.c: 303:                         break;
  1852  009E  28FA               	goto	l2465
  1853  009F                     l2435:
  1854                           
  1855                           ;utils.c: 305:                         diceState[1] = 8;
  1856  009F  3008               	movlw	8
  1857  00A0  00D1               	movwf	??_deviceStateMachine
  1858  00A1  0851               	movf	??_deviceStateMachine,w
  1859  00A2  00ED               	movwf	_diceState+1
  1860                           
  1861                           ;utils.c: 306:                         break;
  1862  00A3  28FA               	goto	l2465
  1863  00A4                     l2437:
  1864                           
  1865                           ;utils.c: 308:                         diceState[1]++;
  1866  00A4  3001               	movlw	1
  1867  00A5  00D1               	movwf	??_deviceStateMachine
  1868  00A6  0851               	movf	??_deviceStateMachine,w
  1869  00A7  07ED               	addwf	_diceState+1,f
  1870                           
  1871                           ;utils.c: 309:                         break;
  1872  00A8  28FA               	goto	l2465
  1873  00A9                     l2441:
  1874  00A9  086D               	movf	_diceState+1,w
  1875  00AA  00D1               	movwf	??_deviceStateMachine
  1876  00AB  01D2               	clrf	??_deviceStateMachine+1
  1877                           
  1878                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1879                           ; Switch size 1, requested type "simple"
  1880                           ; Number of cases is 1, Range of values is 0 to 0
  1881                           ; switch strategies available:
  1882                           ; Name         Instructions Cycles
  1883                           ; simple_byte            4     3 (average)
  1884                           ; direct_byte            7     6 (fixed)
  1885                           ; jumptable            260     6 (fixed)
  1886                           ;	Chosen strategy is simple_byte
  1887  00AC  0852               	movf	??_deviceStateMachine+1,w
  1888  00AD  3A00               	xorlw	0	; case 0
  1889  00AE  1903               	skipnz
  1890  00AF  28B1               	goto	l2679
  1891  00B0  28A4               	goto	l2437
  1892  00B1                     l2679:
  1893                           
  1894                           ; Switch size 1, requested type "simple"
  1895                           ; Number of cases is 4, Range of values is 6 to 12
  1896                           ; switch strategies available:
  1897                           ; Name         Instructions Cycles
  1898                           ; simple_byte           13     7 (average)
  1899                           ; direct_byte           16     9 (fixed)
  1900                           ; jumptable            263     9 (fixed)
  1901                           ;	Chosen strategy is simple_byte
  1902  00B1  0851               	movf	??_deviceStateMachine,w
  1903  00B2  3A06               	xorlw	6	; case 6
  1904  00B3  1903               	skipnz
  1905  00B4  289F               	goto	l2435
  1906  00B5  3A0E               	xorlw	14	; case 8
  1907  00B6  1903               	skipnz
  1908  00B7  289A               	goto	l2433
  1909  00B8  3A02               	xorlw	2	; case 10
  1910  00B9  1903               	skipnz
  1911  00BA  2895               	goto	l2431
  1912  00BB  3A06               	xorlw	6	; case 12
  1913  00BC  1903               	skipnz
  1914  00BD  2890               	goto	l2429
  1915  00BE  28A4               	goto	l2437
  1916  00BF                     l2443:
  1917                           
  1918                           ;utils.c: 316:             if(diceState[1] > 2){
  1919  00BF  3003               	movlw	3
  1920  00C0  026D               	subwf	_diceState+1,w
  1921  00C1  1C03               	skipc
  1922  00C2  28C4               	goto	u2091
  1923  00C3  28C5               	goto	u2090
  1924  00C4                     u2091:
  1925  00C4  28FA               	goto	l2465
  1926  00C5                     u2090:
  1927  00C5  28CE               	goto	l2459
  1928  00C6                     l2453:
  1929                           
  1930                           ;utils.c: 328:                         diceState[1] = 6;
  1931  00C6  3006               	movlw	6
  1932  00C7  00D1               	movwf	??_deviceStateMachine
  1933  00C8  0851               	movf	??_deviceStateMachine,w
  1934  00C9  00ED               	movwf	_diceState+1
  1935                           
  1936                           ;utils.c: 329:                         break;
  1937  00CA  28FA               	goto	l2465
  1938  00CB                     l2455:
  1939                           
  1940                           ;utils.c: 331:                         diceState[1]--;
  1941  00CB  3001               	movlw	1
  1942  00CC  02ED               	subwf	_diceState+1,f
  1943                           
  1944                           ;utils.c: 332:                         break;
  1945  00CD  28FA               	goto	l2465
  1946  00CE                     l2459:
  1947  00CE  086D               	movf	_diceState+1,w
  1948  00CF  00D1               	movwf	??_deviceStateMachine
  1949  00D0  01D2               	clrf	??_deviceStateMachine+1
  1950                           
  1951                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1952                           ; Switch size 1, requested type "simple"
  1953                           ; Number of cases is 1, Range of values is 0 to 0
  1954                           ; switch strategies available:
  1955                           ; Name         Instructions Cycles
  1956                           ; simple_byte            4     3 (average)
  1957                           ; direct_byte            7     6 (fixed)
  1958                           ; jumptable            260     6 (fixed)
  1959                           ;	Chosen strategy is simple_byte
  1960  00D1  0852               	movf	??_deviceStateMachine+1,w
  1961  00D2  3A00               	xorlw	0	; case 0
  1962  00D3  1903               	skipnz
  1963  00D4  28D6               	goto	l2681
  1964  00D5  28CB               	goto	l2455
  1965  00D6                     l2681:
  1966                           
  1967                           ; Switch size 1, requested type "simple"
  1968                           ; Number of cases is 4, Range of values is 8 to 20
  1969                           ; switch strategies available:
  1970                           ; Name         Instructions Cycles
  1971                           ; simple_byte           13     7 (average)
  1972                           ; direct_byte           22     9 (fixed)
  1973                           ; jumptable            263     9 (fixed)
  1974                           ;	Chosen strategy is simple_byte
  1975  00D6  0851               	movf	??_deviceStateMachine,w
  1976  00D7  3A08               	xorlw	8	; case 8
  1977  00D8  1903               	skipnz
  1978  00D9  28C6               	goto	l2453
  1979  00DA  3A02               	xorlw	2	; case 10
  1980  00DB  1903               	skipnz
  1981  00DC  289F               	goto	l2435
  1982  00DD  3A06               	xorlw	6	; case 12
  1983  00DE  1903               	skipnz
  1984  00DF  289A               	goto	l2433
  1985  00E0  3A18               	xorlw	24	; case 20
  1986  00E1  1903               	skipnz
  1987  00E2  2895               	goto	l2431
  1988  00E3  28CB               	goto	l2455
  1989  00E4                     l2463:
  1990  00E4  0854               	movf	deviceStateMachine@ucButton,w
  1991  00E5  00D1               	movwf	??_deviceStateMachine
  1992  00E6  01D2               	clrf	??_deviceStateMachine+1
  1993                           
  1994                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1995                           ; Switch size 1, requested type "simple"
  1996                           ; Number of cases is 1, Range of values is 0 to 0
  1997                           ; switch strategies available:
  1998                           ; Name         Instructions Cycles
  1999                           ; simple_byte            4     3 (average)
  2000                           ; direct_byte            7     6 (fixed)
  2001                           ; jumptable            260     6 (fixed)
  2002                           ;	Chosen strategy is simple_byte
  2003  00E7  0852               	movf	??_deviceStateMachine+1,w
  2004  00E8  3A00               	xorlw	0	; case 0
  2005  00E9  1903               	skipnz
  2006  00EA  28EC               	goto	l2683
  2007  00EB  28FA               	goto	l2465
  2008  00EC                     l2683:
  2009                           
  2010                           ; Switch size 1, requested type "simple"
  2011                           ; Number of cases is 4, Range of values is 2 to 5
  2012                           ; switch strategies available:
  2013                           ; Name         Instructions Cycles
  2014                           ; simple_byte           13     7 (average)
  2015                           ; direct_byte           13     9 (fixed)
  2016                           ; jumptable            263     9 (fixed)
  2017                           ;	Chosen strategy is simple_byte
  2018  00EC  0851               	movf	??_deviceStateMachine,w
  2019  00ED  3A02               	xorlw	2	; case 2
  2020  00EE  1903               	skipnz
  2021  00EF  2875               	goto	l2417
  2022  00F0  3A01               	xorlw	1	; case 3
  2023  00F1  1903               	skipnz
  2024  00F2  2880               	goto	l2421
  2025  00F3  3A07               	xorlw	7	; case 4
  2026  00F4  1903               	skipnz
  2027  00F5  2889               	goto	l2425
  2028  00F6  3A01               	xorlw	1	; case 5
  2029  00F7  1903               	skipnz
  2030  00F8  28BF               	goto	l2443
  2031  00F9  28FA               	goto	l2465
  2032  00FA                     l2465:
  2033                           
  2034                           ;utils.c: 340:         writeCharOnDisplay('0' + diceState[0], 0);
  2035  00FA  01C5               	clrf	writeCharOnDisplay@ucDisplay
  2036  00FB  086C               	movf	_diceState,w
  2037  00FC  3E30               	addlw	48
  2038  00FD  2222               	fcall	_writeCharOnDisplay
  2039                           
  2040                           ;utils.c: 341:         writeCharOnDisplay('d', 1);
  2041  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  2042  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  2043  0100  01C5               	clrf	writeCharOnDisplay@ucDisplay
  2044  0101  0AC5               	incf	writeCharOnDisplay@ucDisplay,f
  2045  0102  3064               	movlw	100
  2046  0103  2222               	fcall	_writeCharOnDisplay
  2047                           
  2048                           ;utils.c: 342:         writeCharOnDisplay('0' + diceState[1]/10, 2);
  2049  0104  3002               	movlw	2
  2050  0105  1283               	bcf	3,5	;RP0=0, select bank0
  2051  0106  1303               	bcf	3,6	;RP1=0, select bank0
  2052  0107  00D1               	movwf	??_deviceStateMachine
  2053  0108  0851               	movf	??_deviceStateMachine,w
  2054  0109  00C5               	movwf	writeCharOnDisplay@ucDisplay
  2055  010A  300A               	movlw	10
  2056  010B  00A0               	movwf	___awdiv@divisor
  2057  010C  3000               	movlw	0
  2058  010D  00A1               	movwf	___awdiv@divisor+1
  2059  010E  086D               	movf	_diceState+1,w
  2060  010F  00D2               	movwf	??_deviceStateMachine+1
  2061  0110  01D3               	clrf	??_deviceStateMachine+2
  2062  0111  0852               	movf	??_deviceStateMachine+1,w
  2063  0112  00A2               	movwf	___awdiv@dividend
  2064  0113  0853               	movf	??_deviceStateMachine+2,w
  2065  0114  00A3               	movwf	___awdiv@dividend+1
  2066  0115  2413               	fcall	___awdiv
  2067  0116  1283               	bcf	3,5	;RP0=0, select bank0
  2068  0117  1303               	bcf	3,6	;RP1=0, select bank0
  2069  0118  0820               	movf	?___awdiv,w
  2070  0119  3E30               	addlw	48
  2071  011A  2222               	fcall	_writeCharOnDisplay
  2072                           
  2073                           ;utils.c: 343:         writeCharOnDisplay('0' + diceState[1]%10, 3);
  2074  011B  3003               	movlw	3
  2075  011C  1283               	bcf	3,5	;RP0=0, select bank0
  2076  011D  1303               	bcf	3,6	;RP1=0, select bank0
  2077  011E  00D1               	movwf	??_deviceStateMachine
  2078  011F  0851               	movf	??_deviceStateMachine,w
  2079  0120  00C5               	movwf	writeCharOnDisplay@ucDisplay
  2080  0121  300A               	movlw	10
  2081  0122  00A0               	movwf	___awmod@divisor
  2082  0123  3000               	movlw	0
  2083  0124  00A1               	movwf	___awmod@divisor+1
  2084  0125  086D               	movf	_diceState+1,w
  2085  0126  00D2               	movwf	??_deviceStateMachine+1
  2086  0127  01D3               	clrf	??_deviceStateMachine+2
  2087  0128  0852               	movf	??_deviceStateMachine+1,w
  2088  0129  00A2               	movwf	___awmod@dividend
  2089  012A  0853               	movf	??_deviceStateMachine+2,w
  2090  012B  00A3               	movwf	___awmod@dividend+1
  2091  012C  247C               	fcall	___awmod
  2092  012D  1283               	bcf	3,5	;RP0=0, select bank0
  2093  012E  1303               	bcf	3,6	;RP1=0, select bank0
  2094  012F  0820               	movf	?___awmod,w
  2095  0130  3E30               	addlw	48
  2096  0131  2222               	fcall	_writeCharOnDisplay
  2097  0132                     l195:
  2098  0132  0008               	return
  2099  0133                     __end_of_deviceStateMachine:
  2100                           
  2101                           	psect	text7
  2102  02CB                     __ptext7:	
  2103 ;; *************** function _rollDice *****************
  2104 ;; Defined at:
  2105 ;;		line 356 in file "utils.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;  ulTotal         2   47[BANK0 ] unsigned int 
  2110 ;;  i               2   45[BANK0 ] int 
  2111 ;; Return value:  Size  Location     Type
  2112 ;;                  1    wreg      void 
  2113 ;; Registers used:
  2114 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMMON   BANK0   BANK1
  2120 ;;      Params:         0       0       0
  2121 ;;      Locals:         0       4       0
  2122 ;;      Temps:          0       4       0
  2123 ;;      Totals:         0       8       0
  2124 ;;Total ram usage:        8 bytes
  2125 ;; Hardware stack levels used: 1
  2126 ;; Hardware stack levels required when called: 3
  2127 ;; This function calls:
  2128 ;;		___lwdiv
  2129 ;;		___lwmod
  2130 ;;		_randomNumber
  2131 ;;		_writeCharOnDisplay
  2132 ;; This function is called by:
  2133 ;;		_deviceStateMachine
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           
  2138                           ;psect for function _rollDice
  2139  02CB                     _rollDice:
  2140  02CB                     l2207:	
  2141                           ;incstack = 0
  2142                           ; Regs used in _rollDice: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2143                           
  2144                           
  2145                           ;utils.c: 357:     int i;;utils.c: 358:     unsigned int ulTotal = 0;
  2146  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  2147  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  2148  02CD  01CF               	clrf	rollDice@ulTotal
  2149  02CE  01D0               	clrf	rollDice@ulTotal+1
  2150                           
  2151                           ;utils.c: 359:     for(i = 0; i < diceState[0]; i++){
  2152  02CF  01CD               	clrf	rollDice@i
  2153  02D0  01CE               	clrf	rollDice@i+1
  2154  02D1  2AF9               	goto	l2213
  2155  02D2                     l2209:
  2156                           
  2157                           ;utils.c: 360:         ulTotal += ((unsigned int)randomNumber())%diceState[1] + 1;
  2158  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2159  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  2160  02D4  086D               	movf	_diceState+1,w
  2161  02D5  00C9               	movwf	??_rollDice
  2162  02D6  01CA               	clrf	??_rollDice+1
  2163  02D7  0849               	movf	??_rollDice,w
  2164  02D8  00BF               	movwf	___lwmod@divisor
  2165  02D9  084A               	movf	??_rollDice+1,w
  2166  02DA  00C0               	movwf	___lwmod@divisor+1
  2167  02DB  252D               	fcall	_randomNumber
  2168  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2169  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  2170  02DE  0838               	movf	?_randomNumber+1,w
  2171  02DF  00C2               	movwf	___lwmod@dividend+1
  2172  02E0  0837               	movf	?_randomNumber,w
  2173  02E1  00C1               	movwf	___lwmod@dividend
  2174  02E2  26DE               	fcall	___lwmod
  2175  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  2176  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  2177  02E5  083F               	movf	?___lwmod,w
  2178  02E6  3E01               	addlw	1
  2179  02E7  00CB               	movwf	??_rollDice+2
  2180  02E8  0840               	movf	?___lwmod+1,w
  2181  02E9  1803               	skipnc
  2182  02EA  3E01               	addlw	1
  2183  02EB  3E00               	addlw	0
  2184  02EC  00CC               	movwf	??_rollDice+3
  2185  02ED  084B               	movf	??_rollDice+2,w
  2186  02EE  07CF               	addwf	rollDice@ulTotal,f
  2187  02EF  1803               	skipnc
  2188  02F0  0AD0               	incf	rollDice@ulTotal+1,f
  2189  02F1  084C               	movf	??_rollDice+3,w
  2190  02F2  07D0               	addwf	rollDice@ulTotal+1,f
  2191  02F3                     l2211:
  2192                           
  2193                           ;utils.c: 361:     }
  2194  02F3  3001               	movlw	1
  2195  02F4  07CD               	addwf	rollDice@i,f
  2196  02F5  1803               	skipnc
  2197  02F6  0ACE               	incf	rollDice@i+1,f
  2198  02F7  3000               	movlw	0
  2199  02F8  07CE               	addwf	rollDice@i+1,f
  2200  02F9                     l2213:
  2201  02F9  084E               	movf	rollDice@i+1,w
  2202  02FA  3A80               	xorlw	128
  2203  02FB  00C9               	movwf	??_rollDice
  2204  02FC  3080               	movlw	128
  2205  02FD  0249               	subwf	??_rollDice,w
  2206  02FE  1D03               	skipz
  2207  02FF  2B02               	goto	u1835
  2208  0300  086C               	movf	_diceState,w
  2209  0301  024D               	subwf	rollDice@i,w
  2210  0302                     u1835:
  2211  0302  1C03               	skipc
  2212  0303  2B05               	goto	u1831
  2213  0304  2B06               	goto	u1830
  2214  0305                     u1831:
  2215  0305  2AD2               	goto	l2209
  2216  0306                     u1830:
  2217  0306                     l2215:
  2218                           
  2219                           ;utils.c: 363:     writeCharOnDisplay('0' + (unsigned char)(ulTotal%10) ,3);
  2220  0306  3003               	movlw	3
  2221  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2222  0308  1303               	bcf	3,6	;RP1=0, select bank0
  2223  0309  00C9               	movwf	??_rollDice
  2224  030A  0849               	movf	??_rollDice,w
  2225  030B  00C5               	movwf	writeCharOnDisplay@ucDisplay
  2226  030C  300A               	movlw	10
  2227  030D  00BF               	movwf	___lwmod@divisor
  2228  030E  3000               	movlw	0
  2229  030F  00C0               	movwf	___lwmod@divisor+1
  2230  0310  0850               	movf	rollDice@ulTotal+1,w
  2231  0311  00C2               	movwf	___lwmod@dividend+1
  2232  0312  084F               	movf	rollDice@ulTotal,w
  2233  0313  00C1               	movwf	___lwmod@dividend
  2234  0314  26DE               	fcall	___lwmod
  2235  0315  1283               	bcf	3,5	;RP0=0, select bank0
  2236  0316  1303               	bcf	3,6	;RP1=0, select bank0
  2237  0317  083F               	movf	?___lwmod,w
  2238  0318  3E30               	addlw	48
  2239  0319  2222               	fcall	_writeCharOnDisplay
  2240                           
  2241                           ;utils.c: 364:     writeCharOnDisplay('0' + (unsigned char)((ulTotal/10)%10) ,2);
  2242  031A  3002               	movlw	2
  2243  031B  1283               	bcf	3,5	;RP0=0, select bank0
  2244  031C  1303               	bcf	3,6	;RP1=0, select bank0
  2245  031D  00C9               	movwf	??_rollDice
  2246  031E  0849               	movf	??_rollDice,w
  2247  031F  00C5               	movwf	writeCharOnDisplay@ucDisplay
  2248  0320  300A               	movlw	10
  2249  0321  00BF               	movwf	___lwmod@divisor
  2250  0322  3000               	movlw	0
  2251  0323  00C0               	movwf	___lwmod@divisor+1
  2252  0324  300A               	movlw	10
  2253  0325  00A0               	movwf	___lwdiv@divisor
  2254  0326  3000               	movlw	0
  2255  0327  00A1               	movwf	___lwdiv@divisor+1
  2256  0328  0850               	movf	rollDice@ulTotal+1,w
  2257  0329  00A3               	movwf	___lwdiv@dividend+1
  2258  032A  084F               	movf	rollDice@ulTotal,w
  2259  032B  00A2               	movwf	___lwdiv@dividend
  2260  032C  2611               	fcall	___lwdiv
  2261  032D  1283               	bcf	3,5	;RP0=0, select bank0
  2262  032E  1303               	bcf	3,6	;RP1=0, select bank0
  2263  032F  0821               	movf	?___lwdiv+1,w
  2264  0330  00C2               	movwf	___lwmod@dividend+1
  2265  0331  0820               	movf	?___lwdiv,w
  2266  0332  00C1               	movwf	___lwmod@dividend
  2267  0333  26DE               	fcall	___lwmod
  2268  0334  1283               	bcf	3,5	;RP0=0, select bank0
  2269  0335  1303               	bcf	3,6	;RP1=0, select bank0
  2270  0336  083F               	movf	?___lwmod,w
  2271  0337  3E30               	addlw	48
  2272  0338  2222               	fcall	_writeCharOnDisplay
  2273                           
  2274                           ;utils.c: 365:     writeCharOnDisplay('0' + (unsigned char)((ulTotal/100)%10) ,1);
  2275  0339  1283               	bcf	3,5	;RP0=0, select bank0
  2276  033A  1303               	bcf	3,6	;RP1=0, select bank0
  2277  033B  01C5               	clrf	writeCharOnDisplay@ucDisplay
  2278  033C  0AC5               	incf	writeCharOnDisplay@ucDisplay,f
  2279  033D  300A               	movlw	10
  2280  033E  00BF               	movwf	___lwmod@divisor
  2281  033F  3000               	movlw	0
  2282  0340  00C0               	movwf	___lwmod@divisor+1
  2283  0341  3064               	movlw	100
  2284  0342  00A0               	movwf	___lwdiv@divisor
  2285  0343  3000               	movlw	0
  2286  0344  00A1               	movwf	___lwdiv@divisor+1
  2287  0345  0850               	movf	rollDice@ulTotal+1,w
  2288  0346  00A3               	movwf	___lwdiv@dividend+1
  2289  0347  084F               	movf	rollDice@ulTotal,w
  2290  0348  00A2               	movwf	___lwdiv@dividend
  2291  0349  2611               	fcall	___lwdiv
  2292  034A  1283               	bcf	3,5	;RP0=0, select bank0
  2293  034B  1303               	bcf	3,6	;RP1=0, select bank0
  2294  034C  0821               	movf	?___lwdiv+1,w
  2295  034D  00C2               	movwf	___lwmod@dividend+1
  2296  034E  0820               	movf	?___lwdiv,w
  2297  034F  00C1               	movwf	___lwmod@dividend
  2298  0350  26DE               	fcall	___lwmod
  2299  0351  1283               	bcf	3,5	;RP0=0, select bank0
  2300  0352  1303               	bcf	3,6	;RP1=0, select bank0
  2301  0353  083F               	movf	?___lwmod,w
  2302  0354  3E30               	addlw	48
  2303  0355  2222               	fcall	_writeCharOnDisplay
  2304                           
  2305                           ;utils.c: 366:     writeCharOnDisplay('0' + (unsigned char)((ulTotal/1000)%10) ,0);
  2306  0356  1283               	bcf	3,5	;RP0=0, select bank0
  2307  0357  1303               	bcf	3,6	;RP1=0, select bank0
  2308  0358  01C5               	clrf	writeCharOnDisplay@ucDisplay
  2309  0359  300A               	movlw	10
  2310  035A  00BF               	movwf	___lwmod@divisor
  2311  035B  3000               	movlw	0
  2312  035C  00C0               	movwf	___lwmod@divisor+1
  2313  035D  30E8               	movlw	232
  2314  035E  00A0               	movwf	___lwdiv@divisor
  2315  035F  3003               	movlw	3
  2316  0360  00A1               	movwf	___lwdiv@divisor+1
  2317  0361  0850               	movf	rollDice@ulTotal+1,w
  2318  0362  00A3               	movwf	___lwdiv@dividend+1
  2319  0363  084F               	movf	rollDice@ulTotal,w
  2320  0364  00A2               	movwf	___lwdiv@dividend
  2321  0365  2611               	fcall	___lwdiv
  2322  0366  1283               	bcf	3,5	;RP0=0, select bank0
  2323  0367  1303               	bcf	3,6	;RP1=0, select bank0
  2324  0368  0821               	movf	?___lwdiv+1,w
  2325  0369  00C2               	movwf	___lwmod@dividend+1
  2326  036A  0820               	movf	?___lwdiv,w
  2327  036B  00C1               	movwf	___lwmod@dividend
  2328  036C  26DE               	fcall	___lwmod
  2329  036D  1283               	bcf	3,5	;RP0=0, select bank0
  2330  036E  1303               	bcf	3,6	;RP1=0, select bank0
  2331  036F  083F               	movf	?___lwmod,w
  2332  0370  3E30               	addlw	48
  2333  0371  2222               	fcall	_writeCharOnDisplay
  2334  0372                     l231:
  2335  0372  0008               	return
  2336  0373                     __end_of_rollDice:
  2337                           
  2338                           	psect	text8
  2339  0222                     __ptext8:	
  2340 ;; *************** function _writeCharOnDisplay *****************
  2341 ;; Defined at:
  2342 ;;		line 136 in file "utils.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  ucCharacter     1    wreg     unsigned char 
  2345 ;;  ucDisplay       1   37[BANK0 ] unsigned char 
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  ucCharacter     1   40[BANK0 ] unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  1    wreg      void 
  2350 ;; Registers used:
  2351 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMMON   BANK0   BANK1
  2357 ;;      Params:         0       1       0
  2358 ;;      Locals:         0       1       0
  2359 ;;      Temps:          0       2       0
  2360 ;;      Totals:         0       4       0
  2361 ;;Total ram usage:        4 bytes
  2362 ;; Hardware stack levels used: 1
  2363 ;; Hardware stack levels required when called: 1
  2364 ;; This function calls:
  2365 ;;		Nothing
  2366 ;; This function is called by:
  2367 ;;		_deviceStateMachine
  2368 ;;		_rollDice
  2369 ;; This function uses a non-reentrant model
  2370 ;;
  2371                           
  2372                           
  2373                           ;psect for function _writeCharOnDisplay
  2374  0222                     _writeCharOnDisplay:
  2375                           
  2376                           ;incstack = 0
  2377                           ; Regs used in _writeCharOnDisplay: [wreg-fsr0h+status,2+status,0]
  2378                           ;writeCharOnDisplay@ucCharacter stored from wreg
  2379  0222  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0223  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0224  00C8               	movwf	writeCharOnDisplay@ucCharacter
  2382  0225                     l1511:
  2383                           
  2384                           ;utils.c: 141:     switch(ucCharacter){
  2385  0225  2A9F               	goto	l1537
  2386  0226                     l1513:
  2387                           
  2388                           ;utils.c: 143:             Display7seg4digitsVetor[ucDisplay].data = 0b00111111;
  2389  0226  303F               	movlw	63
  2390  0227  00C6               	movwf	??_writeCharOnDisplay
  2391  0228  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2392  0229  00C7               	movwf	??_writeCharOnDisplay+1
  2393  022A  0747               	addwf	??_writeCharOnDisplay+1,w
  2394  022B  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2395  022C  0084               	movwf	4
  2396  022D  0846               	movf	??_writeCharOnDisplay,w
  2397  022E  1383               	bcf	3,7	;select IRP bank0
  2398  022F  0080               	movwf	0
  2399                           
  2400                           ;utils.c: 144:             break;
  2401  0230  2ACA               	goto	l188
  2402  0231                     l1515:
  2403                           
  2404                           ;utils.c: 146:             Display7seg4digitsVetor[ucDisplay].data = 0b00000110;
  2405  0231  3006               	movlw	6
  2406  0232  00C6               	movwf	??_writeCharOnDisplay
  2407  0233  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2408  0234  00C7               	movwf	??_writeCharOnDisplay+1
  2409  0235  0747               	addwf	??_writeCharOnDisplay+1,w
  2410  0236  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2411  0237  0084               	movwf	4
  2412  0238  0846               	movf	??_writeCharOnDisplay,w
  2413  0239  1383               	bcf	3,7	;select IRP bank0
  2414  023A  0080               	movwf	0
  2415                           
  2416                           ;utils.c: 147:             break;
  2417  023B  2ACA               	goto	l188
  2418  023C                     l1517:
  2419                           
  2420                           ;utils.c: 149:             Display7seg4digitsVetor[ucDisplay].data = 0b01011011;
  2421  023C  305B               	movlw	91
  2422  023D  00C6               	movwf	??_writeCharOnDisplay
  2423  023E  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2424  023F  00C7               	movwf	??_writeCharOnDisplay+1
  2425  0240  0747               	addwf	??_writeCharOnDisplay+1,w
  2426  0241  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2427  0242  0084               	movwf	4
  2428  0243  0846               	movf	??_writeCharOnDisplay,w
  2429  0244  1383               	bcf	3,7	;select IRP bank0
  2430  0245  0080               	movwf	0
  2431                           
  2432                           ;utils.c: 150:             break;
  2433  0246  2ACA               	goto	l188
  2434  0247                     l1519:
  2435                           
  2436                           ;utils.c: 152:             Display7seg4digitsVetor[ucDisplay].data = 0b01001111;
  2437  0247  304F               	movlw	79
  2438  0248  00C6               	movwf	??_writeCharOnDisplay
  2439  0249  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2440  024A  00C7               	movwf	??_writeCharOnDisplay+1
  2441  024B  0747               	addwf	??_writeCharOnDisplay+1,w
  2442  024C  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2443  024D  0084               	movwf	4
  2444  024E  0846               	movf	??_writeCharOnDisplay,w
  2445  024F  1383               	bcf	3,7	;select IRP bank0
  2446  0250  0080               	movwf	0
  2447                           
  2448                           ;utils.c: 153:             break;
  2449  0251  2ACA               	goto	l188
  2450  0252                     l1521:
  2451                           
  2452                           ;utils.c: 155:             Display7seg4digitsVetor[ucDisplay].data = 0b01100110;
  2453  0252  3066               	movlw	102
  2454  0253  00C6               	movwf	??_writeCharOnDisplay
  2455  0254  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2456  0255  00C7               	movwf	??_writeCharOnDisplay+1
  2457  0256  0747               	addwf	??_writeCharOnDisplay+1,w
  2458  0257  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2459  0258  0084               	movwf	4
  2460  0259  0846               	movf	??_writeCharOnDisplay,w
  2461  025A  1383               	bcf	3,7	;select IRP bank0
  2462  025B  0080               	movwf	0
  2463                           
  2464                           ;utils.c: 156:             break;
  2465  025C  2ACA               	goto	l188
  2466  025D                     l1523:
  2467                           
  2468                           ;utils.c: 158:             Display7seg4digitsVetor[ucDisplay].data = 0b01101101;
  2469  025D  306D               	movlw	109
  2470  025E  00C6               	movwf	??_writeCharOnDisplay
  2471  025F  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2472  0260  00C7               	movwf	??_writeCharOnDisplay+1
  2473  0261  0747               	addwf	??_writeCharOnDisplay+1,w
  2474  0262  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2475  0263  0084               	movwf	4
  2476  0264  0846               	movf	??_writeCharOnDisplay,w
  2477  0265  1383               	bcf	3,7	;select IRP bank0
  2478  0266  0080               	movwf	0
  2479                           
  2480                           ;utils.c: 159:             break;
  2481  0267  2ACA               	goto	l188
  2482  0268                     l1525:
  2483                           
  2484                           ;utils.c: 161:             Display7seg4digitsVetor[ucDisplay].data = 0b01111101;
  2485  0268  307D               	movlw	125
  2486  0269  00C6               	movwf	??_writeCharOnDisplay
  2487  026A  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2488  026B  00C7               	movwf	??_writeCharOnDisplay+1
  2489  026C  0747               	addwf	??_writeCharOnDisplay+1,w
  2490  026D  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2491  026E  0084               	movwf	4
  2492  026F  0846               	movf	??_writeCharOnDisplay,w
  2493  0270  1383               	bcf	3,7	;select IRP bank0
  2494  0271  0080               	movwf	0
  2495                           
  2496                           ;utils.c: 162:             break;
  2497  0272  2ACA               	goto	l188
  2498  0273                     l1527:
  2499                           
  2500                           ;utils.c: 164:             Display7seg4digitsVetor[ucDisplay].data = 0b00000111;
  2501  0273  3007               	movlw	7
  2502  0274  00C6               	movwf	??_writeCharOnDisplay
  2503  0275  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2504  0276  00C7               	movwf	??_writeCharOnDisplay+1
  2505  0277  0747               	addwf	??_writeCharOnDisplay+1,w
  2506  0278  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2507  0279  0084               	movwf	4
  2508  027A  0846               	movf	??_writeCharOnDisplay,w
  2509  027B  1383               	bcf	3,7	;select IRP bank0
  2510  027C  0080               	movwf	0
  2511                           
  2512                           ;utils.c: 165:             break;
  2513  027D  2ACA               	goto	l188
  2514  027E                     l1529:
  2515                           
  2516                           ;utils.c: 167:             Display7seg4digitsVetor[ucDisplay].data = 0b01111111;
  2517  027E  307F               	movlw	127
  2518  027F  00C6               	movwf	??_writeCharOnDisplay
  2519  0280  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2520  0281  00C7               	movwf	??_writeCharOnDisplay+1
  2521  0282  0747               	addwf	??_writeCharOnDisplay+1,w
  2522  0283  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2523  0284  0084               	movwf	4
  2524  0285  0846               	movf	??_writeCharOnDisplay,w
  2525  0286  1383               	bcf	3,7	;select IRP bank0
  2526  0287  0080               	movwf	0
  2527                           
  2528                           ;utils.c: 168:             break;
  2529  0288  2ACA               	goto	l188
  2530  0289                     l1531:
  2531                           
  2532                           ;utils.c: 170:             Display7seg4digitsVetor[ucDisplay].data = 0b01100111;
  2533  0289  3067               	movlw	103
  2534  028A  00C6               	movwf	??_writeCharOnDisplay
  2535  028B  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2536  028C  00C7               	movwf	??_writeCharOnDisplay+1
  2537  028D  0747               	addwf	??_writeCharOnDisplay+1,w
  2538  028E  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2539  028F  0084               	movwf	4
  2540  0290  0846               	movf	??_writeCharOnDisplay,w
  2541  0291  1383               	bcf	3,7	;select IRP bank0
  2542  0292  0080               	movwf	0
  2543                           
  2544                           ;utils.c: 171:             break;
  2545  0293  2ACA               	goto	l188
  2546  0294                     l1533:
  2547                           
  2548                           ;utils.c: 173:             Display7seg4digitsVetor[ucDisplay].data = 0b01011110;
  2549  0294  305E               	movlw	94
  2550  0295  00C6               	movwf	??_writeCharOnDisplay
  2551  0296  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2552  0297  00C7               	movwf	??_writeCharOnDisplay+1
  2553  0298  0747               	addwf	??_writeCharOnDisplay+1,w
  2554  0299  3E5C               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2555  029A  0084               	movwf	4
  2556  029B  0846               	movf	??_writeCharOnDisplay,w
  2557  029C  1383               	bcf	3,7	;select IRP bank0
  2558  029D  0080               	movwf	0
  2559                           
  2560                           ;utils.c: 174:             break;
  2561  029E  2ACA               	goto	l188
  2562  029F                     l1537:
  2563  029F  0848               	movf	writeCharOnDisplay@ucCharacter,w
  2564  02A0  00C6               	movwf	??_writeCharOnDisplay
  2565  02A1  01C7               	clrf	??_writeCharOnDisplay+1
  2566                           
  2567                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2568                           ; Switch size 1, requested type "simple"
  2569                           ; Number of cases is 1, Range of values is 0 to 0
  2570                           ; switch strategies available:
  2571                           ; Name         Instructions Cycles
  2572                           ; simple_byte            4     3 (average)
  2573                           ; direct_byte            7     6 (fixed)
  2574                           ; jumptable            260     6 (fixed)
  2575                           ;	Chosen strategy is simple_byte
  2576  02A2  0847               	movf	??_writeCharOnDisplay+1,w
  2577  02A3  3A00               	xorlw	0	; case 0
  2578  02A4  1903               	skipnz
  2579  02A5  2AA7               	goto	l2685
  2580  02A6  2ACA               	goto	l188
  2581  02A7                     l2685:
  2582                           
  2583                           ; Switch size 1, requested type "simple"
  2584                           ; Number of cases is 11, Range of values is 48 to 100
  2585                           ; switch strategies available:
  2586                           ; Name         Instructions Cycles
  2587                           ; simple_byte           34    18 (average)
  2588                           ; direct_byte           62     9 (fixed)
  2589                           ; jumptable            263     9 (fixed)
  2590                           ;	Chosen strategy is simple_byte
  2591  02A7  0846               	movf	??_writeCharOnDisplay,w
  2592  02A8  3A30               	xorlw	48	; case 48
  2593  02A9  1903               	skipnz
  2594  02AA  2A26               	goto	l1513
  2595  02AB  3A01               	xorlw	1	; case 49
  2596  02AC  1903               	skipnz
  2597  02AD  2A31               	goto	l1515
  2598  02AE  3A03               	xorlw	3	; case 50
  2599  02AF  1903               	skipnz
  2600  02B0  2A3C               	goto	l1517
  2601  02B1  3A01               	xorlw	1	; case 51
  2602  02B2  1903               	skipnz
  2603  02B3  2A47               	goto	l1519
  2604  02B4  3A07               	xorlw	7	; case 52
  2605  02B5  1903               	skipnz
  2606  02B6  2A52               	goto	l1521
  2607  02B7  3A01               	xorlw	1	; case 53
  2608  02B8  1903               	skipnz
  2609  02B9  2A5D               	goto	l1523
  2610  02BA  3A03               	xorlw	3	; case 54
  2611  02BB  1903               	skipnz
  2612  02BC  2A68               	goto	l1525
  2613  02BD  3A01               	xorlw	1	; case 55
  2614  02BE  1903               	skipnz
  2615  02BF  2A73               	goto	l1527
  2616  02C0  3A0F               	xorlw	15	; case 56
  2617  02C1  1903               	skipnz
  2618  02C2  2A7E               	goto	l1529
  2619  02C3  3A01               	xorlw	1	; case 57
  2620  02C4  1903               	skipnz
  2621  02C5  2A89               	goto	l1531
  2622  02C6  3A5D               	xorlw	93	; case 100
  2623  02C7  1903               	skipnz
  2624  02C8  2A94               	goto	l1533
  2625  02C9  2ACA               	goto	l188
  2626  02CA                     l188:
  2627  02CA  0008               	return
  2628  02CB                     __end_of_writeCharOnDisplay:
  2629                           
  2630                           	psect	text9
  2631  052D                     __ptext9:	
  2632 ;; *************** function _randomNumber *****************
  2633 ;; Defined at:
  2634 ;;		line 348 in file "utils.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;		None
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;		None
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  4   23[BANK0 ] unsigned long 
  2641 ;; Registers used:
  2642 ;;		wreg, status,2, status,0, pclath, cstack
  2643 ;; Tracked objects:
  2644 ;;		On entry : 0/0
  2645 ;;		On exit  : 0/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMMON   BANK0   BANK1
  2648 ;;      Params:         0       4       0
  2649 ;;      Locals:         0       0       0
  2650 ;;      Temps:          0       4       0
  2651 ;;      Totals:         0       8       0
  2652 ;;Total ram usage:        8 bytes
  2653 ;; Hardware stack levels used: 1
  2654 ;; Hardware stack levels required when called: 2
  2655 ;; This function calls:
  2656 ;;		___llmod
  2657 ;;		___lmul
  2658 ;; This function is called by:
  2659 ;;		_main
  2660 ;;		_rollDice
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           
  2665                           ;psect for function _randomNumber
  2666  052D                     _randomNumber:
  2667  052D                     l2135:	
  2668                           ;incstack = 0
  2669                           ; Regs used in _randomNumber: [wreg+status,2+status,0+pclath+cstack]
  2670                           
  2671                           
  2672                           ;utils.c: 349:     randomSeed = (37*randomSeed + 98)%1373;
  2673  052D  3000               	movlw	0
  2674  052E  1283               	bcf	3,5	;RP0=0, select bank0
  2675  052F  1303               	bcf	3,6	;RP1=0, select bank0
  2676  0530  00B0               	movwf	___llmod@divisor+3
  2677  0531  3000               	movlw	0
  2678  0532  00AF               	movwf	___llmod@divisor+2
  2679  0533  3005               	movlw	5
  2680  0534  00AE               	movwf	___llmod@divisor+1
  2681  0535  305D               	movlw	93
  2682  0536  00AD               	movwf	___llmod@divisor
  2683  0537  3062               	movlw	98
  2684  0538  00BB               	movwf	??_randomNumber
  2685  0539  3000               	movlw	0
  2686  053A  00BC               	movwf	??_randomNumber+1
  2687  053B  3000               	movlw	0
  2688  053C  00BD               	movwf	??_randomNumber+2
  2689  053D  3000               	movlw	0
  2690  053E  00BE               	movwf	??_randomNumber+3
  2691  053F  0875               	movf	_randomSeed+3,w
  2692  0540  00A3               	movwf	___lmul@multiplier+3
  2693  0541  0874               	movf	_randomSeed+2,w
  2694  0542  00A2               	movwf	___lmul@multiplier+2
  2695  0543  0873               	movf	_randomSeed+1,w
  2696  0544  00A1               	movwf	___lmul@multiplier+1
  2697  0545  0872               	movf	_randomSeed,w
  2698  0546  00A0               	movwf	___lmul@multiplier
  2699  0547  3000               	movlw	0
  2700  0548  00A7               	movwf	___lmul@multiplicand+3
  2701  0549  3000               	movlw	0
  2702  054A  00A6               	movwf	___lmul@multiplicand+2
  2703  054B  3000               	movlw	0
  2704  054C  00A5               	movwf	___lmul@multiplicand+1
  2705  054D  3025               	movlw	37
  2706  054E  00A4               	movwf	___lmul@multiplicand
  2707  054F  25C9               	fcall	___lmul
  2708  0550  1283               	bcf	3,5	;RP0=0, select bank0
  2709  0551  1303               	bcf	3,6	;RP1=0, select bank0
  2710  0552  0820               	movf	?___lmul,w
  2711  0553  07BB               	addwf	??_randomNumber,f
  2712  0554  0821               	movf	?___lmul+1,w
  2713  0555  1803               	skipnc
  2714  0556  0F21               	incfsz	?___lmul+1,w
  2715  0557  2D59               	goto	u1690
  2716  0558  2D5A               	goto	u1691
  2717  0559                     u1690:
  2718  0559  07BC               	addwf	??_randomNumber+1,f
  2719  055A                     u1691:
  2720  055A  0822               	movf	?___lmul+2,w
  2721  055B  1803               	skipnc
  2722  055C  0F22               	incfsz	?___lmul+2,w
  2723  055D  2D5F               	goto	u1692
  2724  055E  2D60               	goto	u1693
  2725  055F                     u1692:
  2726  055F  07BD               	addwf	??_randomNumber+2,f
  2727  0560                     u1693:
  2728  0560  0823               	movf	?___lmul+3,w
  2729  0561  1803               	skipnc
  2730  0562  0A23               	incf	?___lmul+3,w
  2731  0563  07BE               	addwf	??_randomNumber+3,f
  2732  0564  083E               	movf	??_randomNumber+3,w
  2733  0565  00B4               	movwf	___llmod@dividend+3
  2734  0566  083D               	movf	??_randomNumber+2,w
  2735  0567  00B3               	movwf	___llmod@dividend+2
  2736  0568  083C               	movf	??_randomNumber+1,w
  2737  0569  00B2               	movwf	___llmod@dividend+1
  2738  056A  083B               	movf	??_randomNumber,w
  2739  056B  00B1               	movwf	___llmod@dividend
  2740  056C  24D7               	fcall	___llmod
  2741  056D  1283               	bcf	3,5	;RP0=0, select bank0
  2742  056E  1303               	bcf	3,6	;RP1=0, select bank0
  2743  056F  0830               	movf	?___llmod+3,w
  2744  0570  00F5               	movwf	_randomSeed+3
  2745  0571  082F               	movf	?___llmod+2,w
  2746  0572  00F4               	movwf	_randomSeed+2
  2747  0573  082E               	movf	?___llmod+1,w
  2748  0574  00F3               	movwf	_randomSeed+1
  2749  0575  082D               	movf	?___llmod,w
  2750  0576  00F2               	movwf	_randomSeed
  2751  0577                     l2137:
  2752                           
  2753                           ;utils.c: 350:     return randomSeed;
  2754  0577  0875               	movf	_randomSeed+3,w
  2755  0578  00BA               	movwf	?_randomNumber+3
  2756  0579  0874               	movf	_randomSeed+2,w
  2757  057A  00B9               	movwf	?_randomNumber+2
  2758  057B  0873               	movf	_randomSeed+1,w
  2759  057C  00B8               	movwf	?_randomNumber+1
  2760  057D  0872               	movf	_randomSeed,w
  2761  057E  00B7               	movwf	?_randomNumber
  2762  057F                     l225:
  2763  057F  0008               	return
  2764  0580                     __end_of_randomNumber:
  2765                           
  2766                           	psect	text10
  2767  05C9                     __ptext10:	
  2768 ;; *************** function ___lmul *****************
  2769 ;; Defined at:
  2770 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul32.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2773 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;  product         4    9[BANK0 ] unsigned long 
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  4    0[BANK0 ] unsigned long 
  2778 ;; Registers used:
  2779 ;;		wreg, status,2, status,0
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMMON   BANK0   BANK1
  2785 ;;      Params:         0       8       0
  2786 ;;      Locals:         0       4       0
  2787 ;;      Temps:          0       1       0
  2788 ;;      Totals:         0      13       0
  2789 ;;Total ram usage:       13 bytes
  2790 ;; Hardware stack levels used: 1
  2791 ;; Hardware stack levels required when called: 1
  2792 ;; This function calls:
  2793 ;;		Nothing
  2794 ;; This function is called by:
  2795 ;;		_randomNumber
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           
  2800                           ;psect for function ___lmul
  2801  05C9                     ___lmul:
  2802  05C9                     l2101:	
  2803                           ;incstack = 0
  2804                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2805                           
  2806  05C9  3000               	movlw	0
  2807  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  2808  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  2809  05CC  00AC               	movwf	___lmul@product+3
  2810  05CD  3000               	movlw	0
  2811  05CE  00AB               	movwf	___lmul@product+2
  2812  05CF  3000               	movlw	0
  2813  05D0  00AA               	movwf	___lmul@product+1
  2814  05D1  3000               	movlw	0
  2815  05D2  00A9               	movwf	___lmul@product
  2816  05D3                     l2103:
  2817  05D3  1C20               	btfss	___lmul@multiplier,0
  2818  05D4  2DD6               	goto	u1581
  2819  05D5  2DD7               	goto	u1580
  2820  05D6                     u1581:
  2821  05D6  2DEE               	goto	l2107
  2822  05D7                     u1580:
  2823  05D7                     l2105:
  2824  05D7  0824               	movf	___lmul@multiplicand,w
  2825  05D8  07A9               	addwf	___lmul@product,f
  2826  05D9  0825               	movf	___lmul@multiplicand+1,w
  2827  05DA  1103               	clrz
  2828  05DB  1803               	skipnc
  2829  05DC  3E01               	addlw	1
  2830  05DD  1903               	skipnz
  2831  05DE  2DE0               	goto	u1591
  2832  05DF  07AA               	addwf	___lmul@product+1,f
  2833  05E0                     u1591:
  2834  05E0  0826               	movf	___lmul@multiplicand+2,w
  2835  05E1  1103               	clrz
  2836  05E2  1803               	skipnc
  2837  05E3  3E01               	addlw	1
  2838  05E4  1903               	skipnz
  2839  05E5  2DE7               	goto	u1592
  2840  05E6  07AB               	addwf	___lmul@product+2,f
  2841  05E7                     u1592:
  2842  05E7  0827               	movf	___lmul@multiplicand+3,w
  2843  05E8  1103               	clrz
  2844  05E9  1803               	skipnc
  2845  05EA  3E01               	addlw	1
  2846  05EB  1903               	skipnz
  2847  05EC  2DEE               	goto	u1593
  2848  05ED  07AC               	addwf	___lmul@product+3,f
  2849  05EE                     u1593:
  2850  05EE                     l2107:
  2851  05EE  3001               	movlw	1
  2852  05EF  00A8               	movwf	??___lmul
  2853  05F0                     u1605:
  2854  05F0  1003               	clrc
  2855  05F1  0DA4               	rlf	___lmul@multiplicand,f
  2856  05F2  0DA5               	rlf	___lmul@multiplicand+1,f
  2857  05F3  0DA6               	rlf	___lmul@multiplicand+2,f
  2858  05F4  0DA7               	rlf	___lmul@multiplicand+3,f
  2859  05F5  0BA8               	decfsz	??___lmul,f
  2860  05F6  2DF0               	goto	u1605
  2861  05F7                     l2109:
  2862  05F7  3001               	movlw	1
  2863  05F8                     u1615:
  2864  05F8  1003               	clrc
  2865  05F9  0CA3               	rrf	___lmul@multiplier+3,f
  2866  05FA  0CA2               	rrf	___lmul@multiplier+2,f
  2867  05FB  0CA1               	rrf	___lmul@multiplier+1,f
  2868  05FC  0CA0               	rrf	___lmul@multiplier,f
  2869  05FD  3EFF               	addlw	-1
  2870  05FE  1D03               	skipz
  2871  05FF  2DF8               	goto	u1615
  2872  0600  0823               	movf	___lmul@multiplier+3,w
  2873  0601  0422               	iorwf	___lmul@multiplier+2,w
  2874  0602  0421               	iorwf	___lmul@multiplier+1,w
  2875  0603  0420               	iorwf	___lmul@multiplier,w
  2876  0604  1D03               	skipz
  2877  0605  2E07               	goto	u1621
  2878  0606  2E08               	goto	u1620
  2879  0607                     u1621:
  2880  0607  2DD3               	goto	l2103
  2881  0608                     u1620:
  2882  0608                     l2111:
  2883  0608  082C               	movf	___lmul@product+3,w
  2884  0609  00A3               	movwf	?___lmul+3
  2885  060A  082B               	movf	___lmul@product+2,w
  2886  060B  00A2               	movwf	?___lmul+2
  2887  060C  082A               	movf	___lmul@product+1,w
  2888  060D  00A1               	movwf	?___lmul+1
  2889  060E  0829               	movf	___lmul@product,w
  2890  060F  00A0               	movwf	?___lmul
  2891  0610                     l331:
  2892  0610  0008               	return
  2893  0611                     __end_of___lmul:
  2894                           
  2895                           	psect	text11
  2896  04D7                     __ptext11:	
  2897 ;; *************** function ___llmod *****************
  2898 ;; Defined at:
  2899 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\llmod.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;  divisor         4   13[BANK0 ] unsigned long 
  2902 ;;  dividend        4   17[BANK0 ] unsigned long 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  counter         1   22[BANK0 ] unsigned char 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  4   13[BANK0 ] unsigned long 
  2907 ;; Registers used:
  2908 ;;		wreg, status,2, status,0
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMMON   BANK0   BANK1
  2914 ;;      Params:         0       8       0
  2915 ;;      Locals:         0       1       0
  2916 ;;      Temps:          0       1       0
  2917 ;;      Totals:         0      10       0
  2918 ;;Total ram usage:       10 bytes
  2919 ;; Hardware stack levels used: 1
  2920 ;; Hardware stack levels required when called: 1
  2921 ;; This function calls:
  2922 ;;		Nothing
  2923 ;; This function is called by:
  2924 ;;		_main
  2925 ;;		_randomNumber
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           
  2930                           ;psect for function ___llmod
  2931  04D7                     ___llmod:
  2932  04D7                     l2115:	
  2933                           ;incstack = 0
  2934                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  2935                           
  2936  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2937  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2938  04D9  0830               	movf	___llmod@divisor+3,w
  2939  04DA  042F               	iorwf	___llmod@divisor+2,w
  2940  04DB  042E               	iorwf	___llmod@divisor+1,w
  2941  04DC  042D               	iorwf	___llmod@divisor,w
  2942  04DD  1903               	skipnz
  2943  04DE  2CE0               	goto	u1631
  2944  04DF  2CE1               	goto	u1630
  2945  04E0                     u1631:
  2946  04E0  2D24               	goto	l2131
  2947  04E1                     u1630:
  2948  04E1                     l2117:
  2949  04E1  01B6               	clrf	___llmod@counter
  2950  04E2  0AB6               	incf	___llmod@counter,f
  2951  04E3  2CF1               	goto	l2121
  2952  04E4                     l2119:
  2953  04E4  3001               	movlw	1
  2954  04E5  00B5               	movwf	??___llmod
  2955  04E6                     u1645:
  2956  04E6  1003               	clrc
  2957  04E7  0DAD               	rlf	___llmod@divisor,f
  2958  04E8  0DAE               	rlf	___llmod@divisor+1,f
  2959  04E9  0DAF               	rlf	___llmod@divisor+2,f
  2960  04EA  0DB0               	rlf	___llmod@divisor+3,f
  2961  04EB  0BB5               	decfsz	??___llmod,f
  2962  04EC  2CE6               	goto	u1645
  2963  04ED  3001               	movlw	1
  2964  04EE  00B5               	movwf	??___llmod
  2965  04EF  0835               	movf	??___llmod,w
  2966  04F0  07B6               	addwf	___llmod@counter,f
  2967  04F1                     l2121:
  2968  04F1  1FB0               	btfss	___llmod@divisor+3,7
  2969  04F2  2CF4               	goto	u1651
  2970  04F3  2CF5               	goto	u1650
  2971  04F4                     u1651:
  2972  04F4  2CE4               	goto	l2119
  2973  04F5                     u1650:
  2974  04F5                     l2123:
  2975  04F5  0830               	movf	___llmod@divisor+3,w
  2976  04F6  0234               	subwf	___llmod@dividend+3,w
  2977  04F7  1D03               	skipz
  2978  04F8  2D03               	goto	u1665
  2979  04F9  082F               	movf	___llmod@divisor+2,w
  2980  04FA  0233               	subwf	___llmod@dividend+2,w
  2981  04FB  1D03               	skipz
  2982  04FC  2D03               	goto	u1665
  2983  04FD  082E               	movf	___llmod@divisor+1,w
  2984  04FE  0232               	subwf	___llmod@dividend+1,w
  2985  04FF  1D03               	skipz
  2986  0500  2D03               	goto	u1665
  2987  0501  082D               	movf	___llmod@divisor,w
  2988  0502  0231               	subwf	___llmod@dividend,w
  2989  0503                     u1665:
  2990  0503  1C03               	skipc
  2991  0504  2D06               	goto	u1661
  2992  0505  2D07               	goto	u1660
  2993  0506                     u1661:
  2994  0506  2D15               	goto	l2127
  2995  0507                     u1660:
  2996  0507                     l2125:
  2997  0507  082D               	movf	___llmod@divisor,w
  2998  0508  02B1               	subwf	___llmod@dividend,f
  2999  0509  082E               	movf	___llmod@divisor+1,w
  3000  050A  1C03               	skipc
  3001  050B  0F2E               	incfsz	___llmod@divisor+1,w
  3002  050C  02B2               	subwf	___llmod@dividend+1,f
  3003  050D  082F               	movf	___llmod@divisor+2,w
  3004  050E  1C03               	skipc
  3005  050F  0F2F               	incfsz	___llmod@divisor+2,w
  3006  0510  02B3               	subwf	___llmod@dividend+2,f
  3007  0511  0830               	movf	___llmod@divisor+3,w
  3008  0512  1C03               	skipc
  3009  0513  0F30               	incfsz	___llmod@divisor+3,w
  3010  0514  02B4               	subwf	___llmod@dividend+3,f
  3011  0515                     l2127:
  3012  0515  3001               	movlw	1
  3013  0516                     u1675:
  3014  0516  1003               	clrc
  3015  0517  0CB0               	rrf	___llmod@divisor+3,f
  3016  0518  0CAF               	rrf	___llmod@divisor+2,f
  3017  0519  0CAE               	rrf	___llmod@divisor+1,f
  3018  051A  0CAD               	rrf	___llmod@divisor,f
  3019  051B  3EFF               	addlw	-1
  3020  051C  1D03               	skipz
  3021  051D  2D16               	goto	u1675
  3022  051E                     l2129:
  3023  051E  3001               	movlw	1
  3024  051F  02B6               	subwf	___llmod@counter,f
  3025  0520  1D03               	btfss	3,2
  3026  0521  2D23               	goto	u1681
  3027  0522  2D24               	goto	u1680
  3028  0523                     u1681:
  3029  0523  2CF5               	goto	l2123
  3030  0524                     u1680:
  3031  0524                     l2131:
  3032  0524  0834               	movf	___llmod@dividend+3,w
  3033  0525  00B0               	movwf	?___llmod+3
  3034  0526  0833               	movf	___llmod@dividend+2,w
  3035  0527  00AF               	movwf	?___llmod+2
  3036  0528  0832               	movf	___llmod@dividend+1,w
  3037  0529  00AE               	movwf	?___llmod+1
  3038  052A  0831               	movf	___llmod@dividend,w
  3039  052B  00AD               	movwf	?___llmod
  3040  052C                     l539:
  3041  052C  0008               	return
  3042  052D                     __end_of___llmod:
  3043                           
  3044                           	psect	text12
  3045  06DE                     __ptext12:	
  3046 ;; *************** function ___lwmod *****************
  3047 ;; Defined at:
  3048 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;  divisor         2   31[BANK0 ] unsigned int 
  3051 ;;  dividend        2   33[BANK0 ] unsigned int 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  counter         1   36[BANK0 ] unsigned char 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  2   31[BANK0 ] unsigned int 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2, status,0
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMMON   BANK0   BANK1
  3063 ;;      Params:         0       4       0
  3064 ;;      Locals:         0       1       0
  3065 ;;      Temps:          0       1       0
  3066 ;;      Totals:         0       6       0
  3067 ;;Total ram usage:        6 bytes
  3068 ;; Hardware stack levels used: 1
  3069 ;; Hardware stack levels required when called: 1
  3070 ;; This function calls:
  3071 ;;		Nothing
  3072 ;; This function is called by:
  3073 ;;		_rollDice
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           
  3078                           ;psect for function ___lwmod
  3079  06DE                     ___lwmod:
  3080  06DE                     l1571:	
  3081                           ;incstack = 0
  3082                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3083                           
  3084  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  3085  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  3086  06E0  083F               	movf	___lwmod@divisor,w
  3087  06E1  0440               	iorwf	___lwmod@divisor+1,w
  3088  06E2  1903               	btfsc	3,2
  3089  06E3  2EE5               	goto	u1001
  3090  06E4  2EE6               	goto	u1000
  3091  06E5                     u1001:
  3092  06E5  2F15               	goto	l1589
  3093  06E6                     u1000:
  3094  06E6                     l1573:
  3095  06E6  01C4               	clrf	___lwmod@counter
  3096  06E7  0AC4               	incf	___lwmod@counter,f
  3097  06E8  2EF4               	goto	l1579
  3098  06E9                     l1575:
  3099  06E9  3001               	movlw	1
  3100  06EA                     u1015:
  3101  06EA  1003               	clrc
  3102  06EB  0DBF               	rlf	___lwmod@divisor,f
  3103  06EC  0DC0               	rlf	___lwmod@divisor+1,f
  3104  06ED  3EFF               	addlw	-1
  3105  06EE  1D03               	skipz
  3106  06EF  2EEA               	goto	u1015
  3107  06F0                     l1577:
  3108  06F0  3001               	movlw	1
  3109  06F1  00C3               	movwf	??___lwmod
  3110  06F2  0843               	movf	??___lwmod,w
  3111  06F3  07C4               	addwf	___lwmod@counter,f
  3112  06F4                     l1579:
  3113  06F4  1FC0               	btfss	___lwmod@divisor+1,7
  3114  06F5  2EF7               	goto	u1021
  3115  06F6  2EF8               	goto	u1020
  3116  06F7                     u1021:
  3117  06F7  2EE9               	goto	l1575
  3118  06F8                     u1020:
  3119  06F8                     l1581:
  3120  06F8  0840               	movf	___lwmod@divisor+1,w
  3121  06F9  0242               	subwf	___lwmod@dividend+1,w
  3122  06FA  1D03               	skipz
  3123  06FB  2EFE               	goto	u1035
  3124  06FC  083F               	movf	___lwmod@divisor,w
  3125  06FD  0241               	subwf	___lwmod@dividend,w
  3126  06FE                     u1035:
  3127  06FE  1C03               	skipc
  3128  06FF  2F01               	goto	u1031
  3129  0700  2F02               	goto	u1030
  3130  0701                     u1031:
  3131  0701  2F08               	goto	l1585
  3132  0702                     u1030:
  3133  0702                     l1583:
  3134  0702  083F               	movf	___lwmod@divisor,w
  3135  0703  02C1               	subwf	___lwmod@dividend,f
  3136  0704  0840               	movf	___lwmod@divisor+1,w
  3137  0705  1C03               	skipc
  3138  0706  03C2               	decf	___lwmod@dividend+1,f
  3139  0707  02C2               	subwf	___lwmod@dividend+1,f
  3140  0708                     l1585:
  3141  0708  3001               	movlw	1
  3142  0709                     u1045:
  3143  0709  1003               	clrc
  3144  070A  0CC0               	rrf	___lwmod@divisor+1,f
  3145  070B  0CBF               	rrf	___lwmod@divisor,f
  3146  070C  3EFF               	addlw	-1
  3147  070D  1D03               	skipz
  3148  070E  2F09               	goto	u1045
  3149  070F                     l1587:
  3150  070F  3001               	movlw	1
  3151  0710  02C4               	subwf	___lwmod@counter,f
  3152  0711  1D03               	btfss	3,2
  3153  0712  2F14               	goto	u1051
  3154  0713  2F15               	goto	u1050
  3155  0714                     u1051:
  3156  0714  2EF8               	goto	l1581
  3157  0715                     u1050:
  3158  0715                     l1589:
  3159  0715  0842               	movf	___lwmod@dividend+1,w
  3160  0716  00C0               	movwf	?___lwmod+1
  3161  0717  0841               	movf	___lwmod@dividend,w
  3162  0718  00BF               	movwf	?___lwmod
  3163  0719                     l599:
  3164  0719  0008               	return
  3165  071A                     __end_of___lwmod:
  3166                           
  3167                           	psect	text13
  3168  0611                     __ptext13:	
  3169 ;; *************** function ___lwdiv *****************
  3170 ;; Defined at:
  3171 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  divisor         2    0[BANK0 ] unsigned int 
  3174 ;;  dividend        2    2[BANK0 ] unsigned int 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  quotient        2    6[BANK0 ] unsigned int 
  3177 ;;  counter         1    5[BANK0 ] unsigned char 
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  2    0[BANK0 ] unsigned int 
  3180 ;; Registers used:
  3181 ;;		wreg, status,2, status,0
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMMON   BANK0   BANK1
  3187 ;;      Params:         0       4       0
  3188 ;;      Locals:         0       3       0
  3189 ;;      Temps:          0       1       0
  3190 ;;      Totals:         0       8       0
  3191 ;;Total ram usage:        8 bytes
  3192 ;; Hardware stack levels used: 1
  3193 ;; Hardware stack levels required when called: 1
  3194 ;; This function calls:
  3195 ;;		Nothing
  3196 ;; This function is called by:
  3197 ;;		_rollDice
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           
  3202                           ;psect for function ___lwdiv
  3203  0611                     ___lwdiv:
  3204  0611                     l2141:	
  3205                           ;incstack = 0
  3206                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3207                           
  3208  0611  1283               	bcf	3,5	;RP0=0, select bank0
  3209  0612  1303               	bcf	3,6	;RP1=0, select bank0
  3210  0613  01A6               	clrf	___lwdiv@quotient
  3211  0614  01A7               	clrf	___lwdiv@quotient+1
  3212  0615                     l2143:
  3213  0615  0820               	movf	___lwdiv@divisor,w
  3214  0616  0421               	iorwf	___lwdiv@divisor+1,w
  3215  0617  1903               	btfsc	3,2
  3216  0618  2E1A               	goto	u1701
  3217  0619  2E1B               	goto	u1700
  3218  061A                     u1701:
  3219  061A  2E52               	goto	l2163
  3220  061B                     u1700:
  3221  061B                     l2145:
  3222  061B  01A5               	clrf	___lwdiv@counter
  3223  061C  0AA5               	incf	___lwdiv@counter,f
  3224  061D  2E29               	goto	l2151
  3225  061E                     l2147:
  3226  061E  3001               	movlw	1
  3227  061F                     u1715:
  3228  061F  1003               	clrc
  3229  0620  0DA0               	rlf	___lwdiv@divisor,f
  3230  0621  0DA1               	rlf	___lwdiv@divisor+1,f
  3231  0622  3EFF               	addlw	-1
  3232  0623  1D03               	skipz
  3233  0624  2E1F               	goto	u1715
  3234  0625                     l2149:
  3235  0625  3001               	movlw	1
  3236  0626  00A4               	movwf	??___lwdiv
  3237  0627  0824               	movf	??___lwdiv,w
  3238  0628  07A5               	addwf	___lwdiv@counter,f
  3239  0629                     l2151:
  3240  0629  1FA1               	btfss	___lwdiv@divisor+1,7
  3241  062A  2E2C               	goto	u1721
  3242  062B  2E2D               	goto	u1720
  3243  062C                     u1721:
  3244  062C  2E1E               	goto	l2147
  3245  062D                     u1720:
  3246  062D                     l2153:
  3247  062D  3001               	movlw	1
  3248  062E                     u1735:
  3249  062E  1003               	clrc
  3250  062F  0DA6               	rlf	___lwdiv@quotient,f
  3251  0630  0DA7               	rlf	___lwdiv@quotient+1,f
  3252  0631  3EFF               	addlw	-1
  3253  0632  1D03               	skipz
  3254  0633  2E2E               	goto	u1735
  3255  0634  0821               	movf	___lwdiv@divisor+1,w
  3256  0635  0223               	subwf	___lwdiv@dividend+1,w
  3257  0636  1D03               	skipz
  3258  0637  2E3A               	goto	u1745
  3259  0638  0820               	movf	___lwdiv@divisor,w
  3260  0639  0222               	subwf	___lwdiv@dividend,w
  3261  063A                     u1745:
  3262  063A  1C03               	skipc
  3263  063B  2E3D               	goto	u1741
  3264  063C  2E3E               	goto	u1740
  3265  063D                     u1741:
  3266  063D  2E45               	goto	l2159
  3267  063E                     u1740:
  3268  063E                     l2155:
  3269  063E  0820               	movf	___lwdiv@divisor,w
  3270  063F  02A2               	subwf	___lwdiv@dividend,f
  3271  0640  0821               	movf	___lwdiv@divisor+1,w
  3272  0641  1C03               	skipc
  3273  0642  03A3               	decf	___lwdiv@dividend+1,f
  3274  0643  02A3               	subwf	___lwdiv@dividend+1,f
  3275  0644                     l2157:
  3276  0644  1426               	bsf	___lwdiv@quotient,0
  3277  0645                     l2159:
  3278  0645  3001               	movlw	1
  3279  0646                     u1755:
  3280  0646  1003               	clrc
  3281  0647  0CA1               	rrf	___lwdiv@divisor+1,f
  3282  0648  0CA0               	rrf	___lwdiv@divisor,f
  3283  0649  3EFF               	addlw	-1
  3284  064A  1D03               	skipz
  3285  064B  2E46               	goto	u1755
  3286  064C                     l2161:
  3287  064C  3001               	movlw	1
  3288  064D  02A5               	subwf	___lwdiv@counter,f
  3289  064E  1D03               	btfss	3,2
  3290  064F  2E51               	goto	u1761
  3291  0650  2E52               	goto	u1760
  3292  0651                     u1761:
  3293  0651  2E2D               	goto	l2153
  3294  0652                     u1760:
  3295  0652                     l2163:
  3296  0652  0827               	movf	___lwdiv@quotient+1,w
  3297  0653  00A1               	movwf	?___lwdiv+1
  3298  0654  0826               	movf	___lwdiv@quotient,w
  3299  0655  00A0               	movwf	?___lwdiv
  3300  0656                     l589:
  3301  0656  0008               	return
  3302  0657                     __end_of___lwdiv:
  3303                           
  3304                           	psect	text14
  3305  047C                     __ptext14:	
  3306 ;; *************** function ___awmod *****************
  3307 ;; Defined at:
  3308 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;  divisor         2    0[BANK0 ] int 
  3311 ;;  dividend        2    2[BANK0 ] int 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  sign            1    6[BANK0 ] unsigned char 
  3314 ;;  counter         1    5[BANK0 ] unsigned char 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  2    0[BANK0 ] int 
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMMON   BANK0   BANK1
  3324 ;;      Params:         0       4       0
  3325 ;;      Locals:         0       2       0
  3326 ;;      Temps:          0       1       0
  3327 ;;      Totals:         0       7       0
  3328 ;;Total ram usage:        7 bytes
  3329 ;; Hardware stack levels used: 1
  3330 ;; Hardware stack levels required when called: 1
  3331 ;; This function calls:
  3332 ;;		Nothing
  3333 ;; This function is called by:
  3334 ;;		_deviceStateMachine
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           
  3339                           ;psect for function ___awmod
  3340  047C                     ___awmod:
  3341  047C                     l2261:	
  3342                           ;incstack = 0
  3343                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3344                           
  3345  047C  1283               	bcf	3,5	;RP0=0, select bank0
  3346  047D  1303               	bcf	3,6	;RP1=0, select bank0
  3347  047E  01A6               	clrf	___awmod@sign
  3348  047F                     l2263:
  3349  047F  1FA3               	btfss	___awmod@dividend+1,7
  3350  0480  2C82               	goto	u1941
  3351  0481  2C83               	goto	u1940
  3352  0482                     u1941:
  3353  0482  2C8A               	goto	l2269
  3354  0483                     u1940:
  3355  0483                     l2265:
  3356  0483  09A2               	comf	___awmod@dividend,f
  3357  0484  09A3               	comf	___awmod@dividend+1,f
  3358  0485  0AA2               	incf	___awmod@dividend,f
  3359  0486  1903               	skipnz
  3360  0487  0AA3               	incf	___awmod@dividend+1,f
  3361  0488                     l2267:
  3362  0488  01A6               	clrf	___awmod@sign
  3363  0489  0AA6               	incf	___awmod@sign,f
  3364  048A                     l2269:
  3365  048A  1FA1               	btfss	___awmod@divisor+1,7
  3366  048B  2C8D               	goto	u1951
  3367  048C  2C8E               	goto	u1950
  3368  048D                     u1951:
  3369  048D  2C93               	goto	l2273
  3370  048E                     u1950:
  3371  048E                     l2271:
  3372  048E  09A0               	comf	___awmod@divisor,f
  3373  048F  09A1               	comf	___awmod@divisor+1,f
  3374  0490  0AA0               	incf	___awmod@divisor,f
  3375  0491  1903               	skipnz
  3376  0492  0AA1               	incf	___awmod@divisor+1,f
  3377  0493                     l2273:
  3378  0493  0820               	movf	___awmod@divisor,w
  3379  0494  0421               	iorwf	___awmod@divisor+1,w
  3380  0495  1903               	btfsc	3,2
  3381  0496  2C98               	goto	u1961
  3382  0497  2C99               	goto	u1960
  3383  0498                     u1961:
  3384  0498  2CC8               	goto	l2291
  3385  0499                     u1960:
  3386  0499                     l2275:
  3387  0499  01A5               	clrf	___awmod@counter
  3388  049A  0AA5               	incf	___awmod@counter,f
  3389  049B  2CA7               	goto	l2281
  3390  049C                     l2277:
  3391  049C  3001               	movlw	1
  3392  049D                     u1975:
  3393  049D  1003               	clrc
  3394  049E  0DA0               	rlf	___awmod@divisor,f
  3395  049F  0DA1               	rlf	___awmod@divisor+1,f
  3396  04A0  3EFF               	addlw	-1
  3397  04A1  1D03               	skipz
  3398  04A2  2C9D               	goto	u1975
  3399  04A3                     l2279:
  3400  04A3  3001               	movlw	1
  3401  04A4  00A4               	movwf	??___awmod
  3402  04A5  0824               	movf	??___awmod,w
  3403  04A6  07A5               	addwf	___awmod@counter,f
  3404  04A7                     l2281:
  3405  04A7  1FA1               	btfss	___awmod@divisor+1,7
  3406  04A8  2CAA               	goto	u1981
  3407  04A9  2CAB               	goto	u1980
  3408  04AA                     u1981:
  3409  04AA  2C9C               	goto	l2277
  3410  04AB                     u1980:
  3411  04AB                     l2283:
  3412  04AB  0821               	movf	___awmod@divisor+1,w
  3413  04AC  0223               	subwf	___awmod@dividend+1,w
  3414  04AD  1D03               	skipz
  3415  04AE  2CB1               	goto	u1995
  3416  04AF  0820               	movf	___awmod@divisor,w
  3417  04B0  0222               	subwf	___awmod@dividend,w
  3418  04B1                     u1995:
  3419  04B1  1C03               	skipc
  3420  04B2  2CB4               	goto	u1991
  3421  04B3  2CB5               	goto	u1990
  3422  04B4                     u1991:
  3423  04B4  2CBB               	goto	l2287
  3424  04B5                     u1990:
  3425  04B5                     l2285:
  3426  04B5  0820               	movf	___awmod@divisor,w
  3427  04B6  02A2               	subwf	___awmod@dividend,f
  3428  04B7  0821               	movf	___awmod@divisor+1,w
  3429  04B8  1C03               	skipc
  3430  04B9  03A3               	decf	___awmod@dividend+1,f
  3431  04BA  02A3               	subwf	___awmod@dividend+1,f
  3432  04BB                     l2287:
  3433  04BB  3001               	movlw	1
  3434  04BC                     u2005:
  3435  04BC  1003               	clrc
  3436  04BD  0CA1               	rrf	___awmod@divisor+1,f
  3437  04BE  0CA0               	rrf	___awmod@divisor,f
  3438  04BF  3EFF               	addlw	-1
  3439  04C0  1D03               	skipz
  3440  04C1  2CBC               	goto	u2005
  3441  04C2                     l2289:
  3442  04C2  3001               	movlw	1
  3443  04C3  02A5               	subwf	___awmod@counter,f
  3444  04C4  1D03               	btfss	3,2
  3445  04C5  2CC7               	goto	u2011
  3446  04C6  2CC8               	goto	u2010
  3447  04C7                     u2011:
  3448  04C7  2CAB               	goto	l2283
  3449  04C8                     u2010:
  3450  04C8                     l2291:
  3451  04C8  0826               	movf	___awmod@sign,w
  3452  04C9  1903               	btfsc	3,2
  3453  04CA  2CCC               	goto	u2021
  3454  04CB  2CCD               	goto	u2020
  3455  04CC                     u2021:
  3456  04CC  2CD2               	goto	l2295
  3457  04CD                     u2020:
  3458  04CD                     l2293:
  3459  04CD  09A2               	comf	___awmod@dividend,f
  3460  04CE  09A3               	comf	___awmod@dividend+1,f
  3461  04CF  0AA2               	incf	___awmod@dividend,f
  3462  04D0  1903               	skipnz
  3463  04D1  0AA3               	incf	___awmod@dividend+1,f
  3464  04D2                     l2295:
  3465  04D2  0823               	movf	___awmod@dividend+1,w
  3466  04D3  00A1               	movwf	?___awmod+1
  3467  04D4  0822               	movf	___awmod@dividend,w
  3468  04D5  00A0               	movwf	?___awmod
  3469  04D6                     l483:
  3470  04D6  0008               	return
  3471  04D7                     __end_of___awmod:
  3472                           
  3473                           	psect	text15
  3474  0413                     __ptext15:	
  3475 ;; *************** function ___awdiv *****************
  3476 ;; Defined at:
  3477 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;  divisor         2    0[BANK0 ] int 
  3480 ;;  dividend        2    2[BANK0 ] int 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  quotient        2    7[BANK0 ] int 
  3483 ;;  sign            1    6[BANK0 ] unsigned char 
  3484 ;;  counter         1    5[BANK0 ] unsigned char 
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  2    0[BANK0 ] int 
  3487 ;; Registers used:
  3488 ;;		wreg, status,2, status,0
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMMON   BANK0   BANK1
  3494 ;;      Params:         0       4       0
  3495 ;;      Locals:         0       4       0
  3496 ;;      Temps:          0       1       0
  3497 ;;      Totals:         0       9       0
  3498 ;;Total ram usage:        9 bytes
  3499 ;; Hardware stack levels used: 1
  3500 ;; Hardware stack levels required when called: 1
  3501 ;; This function calls:
  3502 ;;		Nothing
  3503 ;; This function is called by:
  3504 ;;		_deviceStateMachine
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           
  3509                           ;psect for function ___awdiv
  3510  0413                     ___awdiv:
  3511  0413                     l2217:	
  3512                           ;incstack = 0
  3513                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3514                           
  3515  0413  1283               	bcf	3,5	;RP0=0, select bank0
  3516  0414  1303               	bcf	3,6	;RP1=0, select bank0
  3517  0415  01A6               	clrf	___awdiv@sign
  3518  0416                     l2219:
  3519  0416  1FA1               	btfss	___awdiv@divisor+1,7
  3520  0417  2C19               	goto	u1841
  3521  0418  2C1A               	goto	u1840
  3522  0419                     u1841:
  3523  0419  2C21               	goto	l2225
  3524  041A                     u1840:
  3525  041A                     l2221:
  3526  041A  09A0               	comf	___awdiv@divisor,f
  3527  041B  09A1               	comf	___awdiv@divisor+1,f
  3528  041C  0AA0               	incf	___awdiv@divisor,f
  3529  041D  1903               	skipnz
  3530  041E  0AA1               	incf	___awdiv@divisor+1,f
  3531  041F                     l2223:
  3532  041F  01A6               	clrf	___awdiv@sign
  3533  0420  0AA6               	incf	___awdiv@sign,f
  3534  0421                     l2225:
  3535  0421  1FA3               	btfss	___awdiv@dividend+1,7
  3536  0422  2C24               	goto	u1851
  3537  0423  2C25               	goto	u1850
  3538  0424                     u1851:
  3539  0424  2C2E               	goto	l2231
  3540  0425                     u1850:
  3541  0425                     l2227:
  3542  0425  09A2               	comf	___awdiv@dividend,f
  3543  0426  09A3               	comf	___awdiv@dividend+1,f
  3544  0427  0AA2               	incf	___awdiv@dividend,f
  3545  0428  1903               	skipnz
  3546  0429  0AA3               	incf	___awdiv@dividend+1,f
  3547  042A                     l2229:
  3548  042A  3001               	movlw	1
  3549  042B  00A4               	movwf	??___awdiv
  3550  042C  0824               	movf	??___awdiv,w
  3551  042D  06A6               	xorwf	___awdiv@sign,f
  3552  042E                     l2231:
  3553  042E  01A7               	clrf	___awdiv@quotient
  3554  042F  01A8               	clrf	___awdiv@quotient+1
  3555  0430                     l2233:
  3556  0430  0820               	movf	___awdiv@divisor,w
  3557  0431  0421               	iorwf	___awdiv@divisor+1,w
  3558  0432  1903               	btfsc	3,2
  3559  0433  2C35               	goto	u1861
  3560  0434  2C36               	goto	u1860
  3561  0435                     u1861:
  3562  0435  2C6D               	goto	l2253
  3563  0436                     u1860:
  3564  0436                     l2235:
  3565  0436  01A5               	clrf	___awdiv@counter
  3566  0437  0AA5               	incf	___awdiv@counter,f
  3567  0438  2C44               	goto	l2241
  3568  0439                     l2237:
  3569  0439  3001               	movlw	1
  3570  043A                     u1875:
  3571  043A  1003               	clrc
  3572  043B  0DA0               	rlf	___awdiv@divisor,f
  3573  043C  0DA1               	rlf	___awdiv@divisor+1,f
  3574  043D  3EFF               	addlw	-1
  3575  043E  1D03               	skipz
  3576  043F  2C3A               	goto	u1875
  3577  0440                     l2239:
  3578  0440  3001               	movlw	1
  3579  0441  00A4               	movwf	??___awdiv
  3580  0442  0824               	movf	??___awdiv,w
  3581  0443  07A5               	addwf	___awdiv@counter,f
  3582  0444                     l2241:
  3583  0444  1FA1               	btfss	___awdiv@divisor+1,7
  3584  0445  2C47               	goto	u1881
  3585  0446  2C48               	goto	u1880
  3586  0447                     u1881:
  3587  0447  2C39               	goto	l2237
  3588  0448                     u1880:
  3589  0448                     l2243:
  3590  0448  3001               	movlw	1
  3591  0449                     u1895:
  3592  0449  1003               	clrc
  3593  044A  0DA7               	rlf	___awdiv@quotient,f
  3594  044B  0DA8               	rlf	___awdiv@quotient+1,f
  3595  044C  3EFF               	addlw	-1
  3596  044D  1D03               	skipz
  3597  044E  2C49               	goto	u1895
  3598  044F  0821               	movf	___awdiv@divisor+1,w
  3599  0450  0223               	subwf	___awdiv@dividend+1,w
  3600  0451  1D03               	skipz
  3601  0452  2C55               	goto	u1905
  3602  0453  0820               	movf	___awdiv@divisor,w
  3603  0454  0222               	subwf	___awdiv@dividend,w
  3604  0455                     u1905:
  3605  0455  1C03               	skipc
  3606  0456  2C58               	goto	u1901
  3607  0457  2C59               	goto	u1900
  3608  0458                     u1901:
  3609  0458  2C60               	goto	l2249
  3610  0459                     u1900:
  3611  0459                     l2245:
  3612  0459  0820               	movf	___awdiv@divisor,w
  3613  045A  02A2               	subwf	___awdiv@dividend,f
  3614  045B  0821               	movf	___awdiv@divisor+1,w
  3615  045C  1C03               	skipc
  3616  045D  03A3               	decf	___awdiv@dividend+1,f
  3617  045E  02A3               	subwf	___awdiv@dividend+1,f
  3618  045F                     l2247:
  3619  045F  1427               	bsf	___awdiv@quotient,0
  3620  0460                     l2249:
  3621  0460  3001               	movlw	1
  3622  0461                     u1915:
  3623  0461  1003               	clrc
  3624  0462  0CA1               	rrf	___awdiv@divisor+1,f
  3625  0463  0CA0               	rrf	___awdiv@divisor,f
  3626  0464  3EFF               	addlw	-1
  3627  0465  1D03               	skipz
  3628  0466  2C61               	goto	u1915
  3629  0467                     l2251:
  3630  0467  3001               	movlw	1
  3631  0468  02A5               	subwf	___awdiv@counter,f
  3632  0469  1D03               	btfss	3,2
  3633  046A  2C6C               	goto	u1921
  3634  046B  2C6D               	goto	u1920
  3635  046C                     u1921:
  3636  046C  2C48               	goto	l2243
  3637  046D                     u1920:
  3638  046D                     l2253:
  3639  046D  0826               	movf	___awdiv@sign,w
  3640  046E  1903               	btfsc	3,2
  3641  046F  2C71               	goto	u1931
  3642  0470  2C72               	goto	u1930
  3643  0471                     u1931:
  3644  0471  2C77               	goto	l2257
  3645  0472                     u1930:
  3646  0472                     l2255:
  3647  0472  09A7               	comf	___awdiv@quotient,f
  3648  0473  09A8               	comf	___awdiv@quotient+1,f
  3649  0474  0AA7               	incf	___awdiv@quotient,f
  3650  0475  1903               	skipnz
  3651  0476  0AA8               	incf	___awdiv@quotient+1,f
  3652  0477                     l2257:
  3653  0477  0828               	movf	___awdiv@quotient+1,w
  3654  0478  00A1               	movwf	?___awdiv+1
  3655  0479  0827               	movf	___awdiv@quotient,w
  3656  047A  00A0               	movwf	?___awdiv
  3657  047B                     l470:
  3658  047B  0008               	return
  3659  047C                     __end_of___awdiv:
  3660                           
  3661                           	psect	text16
  3662  0580                     __ptext16:	
  3663 ;; *************** function _configBoard *****************
  3664 ;; Defined at:
  3665 ;;		line 181 in file "utils.c"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;		None
  3668 ;; Auto vars:     Size  Location     Type
  3669 ;;		None
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  1    wreg      void 
  3672 ;; Registers used:
  3673 ;;		wreg, status,2, status,0
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMMON   BANK0   BANK1
  3679 ;;      Params:         0       0       0
  3680 ;;      Locals:         0       0       0
  3681 ;;      Temps:          0       1       0
  3682 ;;      Totals:         0       1       0
  3683 ;;Total ram usage:        1 bytes
  3684 ;; Hardware stack levels used: 1
  3685 ;; Hardware stack levels required when called: 1
  3686 ;; This function calls:
  3687 ;;		Nothing
  3688 ;; This function is called by:
  3689 ;;		_main
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693                           
  3694                           ;psect for function _configBoard
  3695  0580                     _configBoard:
  3696  0580                     l2299:	
  3697                           ;incstack = 0
  3698                           ; Regs used in _configBoard: [wreg+status,2+status,0]
  3699                           
  3700                           
  3701                           ;utils.c: 191:     OSCCON |= (1<<0);
  3702  0580  1683               	bsf	3,5	;RP0=1, select bank1
  3703  0581  1303               	bcf	3,6	;RP1=0, select bank1
  3704  0582  140F               	bsf	15,0	;volatile
  3705  0583                     l2301:
  3706                           
  3707                           ;utils.c: 192:     OSCCON &= ~(1<<1);
  3708  0583  30FD               	movlw	253
  3709  0584  1283               	bcf	3,5	;RP0=0, select bank0
  3710  0585  1303               	bcf	3,6	;RP1=0, select bank0
  3711  0586  00A0               	movwf	??_configBoard
  3712  0587  0820               	movf	??_configBoard,w
  3713  0588  1683               	bsf	3,5	;RP0=1, select bank1
  3714  0589  1303               	bcf	3,6	;RP1=0, select bank1
  3715  058A  058F               	andwf	15,f	;volatile
  3716  058B                     l2303:
  3717                           
  3718                           ;utils.c: 193:     OSCCON |= (1<<2);
  3719  058B  150F               	bsf	15,2	;volatile
  3720                           
  3721                           ;utils.c: 194:     OSCCON &= ~(1<<3);
  3722  058C  30F7               	movlw	247
  3723  058D  1283               	bcf	3,5	;RP0=0, select bank0
  3724  058E  1303               	bcf	3,6	;RP1=0, select bank0
  3725  058F  00A0               	movwf	??_configBoard
  3726  0590  0820               	movf	??_configBoard,w
  3727  0591  1683               	bsf	3,5	;RP0=1, select bank1
  3728  0592  1303               	bcf	3,6	;RP1=0, select bank1
  3729  0593  058F               	andwf	15,f	;volatile
  3730                           
  3731                           ;utils.c: 195:     OSCCON |= (0b01110000);
  3732  0594  3070               	movlw	112
  3733  0595  1283               	bcf	3,5	;RP0=0, select bank0
  3734  0596  1303               	bcf	3,6	;RP1=0, select bank0
  3735  0597  00A0               	movwf	??_configBoard
  3736  0598  0820               	movf	??_configBoard,w
  3737  0599  1683               	bsf	3,5	;RP0=1, select bank1
  3738  059A  1303               	bcf	3,6	;RP1=0, select bank1
  3739  059B  048F               	iorwf	15,f	;volatile
  3740  059C                     l2305:
  3741                           
  3742                           ;utils.c: 198:     ANSEL = 0x00;
  3743  059C  1283               	bcf	3,5	;RP0=0, select bank2
  3744  059D  1703               	bsf	3,6	;RP1=1, select bank2
  3745  059E  019E               	clrf	30	;volatile
  3746  059F                     l2307:
  3747                           
  3748                           ;utils.c: 205:     TRISA = 0b00110111;
  3749  059F  3037               	movlw	55
  3750  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  3751  05A1  1303               	bcf	3,6	;RP1=0, select bank1
  3752  05A2  0085               	movwf	5	;volatile
  3753  05A3                     l2309:
  3754                           
  3755                           ;utils.c: 206:     TRISB = 0x00;
  3756  05A3  0186               	clrf	6	;volatile
  3757  05A4                     l2311:
  3758                           
  3759                           ;utils.c: 207:     TRISC = 0x00;
  3760  05A4  0187               	clrf	7	;volatile
  3761  05A5                     l2313:
  3762                           
  3763                           ;utils.c: 210:     PORTA = 0xff;
  3764  05A5  30FF               	movlw	255
  3765  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  3766  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  3767  05A8  0085               	movwf	5	;volatile
  3768  05A9                     l2315:
  3769                           
  3770                           ;utils.c: 211:     PORTB = 0xff;
  3771  05A9  30FF               	movlw	255
  3772  05AA  0086               	movwf	6	;volatile
  3773  05AB                     l2317:
  3774                           
  3775                           ;utils.c: 212:     PORTC = 0xff;
  3776  05AB  30FF               	movlw	255
  3777  05AC  0087               	movwf	7	;volatile
  3778  05AD                     l2319:
  3779                           
  3780                           ;utils.c: 222:     nRABPU = 0;
  3781  05AD  1683               	bsf	3,5	;RP0=1, select bank1
  3782  05AE  1303               	bcf	3,6	;RP1=0, select bank1
  3783  05AF  1381               	bcf	1,7	;volatile
  3784  05B0                     l2321:
  3785                           
  3786                           ;utils.c: 224:     T0CS = 0;
  3787  05B0  1281               	bcf	1,5	;volatile
  3788  05B1                     l2323:
  3789                           
  3790                           ;utils.c: 226:     PSA = 0;
  3791  05B1  1181               	bcf	1,3	;volatile
  3792  05B2                     l2325:
  3793                           
  3794                           ;utils.c: 228:     PS0 = 1;
  3795  05B2  1401               	bsf	1,0	;volatile
  3796  05B3                     l2327:
  3797                           
  3798                           ;utils.c: 229:     PS1 = 1;
  3799  05B3  1481               	bsf	1,1	;volatile
  3800  05B4                     l2329:
  3801                           
  3802                           ;utils.c: 230:     PS2 = 0;
  3803  05B4  1101               	bcf	1,2	;volatile
  3804  05B5                     l2331:
  3805                           
  3806                           ;utils.c: 233:     TMR0= 133;
  3807  05B5  3085               	movlw	133
  3808  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  3809  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  3810  05B8  0081               	movwf	1	;volatile
  3811  05B9                     l2333:
  3812                           
  3813                           ;utils.c: 234:     GIE=1;
  3814  05B9  178B               	bsf	11,7	;volatile
  3815  05BA                     l2335:
  3816                           
  3817                           ;utils.c: 235:     PEIE=1;
  3818  05BA  170B               	bsf	11,6	;volatile
  3819  05BB                     l2337:
  3820                           
  3821                           ;utils.c: 236:     T0IE=1;
  3822  05BB  168B               	bsf	11,5	;volatile
  3823  05BC                     l2339:
  3824                           
  3825                           ;utils.c: 237:     RABIE = 1;
  3826  05BC  158B               	bsf	11,3	;volatile
  3827  05BD                     l2341:
  3828                           
  3829                           ;utils.c: 238:     T0IF = 0;
  3830  05BD  110B               	bcf	11,2	;volatile
  3831  05BE                     l2343:
  3832                           
  3833                           ;utils.c: 239:     RABIF = 0;
  3834  05BE  100B               	bcf	11,0	;volatile
  3835  05BF                     l2345:
  3836                           
  3837                           ;utils.c: 243:     WPUA0 = 1;
  3838  05BF  1683               	bsf	3,5	;RP0=1, select bank1
  3839  05C0  1303               	bcf	3,6	;RP1=0, select bank1
  3840  05C1  1415               	bsf	21,0	;volatile
  3841  05C2                     l2347:
  3842                           
  3843                           ;utils.c: 244:     WPUA1 = 1;
  3844  05C2  1495               	bsf	21,1	;volatile
  3845  05C3                     l2349:
  3846                           
  3847                           ;utils.c: 245:     WPUA2 = 1;
  3848  05C3  1515               	bsf	21,2	;volatile
  3849  05C4                     l2351:
  3850                           
  3851                           ;utils.c: 246:     WPUA4 = 1;
  3852  05C4  1615               	bsf	21,4	;volatile
  3853  05C5                     l2353:
  3854                           
  3855                           ;utils.c: 247:     WPUA5 = 1;
  3856  05C5  1695               	bsf	21,5	;volatile
  3857  05C6                     l2355:
  3858                           
  3859                           ;utils.c: 249:     IOCA = 0b00110111;
  3860  05C6  3037               	movlw	55
  3861  05C7  0096               	movwf	22	;volatile
  3862  05C8                     l191:
  3863  05C8  0008               	return
  3864  05C9                     __end_of_configBoard:
  3865                           
  3866                           	psect	text17
  3867  0373                     __ptext17:	
  3868 ;; *************** function _my_isr_routine *****************
  3869 ;; Defined at:
  3870 ;;		line 42 in file "main.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;		None
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;		None
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      void 
  3877 ;; Registers used:
  3878 ;;		wreg, status,2, status,0
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMMON   BANK0   BANK1
  3884 ;;      Params:         0       0       0
  3885 ;;      Locals:         0       0       0
  3886 ;;      Temps:          6       0       0
  3887 ;;      Totals:         6       0       0
  3888 ;;Total ram usage:        6 bytes
  3889 ;; Hardware stack levels used: 1
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		Interrupt level 1
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _my_isr_routine
  3899  0373                     _my_isr_routine:
  3900  0373                     i1l1901:
  3901                           
  3902                           ;main.c: 45:     if(T0IF)
  3903  0373  1D0B               	btfss	11,2	;volatile
  3904  0374  2B76               	goto	u139_21
  3905  0375  2B77               	goto	u139_20
  3906  0376                     u139_21:
  3907  0376  2B8A               	goto	i1l1907
  3908  0377                     u139_20:
  3909  0377                     i1l1903:
  3910                           
  3911                           ;main.c: 46:     {;main.c: 47:         T0IF = 0;
  3912  0377  110B               	bcf	11,2	;volatile
  3913  0378                     i1l1905:
  3914                           
  3915                           ;main.c: 48:         TMR0 = 133;
  3916  0378  3085               	movlw	133
  3917  0379  1283               	bcf	3,5	;RP0=0, select bank0
  3918  037A  1303               	bcf	3,6	;RP1=0, select bank0
  3919  037B  0081               	movwf	1	;volatile
  3920                           
  3921                           ;main.c: 49:         uiCounterms++;
  3922  037C  3001               	movlw	1
  3923  037D  07E3               	addwf	_uiCounterms,f
  3924  037E  3000               	movlw	0
  3925  037F  1803               	skipnc
  3926  0380  3001               	movlw	1
  3927  0381  07E4               	addwf	_uiCounterms+1,f
  3928  0382  3000               	movlw	0
  3929  0383  1803               	skipnc
  3930  0384  3001               	movlw	1
  3931  0385  07E5               	addwf	_uiCounterms+2,f
  3932  0386  3000               	movlw	0
  3933  0387  1803               	skipnc
  3934  0388  3001               	movlw	1
  3935  0389  07E6               	addwf	_uiCounterms+3,f
  3936  038A                     i1l1907:
  3937                           
  3938                           ;main.c: 54:     if(RABIF){
  3939  038A  1C0B               	btfss	11,0	;volatile
  3940  038B  2B8D               	goto	u140_21
  3941  038C  2B8E               	goto	u140_20
  3942  038D                     u140_21:
  3943  038D  2C0C               	goto	i1l46
  3944  038E                     u140_20:
  3945  038E                     i1l1909:
  3946                           
  3947                           ;main.c: 56:         if(uiCounterms - uiButtonDebounce > 19){
  3948  038E  1283               	bcf	3,5	;RP0=0, select bank0
  3949  038F  1303               	bcf	3,6	;RP1=0, select bank0
  3950  0390  0863               	movf	_uiCounterms,w
  3951  0391  00F6               	movwf	??_my_isr_routine
  3952  0392  0864               	movf	_uiCounterms+1,w
  3953  0393  00F7               	movwf	??_my_isr_routine+1
  3954  0394  0865               	movf	_uiCounterms+2,w
  3955  0395  00F8               	movwf	??_my_isr_routine+2
  3956  0396  0866               	movf	_uiCounterms+3,w
  3957  0397  00F9               	movwf	??_my_isr_routine+3
  3958  0398  1683               	bsf	3,5	;RP0=1, select bank1
  3959  0399  1303               	bcf	3,6	;RP1=0, select bank1
  3960  039A  082A               	movf	_uiButtonDebounce^(0+128),w
  3961  039B  02F6               	subwf	??_my_isr_routine,f
  3962  039C  082B               	movf	(_uiButtonDebounce+1)^(0+128),w
  3963  039D  1C03               	skipc
  3964  039E  0F2B               	incfsz	(_uiButtonDebounce+1)^(0+128),w
  3965  039F  2BA1               	goto	u141_21
  3966  03A0  2BA2               	goto	u141_22
  3967  03A1                     u141_21:
  3968  03A1  02F7               	subwf	??_my_isr_routine+1,f
  3969  03A2                     u141_22:
  3970  03A2  082C               	movf	(_uiButtonDebounce+2)^(0+128),w
  3971  03A3  1C03               	skipc
  3972  03A4  0F2C               	incfsz	(_uiButtonDebounce+2)^(0+128),w
  3973  03A5  2BA7               	goto	u141_23
  3974  03A6  2BA8               	goto	u141_24
  3975  03A7                     u141_23:
  3976  03A7  02F8               	subwf	??_my_isr_routine+2,f
  3977  03A8                     u141_24:
  3978  03A8  082D               	movf	(_uiButtonDebounce+3)^(0+128),w
  3979  03A9  1C03               	skipc
  3980  03AA  0F2D               	incfsz	(_uiButtonDebounce+3)^(0+128),w
  3981  03AB  2BAD               	goto	u141_25
  3982  03AC  2BAE               	goto	u141_26
  3983  03AD                     u141_25:
  3984  03AD  02F9               	subwf	??_my_isr_routine+3,f
  3985  03AE                     u141_26:
  3986  03AE  0879               	movf	??_my_isr_routine+3,w
  3987  03AF  1D03               	btfss	3,2
  3988  03B0  2BBF               	goto	u142_20
  3989  03B1  0878               	movf	??_my_isr_routine+2,w
  3990  03B2  1D03               	btfss	3,2
  3991  03B3  2BBF               	goto	u142_20
  3992  03B4  0877               	movf	??_my_isr_routine+1,w
  3993  03B5  1D03               	btfss	3,2
  3994  03B6  2BBF               	goto	u142_20
  3995  03B7  3014               	movlw	20
  3996  03B8  0276               	subwf	??_my_isr_routine,w
  3997  03B9  1D03               	skipz
  3998  03BA  2BBB               	goto	u142_23
  3999  03BB                     u142_23:
  4000  03BB  1C03               	btfss	3,0
  4001  03BC  2BBE               	goto	u142_21
  4002  03BD  2BBF               	goto	u142_20
  4003  03BE                     u142_21:
  4004  03BE  2C0B               	goto	i1l1923
  4005  03BF                     u142_20:
  4006  03BF                     i1l1911:
  4007                           
  4008                           ;main.c: 58:             readButtonStatus[0] = (PORTA & (1<<0))>>0;
  4009  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  4010  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  4011  03C1  0805               	movf	5,w	;volatile
  4012  03C2  3901               	andlw	1
  4013  03C3  00F6               	movwf	??_my_isr_routine
  4014  03C4  0876               	movf	??_my_isr_routine,w
  4015  03C5  00E7               	movwf	_readButtonStatus
  4016  03C6                     i1l1913:
  4017                           
  4018                           ;main.c: 59:             readButtonStatus[1] = (PORTA & (1<<1))>>1;
  4019  03C6  0805               	movf	5,w	;volatile
  4020  03C7  00F6               	movwf	??_my_isr_routine
  4021  03C8  1003               	clrc
  4022  03C9  0C76               	rrf	??_my_isr_routine,w
  4023  03CA  3901               	andlw	1
  4024  03CB  00F7               	movwf	??_my_isr_routine+1
  4025  03CC  0877               	movf	??_my_isr_routine+1,w
  4026  03CD  00E8               	movwf	_readButtonStatus+1
  4027  03CE                     i1l1915:
  4028                           
  4029                           ;main.c: 60:             readButtonStatus[2] = (PORTA & (1<<2))>>2;
  4030  03CE  0805               	movf	5,w	;volatile
  4031  03CF  00F6               	movwf	??_my_isr_routine
  4032  03D0  3002               	movlw	2
  4033  03D1                     u143_25:
  4034  03D1  1003               	clrc
  4035  03D2  0CF6               	rrf	??_my_isr_routine,f
  4036  03D3  3EFF               	addlw	-1
  4037  03D4  1D03               	skipz
  4038  03D5  2BD1               	goto	u143_25
  4039  03D6  0876               	movf	??_my_isr_routine,w
  4040  03D7  3901               	andlw	1
  4041  03D8  00F7               	movwf	??_my_isr_routine+1
  4042  03D9  0877               	movf	??_my_isr_routine+1,w
  4043  03DA  00E9               	movwf	_readButtonStatus+2
  4044  03DB                     i1l1917:
  4045                           
  4046                           ;main.c: 61:             readButtonStatus[3] = (PORTA & (1<<4))>>4;
  4047  03DB  0805               	movf	5,w	;volatile
  4048  03DC  00F6               	movwf	??_my_isr_routine
  4049  03DD  3004               	movlw	4
  4050  03DE                     u144_25:
  4051  03DE  1003               	clrc
  4052  03DF  0CF6               	rrf	??_my_isr_routine,f
  4053  03E0  3EFF               	addlw	-1
  4054  03E1  1D03               	skipz
  4055  03E2  2BDE               	goto	u144_25
  4056  03E3  0876               	movf	??_my_isr_routine,w
  4057  03E4  3901               	andlw	1
  4058  03E5  00F7               	movwf	??_my_isr_routine+1
  4059  03E6  0877               	movf	??_my_isr_routine+1,w
  4060  03E7  00EA               	movwf	_readButtonStatus+3
  4061  03E8                     i1l1919:
  4062                           
  4063                           ;main.c: 62:             readButtonStatus[4] = (PORTA & (1<<5))>>5;
  4064  03E8  0805               	movf	5,w	;volatile
  4065  03E9  00F6               	movwf	??_my_isr_routine
  4066  03EA  3005               	movlw	5
  4067  03EB                     u145_25:
  4068  03EB  1003               	clrc
  4069  03EC  0CF6               	rrf	??_my_isr_routine,f
  4070  03ED  3EFF               	addlw	-1
  4071  03EE  1D03               	skipz
  4072  03EF  2BEB               	goto	u145_25
  4073  03F0  0876               	movf	??_my_isr_routine,w
  4074  03F1  3901               	andlw	1
  4075  03F2  00F7               	movwf	??_my_isr_routine+1
  4076  03F3  0877               	movf	??_my_isr_routine+1,w
  4077  03F4  00EB               	movwf	_readButtonStatus+4
  4078  03F5                     i1l1921:
  4079                           
  4080                           ;main.c: 64:             uiButtonDebounce = uiCounterms;
  4081  03F5  0866               	movf	_uiCounterms+3,w
  4082  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  4083  03F7  1303               	bcf	3,6	;RP1=0, select bank1
  4084  03F8  00AD               	movwf	(_uiButtonDebounce+3)^(0+128)
  4085  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  4086  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  4087  03FB  0865               	movf	_uiCounterms+2,w
  4088  03FC  1683               	bsf	3,5	;RP0=1, select bank1
  4089  03FD  1303               	bcf	3,6	;RP1=0, select bank1
  4090  03FE  00AC               	movwf	(_uiButtonDebounce+2)^(0+128)
  4091  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  4092  0400  1303               	bcf	3,6	;RP1=0, select bank0
  4093  0401  0864               	movf	_uiCounterms+1,w
  4094  0402  1683               	bsf	3,5	;RP0=1, select bank1
  4095  0403  1303               	bcf	3,6	;RP1=0, select bank1
  4096  0404  00AB               	movwf	(_uiButtonDebounce+1)^(0+128)
  4097  0405  1283               	bcf	3,5	;RP0=0, select bank0
  4098  0406  1303               	bcf	3,6	;RP1=0, select bank0
  4099  0407  0863               	movf	_uiCounterms,w
  4100  0408  1683               	bsf	3,5	;RP0=1, select bank1
  4101  0409  1303               	bcf	3,6	;RP1=0, select bank1
  4102  040A  00AA               	movwf	_uiButtonDebounce^(0+128)
  4103  040B                     i1l1923:
  4104                           
  4105                           ;main.c: 67:         RABIF = 0;
  4106  040B  100B               	bcf	11,0	;volatile
  4107  040C                     i1l46:
  4108  040C  087B               	movf	??_my_isr_routine+5,w
  4109  040D  008A               	movwf	10
  4110  040E  0E7A               	swapf	??_my_isr_routine+4,w
  4111  040F  0083               	movwf	3
  4112  0410  0EFE               	swapf	btemp,f
  4113  0411  0E7E               	swapf	btemp,w
  4114  0412  0009               	retfie
  4115  0413                     __end_of_my_isr_routine:
  4116  007E                     btemp	set	126	;btemp
  4117  007E                     wtemp0	set	126
  4118                           
  4119                           	psect	intentry
  4120  0004                     __pintentry:	
  4121                           ;incstack = 0
  4122                           ; Regs used in _my_isr_routine: [wreg+status,2+status,0]
  4123                           
  4124  0004                     interrupt_function:
  4125  007E                     saved_w	set	btemp
  4126  0004  00FE               	movwf	btemp
  4127  0005  0E03               	swapf	3,w
  4128  0006  00FA               	movwf	??_my_isr_routine+4
  4129  0007  080A               	movf	10,w
  4130  0008  00FB               	movwf	??_my_isr_routine+5
  4131  0009  2B73               	ljmp	_my_isr_routine
  4132                           
  4133                           	psect	config
  4134                           
  4135                           ;Config register CONFIG @ 0x2007
  4136                           ;	Oscillator Selection bits
  4137                           ;	FOSC = INTRCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O function
      +                           on RA5/OSC1/CLKIN
  4138                           ;	Watchdog Timer Enable bit
  4139                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4140                           ;	Power-up Timer Enable bit
  4141                           ;	PWRTE = OFF, PWRT disabled
  4142                           ;	MCLR Pin Function Select bit
  4143                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  4144                           ;	Code Protection bit
  4145                           ;	CP = OFF, Program memory code protection is disabled
  4146                           ;	Data Code Protection bit
  4147                           ;	CPD = OFF, Data memory code protection is disabled
  4148                           ;	Brown-out Reset Selection bits
  4149                           ;	BOREN = OFF, BOR disabled
  4150                           ;	Internal External Switchover bit
  4151                           ;	IESO = ON, Internal External Switchover mode is enabled
  4152                           ;	Fail-Safe Clock Monitor Enabled bit
  4153                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4154  2007                     	org	8199
  4155  2007  34D4               	dw	13524

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     59      79
    BANK1            32      0      14

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _my_isr_routine in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_deviceStateMachine
    _shiftDisplays->_clearPin
    _shiftDisplays->_setPin
    _deviceStateMachine->_rollDice
    _rollDice->_writeCharOnDisplay
    _writeCharOnDisplay->___lwmod
    _randomNumber->___llmod
    ___llmod->___lmul
    ___lwmod->_randomNumber

Critical Paths under _my_isr_routine in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr_routine in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    9664
                                             53 BANK0      6     6      0
                            ___llmod
                        _configBoard
                 _deviceStateMachine
                        _initButtons
                        _initDisplay
                       _randomNumber
                      _shiftDisplays
 ---------------------------------------------------------------------------------
 (1) _shiftDisplays                                        1     1      0     428
                                              4 BANK0      1     1      0
                           _clearPin
                             _setPin
 ---------------------------------------------------------------------------------
 (2) _setPin                                               4     3      1     214
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _clearPin                                             4     3      1     214
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _initDisplay                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initButtons                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _deviceStateMachine                                   4     4      0    6967
                                             49 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                           _rollDice
                 _writeCharOnDisplay
 ---------------------------------------------------------------------------------
 (2) _rollDice                                             8     8      0    4131
                                             41 BANK0      8     8      0
                            ___lwdiv
                            ___lwmod
                       _randomNumber
                 _writeCharOnDisplay
 ---------------------------------------------------------------------------------
 (2) _writeCharOnDisplay                                   4     3      1    1176
                                             37 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _randomNumber                                         8     4      4    1088
                                             23 BANK0      8     4      4
                            ___llmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     316
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     772
                                             13 BANK0     10     2      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     919
                                             31 BANK0      6     2      4
                            ___lwdiv (ARG)
                       _randomNumber (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     781
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     793
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     805
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _my_isr_routine                                       6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___llmod
     ___lmul (ARG)
   _configBoard
   _deviceStateMachine
     ___awdiv
     ___awmod
     _rollDice
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
         _randomNumber (ARG)
           ___llmod
           ___lmul
       _randomNumber
       _writeCharOnDisplay
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
     _writeCharOnDisplay
   _initButtons
   _initDisplay
   _randomNumber
   _shiftDisplays
     _clearPin
     _setPin

 _my_isr_routine (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       E       6       43.8%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3B      4F       4       98.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      69       8        0.0%
ABS                  0      0      69       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Nov 19 18:08:38 2021

                           l51 0136                             l58 01A4                   ___awdiv@sign 0026  
                           fsr 0004                            l231 0372                            l144 06DD  
                          l225 057F                            l153 069B                            l331 0610  
                          l172 074E                            l165 078D                            l191 05C8  
                          l168 0776                            l195 0132                            l188 02CA  
                          l470 047B                            l483 04D6                            l539 052C  
                          l589 0656                            l599 0719                            _GIE 005F  
                          _PS0 0408                            _PS1 0409                            _PS2 040A  
                          _PSA 040B                 clearPin@ucPort 0020                            fsr0 0004  
                          indf 0000                   ___awmod@sign 0026                           l2101 05C9  
                         l2111 0608                           l2103 05D3                           l2121 04F1  
                         l2105 05D7                           l2123 04F5                           l2131 0524  
                         l2115 04D7                           l2107 05EE                           l2211 02F3  
                         l2301 0583                           l2221 041A                           l2141 0611  
                         l2125 0507                           l2117 04E1                           l2109 05F7  
                         l2213 02F9                           l2311 05A4                           l2303 058B  
                         l2231 042E                           l2223 041F                           l2151 0629  
                         l2143 0615                           l2127 0515                           l2119 04E4  
                         l2135 052D                           l1511 0225                           l2215 0306  
                         l2207 02CB                           l2321 05B0                           l2313 05A5  
                         l2305 059C                           l2241 0444                           l2233 0430  
                         l2225 0421                           l2217 0413                           l2161 064C  
                         l2153 062D                           l2145 061B                           l2129 051E  
                         l2137 0577                           l1521 0252                           l1513 0226  
                         l2209 02D2                           l2401 0032                           l2331 05B5  
                         l2323 05B1                           l2315 05A9                           l2307 059F  
                         l2251 0467                           l2243 0448                           l2235 0436  
                         l2227 0425                           l2219 0416                           l2155 063E  
                         l2147 061E                           l2163 0652                           l1531 0289  
                         l1523 025D                           l1515 0231                           l2411 003A  
                         l2403 0033                           l2171 06AE                           l2341 05BD  
                         l2333 05B9                           l2325 05B2                           l2317 05AB  
                         l2309 05A3                           l2245 0459                           l2237 0439  
                         l2253 046D                           l2229 042A                           l2261 047C  
                         l2157 0644                           l2149 0625                           l1533 0294  
                         l1525 0268                           l1517 023C                           l2421 0080  
                         l2413 003C                           l2173 06BC                           l2501 01C2  
                         l2351 05C4                           l2343 05BE                           l2335 05BA  
                         l2327 05B3                           l2319 05AD                           l2255 0472  
                         l2247 045F                           l2239 0440                           l2271 048E  
                         l2263 047F                           l2159 0645                           l1527 0273  
                         l1519 0247                           l2431 0095                           l2423 0086  
                         l2191 066A                           l2167 069F                           l2511 01E1  
                         l2353 05C5                           l2345 05BF                           l2337 05BB  
                         l2329 05B4                           l2257 0477                           l2249 0460  
                         l2281 04A7                           l2273 0493                           l2265 0483  
                         l1529 027E                           l1537 029F                           l2433 009A  
                         l2441 00A9                           l2425 0089                           l2417 0075  
                         l2409 0035                           l2361 077E                           l2193 0679  
                         l2169 06A0                           l2521 020D                           l2513 01E4  
                         l2355 05C6                           l2347 05C2                           l2339 05BC  
                         l2283 04AB                           l2275 0499                           l2291 04C8  
                         l2267 0488                           l1571 06DE                           l2443 00BF  
                         l2435 009F                           l2419 007B                           l2371 0752  
                         l2363 0783                           l2187 065A                           l2179 06CA  
                         l2523 0213                           l2515 01F4                           l2507 01C6  
                         l2349 05C3                           l2293 04CD                           l2285 04B5  
                         l2277 049C                           l2269 048A                           l1581 06F8  
                         l1573 06E6                           l2453 00C6                           l2437 00A4  
                         l2429 0090                           l2381 0762                           l2373 0754  
                         l2365 0784                           l2357 0777                           l2189 065B  
                         l2517 0204                           l2509 01D9                           l2295 04D2  
                         l2287 04BB                           l2279 04A3                           l1583 0702  
                         l1575 06E9                           l2455 00CB                           l2463 00E4  
                         l2383 076A                           l2375 0756                           l2367 0789  
                         l2359 077A                           l2199 0688                           l2391 0726  
                         l2289 04C2                           l1585 0708                           l1577 06F0  
                         l2465 00FA                           l2385 076C                           l2377 0758  
                         l2369 074F                           l2393 0739                           l2481 0153  
                         l2299 0580                           l1587 070F                           l1579 06F4  
                         l2459 00CE                           l2387 0774                           l2379 0760  
                         l2395 073B                           l2491 018C                           l2483 0154  
                         l1589 0715                           l2397 0745                           l2389 071A  
                         l2493 0196                           l2485 015E                           l2399 002D  
                         l2495 019B                           l2487 0163                           l2479 0133  
                         l2681 00D6                           l2497 01A2                           l2683 00EC  
                         l2675 06D2                           l2499 01C1                           l2685 02A7  
                         l2677 0690                           l2679 00B1                           _T0IE 005D  
                         u1000 06E6                           _T0IF 005A                           u1001 06E5  
                         _T0CS 040D                           u1020 06F8                           u1021 06F7  
                         u1030 0702                           u1031 0701                           u1015 06EA  
                         u2010 04C8                           u1050 0715                           u2011 04C7  
                         u1051 0714                           u1035 06FE                           u2020 04CD  
                         u2100 0153                           u2021 04CC                           u2005 04BC  
                         u1045 0709                           u2101 0152                           u2030 0739  
                         u2110 015E                           u2031 0738                           u2111 015D  
                         u2040 0032                           u2200 020C                           u2120 0163  
                         u2041 0031                           u2201 020B                           u2121 0162  
                         u2050 003A                           u2210 0220                           u2130 0172  
                         u2051 0039                           u2035 0735                           u2211 021F  
                         u2131 0173                           _IOCA 0096                           u2060 007B  
                         u2140 0196                           u2132 0178                           u2061 007A  
                         u2141 0195                           u2133 0179                           u2070 0086  
                         u2150 019B                           u2071 0085                           u2215 021C  
                         u2151 019A                           u2080 008F                           u2160 01C1  
                         u2081 008E                           u2161 01C0                           u2090 00C5  
                         u2170 01D9                           u2091 00C4                           u2171 01D8  
                         u1700 061B                           u1620 0608                           u2180 01E1  
                         u1701 061A                           u1621 0607                           u1605 05F0  
                         u2181 01E0                           u1630 04E1                           u2190 0204  
                         u1631 04E0                           u1615 05F8                           u2191 0203  
                         u1720 062D                           u1721 062C                           u1650 04F5  
                         u1715 061F                           u1651 04F4                           u1900 0459  
                         u1740 063E                           u1660 0507                           u1580 05D7  
                         u1804 0661                           u1901 0458                           u1741 063D  
                         u1661 0506                           u1645 04E6                           u1581 05D6  
                         u1805 065F                           u1830 0306                           u1814 0670  
                         u1735 062E                           u1591 05E0                           u1831 0305  
                         u1815 066E                           u1920 046D                           u1840 041A  
                         u1760 0652                           u1680 0524                           u1592 05E7  
                         u1824 067F                           u1921 046C                           u1905 0455  
                         u1841 0419                           u1761 0651                           u1745 063A  
                         u1681 0523                           u1665 0503                           u1593 05EE  
                         u1825 067D                           u1930 0472                           u1850 0425  
                         u1690 0559                           u1931 0471                           u1915 0461  
                         u1851 0424                           u1755 0646                           u1675 0516  
                         u1691 055A                           u1835 0302                           u1860 0436  
                         u1940 0483                           u1692 055F                           u1861 0435  
                         u1941 0482                           u1693 0560                           u1950 048E  
                         u1774 06A6                           u1951 048D                           u1775 06A4  
                         u1880 0448                           u1960 0499                           u1784 06B4  
                         u1881 0447                           u1961 0498                           u1785 06B2  
                         u1794 06C2                           u1875 043A                           u1795 06C0  
                         _PEIE 005E                           u1980 04AB                           u1981 04AA  
                         u1990 04B5                           u1895 0449                           u1991 04B4  
                         u1975 049D                           u1995 04B1                           i1l46 040C  
                         _TMR0 0001                           _main 0133                           btemp 007E  
                         start 000A                   ?_initDisplay 0076                   ?_initButtons 0076  
             _readButtonStatus 0067                          ?_main 0076                __end_of___awdiv 047C  
              __end_of___awmod 04D7                          _ANSEL 011E                ___awdiv@divisor 0020  
              __end_of___llmod 052D                __end_of___lwdiv 0657                          _RABIE 005B  
                        _RABIF 0058                __end_of___lwmod 071A                ___awdiv@counter 0025  
                        _PORTA 0005                          _PORTB 0006                          _PORTC 0007  
                        _TRISA 0085                          _TRISB 0086                          _TRISC 0087  
                        _WPUA0 04A8                          _WPUA1 04A9                          _WPUA2 04AA  
                        _WPUA4 04AC                          _WPUA5 04AD            ___lmul@multiplicand 0024  
                _indiceDisplay 0070                          main@i 0059                          pclath 000A  
                        status 0003     __end_of_writeCharOnDisplay 02CB                          wtemp0 007E  
              __initialization 000B                   __end_of_main 0222                         ??_main 0055  
             ___llmod@dividend 0031               ___awdiv@dividend 0022                         i1l1901 0373  
                       i1l1911 03BF                         i1l1903 0377                         i1l1921 03F5  
                       i1l1913 03C6                         i1l1905 0378                         i1l1915 03CE  
                       i1l1923 040B                         i1l1907 038A                         i1l1917 03DB  
                       i1l1909 038E                         i1l1919 03E8                         u140_20 038E  
                       u140_21 038D                         u141_21 03A1                         u141_22 03A2  
                       u141_23 03A7                         u141_24 03A8                         u141_25 03AD  
                       u141_26 03AE                         u142_20 03BF                         u142_21 03BE  
                       u142_23 03BB                         u143_25 03D1                         u144_25 03DE  
                       u145_25 03EB                         u139_20 0377                         u139_21 0376  
                       _OSCCON 008F               __end_of_clearPin 069C                         _Botoes 00A0  
                       _nRABPU 040F           __size_of_configBoard 0049                         ___lmul 05C9  
                    ??___awdiv 0024          __end_of_shiftDisplays 074F                      ??___awmod 0024  
                    ??___llmod 0035                      ??___lwdiv 0024                      ??___lwmod 0043  
             ___awdiv@quotient 0027                         _setPin 069C                ___awmod@divisor 0020  
              ___awmod@counter 0025               __end_of_rollDice 0373                         saved_w 007E  
  __size_of_deviceStateMachine 0109        __end_of__initialization 0028               _uiButtonDebounce 00AA  
               __pcstackCOMMON 0076                  ?_randomNumber 0037     deviceStateMachine@ucButton 0054  
                 __pidataBANK0 078E           __size_of_initDisplay 0017           __size_of_initButtons 0028  
                   __pbssBANK0 005B                     __pbssBANK1 00A0                 ??_randomNumber 003B  
                   __pmaintext 0133                        ?___lmul 0020                     __pintentry 0004  
               ___lmul@product 0029                        ?_setPin 0020                    setPin@ucPin 0023  
                    ?_clearPin 0020        __size_of_my_isr_routine 00A0                      ?_rollDice 0076  
                      ___awdiv 0413                __size_of___lmul 0048                        ___awmod 047C  
                      ___llmod 04D7                        ___lwdiv 0611                        ___lwmod 06DE  
           _writeCharOnDisplay 0222                __size_of_setPin 0042                        __ptext1 071A  
                      __ptext2 069C                        __ptext3 0657                        __ptext4 0777  
                      __ptext5 074F                        __ptext6 002A                        __ptext7 02CB  
                      __ptext8 0222                        __ptext9 052D               ___awmod@dividend 0022  
          ?_writeCharOnDisplay 0045                     ??_clearPin 0021                     _randomSeed 0072  
                      clrloop0 0797           end_of_initialization 0028           ??_writeCharOnDisplay 0046  
              rollDice@ulTotal 004F                     ??_rollDice 0049  writeCharOnDisplay@ucCharacter 0048  
         __end_of_randomNumber 0580             _deviceCurrentState 006E                  clearPin@ucPin 0023  
                ??_configBoard 0020                 __end_of___lmul 0611                 __end_of_setPin 06DE  
          start_initialization 000B     __end_of_deviceStateMachine 0133                 _my_isr_routine 0373  
       __size_of_shiftDisplays 0035                ___llmod@divisor 002D                ___llmod@counter 0036  
                ??_initDisplay 0020                  ??_initButtons 0020                       ??___lmul 0028  
          __end_of_configBoard 05C9                    __pdataBANK0 0067                       ??_setPin 0021  
                  __pbssCOMMON 0070                      ___latbits 0000                  __pcstackBANK0 0020  
       __end_of_my_isr_routine 0413              __size_of_clearPin 0045                      _diceState 006C  
             ___lwdiv@dividend 0022                       ?___awdiv 0020                       ?___awmod 0020  
                     ?___llmod 002D                       ?___lwdiv 0020                       ?___lwmod 003F  
                _shiftDisplays 071A              __size_of_rollDice 00A8            __end_of_initDisplay 078E  
        __size_of_randomNumber 0053            __end_of_initButtons 0777                ?_my_isr_routine 0076  
                 setPin@ucPort 0020               ___lwdiv@quotient 0026              interrupt_function 0004  
                  _configBoard 0580                      clear_ram0 0796                   _randomNumber 052D  
               ?_shiftDisplays 0076              ___lmul@multiplier 0020    __size_of_writeCharOnDisplay 00A9  
                  _initDisplay 0777                    _initButtons 074F               __size_of___awdiv 0069  
             __size_of___awmod 005B               __size_of___llmod 0056               __size_of___lwdiv 0046  
             __size_of___lwmod 003C        _Display7seg4digitsVetor 005B                       _clearPin 0657  
              ___lwdiv@divisor 0020                ___lwdiv@counter 0025                       __ptext10 05C9  
                     __ptext11 04D7                       __ptext12 06DE                       __ptext13 0611  
                     __ptext14 047C                       __ptext15 0413                       __ptext16 0580  
                     __ptext17 0373                    _uiCounterms 0063                  __size_of_main 00EF  
           _deviceStateMachine 002A                      rollDice@i 004D                ??_shiftDisplays 0024  
                     _rollDice 02CB            ?_deviceStateMachine 0076    writeCharOnDisplay@ucDisplay 0045  
         ??_deviceStateMachine 0051                       intlevel1 0000               ___lwmod@dividend 0041  
             ??_my_isr_routine 0076                ___lwmod@divisor 003F                ___lwmod@counter 0044  
                 ?_configBoard 0076  
