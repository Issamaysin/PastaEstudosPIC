

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Nov 24 13:26:02 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F687
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 2.20
    37                           ; Generated 12/02/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F687 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  008F                     	;# 
   101  0090                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009A                     	;# 
   114  009B                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  010C                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  0115                     	;# 
   121  0116                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  011A                     	;# 
   125  011B                     	;# 
   126  011E                     	;# 
   127  011F                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  019E                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0013                     	;# 
   148  0014                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  0081                     	;# 
   155  0085                     	;# 
   156  0086                     	;# 
   157  0087                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  008F                     	;# 
   162  0090                     	;# 
   163  0093                     	;# 
   164  0093                     	;# 
   165  0093                     	;# 
   166  0094                     	;# 
   167  0095                     	;# 
   168  0095                     	;# 
   169  0096                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009A                     	;# 
   175  009B                     	;# 
   176  009E                     	;# 
   177  009F                     	;# 
   178  010C                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  0115                     	;# 
   182  0116                     	;# 
   183  0118                     	;# 
   184  0119                     	;# 
   185  011A                     	;# 
   186  011B                     	;# 
   187  011E                     	;# 
   188  011F                     	;# 
   189  018C                     	;# 
   190  018D                     	;# 
   191  019E                     	;# 
   192  0000                     	;# 
   193  0001                     	;# 
   194  0002                     	;# 
   195  0003                     	;# 
   196  0004                     	;# 
   197  0005                     	;# 
   198  0006                     	;# 
   199  0007                     	;# 
   200  000A                     	;# 
   201  000B                     	;# 
   202  000C                     	;# 
   203  000D                     	;# 
   204  000E                     	;# 
   205  000E                     	;# 
   206  000F                     	;# 
   207  0010                     	;# 
   208  0013                     	;# 
   209  0014                     	;# 
   210  0018                     	;# 
   211  0019                     	;# 
   212  001A                     	;# 
   213  001E                     	;# 
   214  001F                     	;# 
   215  0081                     	;# 
   216  0085                     	;# 
   217  0086                     	;# 
   218  0087                     	;# 
   219  008C                     	;# 
   220  008D                     	;# 
   221  008E                     	;# 
   222  008F                     	;# 
   223  0090                     	;# 
   224  0093                     	;# 
   225  0093                     	;# 
   226  0093                     	;# 
   227  0094                     	;# 
   228  0095                     	;# 
   229  0095                     	;# 
   230  0096                     	;# 
   231  0096                     	;# 
   232  0097                     	;# 
   233  0098                     	;# 
   234  0099                     	;# 
   235  009A                     	;# 
   236  009B                     	;# 
   237  009E                     	;# 
   238  009F                     	;# 
   239  010C                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  0115                     	;# 
   243  0116                     	;# 
   244  0118                     	;# 
   245  0119                     	;# 
   246  011A                     	;# 
   247  011B                     	;# 
   248  011E                     	;# 
   249  011F                     	;# 
   250  018C                     	;# 
   251  018D                     	;# 
   252  019E                     	;# 
   253                           
   254                           	psect	idataBANK0
   255  0787                     __pidataBANK0:
   256                           
   257                           ;initializer for _readButtonStatus
   258  0787  3401               	retlw	1
   259  0788  3401               	retlw	1
   260  0789  3401               	retlw	1
   261  078A  3401               	retlw	1
   262  078B  3401               	retlw	1
   263                           
   264                           ;initializer for _diceState
   265  078C  3401               	retlw	1
   266  078D  3406               	retlw	6
   267                           
   268                           ;initializer for _deviceCurrentState
   269  078E  3401               	retlw	1
   270  0006                     _PORTB	set	6
   271  0007                     _PORTC	set	7
   272  0005                     _PORTA	set	5
   273  0001                     _TMR0	set	1
   274  005B                     _RABIE	set	91
   275  005D                     _T0IE	set	93
   276  005E                     _PEIE	set	94
   277  005F                     _GIE	set	95
   278  0058                     _RABIF	set	88
   279  005A                     _T0IF	set	90
   280  0096                     _IOCA	set	150
   281  0095                     _WPUA	set	149
   282  0087                     _TRISC	set	135
   283  0086                     _TRISB	set	134
   284  0085                     _TRISA	set	133
   285  008F                     _OSCCON	set	143
   286  040A                     _PS2	set	1034
   287  0409                     _PS1	set	1033
   288  0408                     _PS0	set	1032
   289  040B                     _PSA	set	1035
   290  040D                     _T0CS	set	1037
   291  040F                     _nRABPU	set	1039
   292  011E                     _ANSEL	set	286
   293                           
   294                           	psect	cinit
   295  000B                     start_initialization:	
   296                           ; #config settings
   297                           
   298  000B                     __initialization:
   299                           
   300                           ; Initialize objects allocated to BANK0
   301  000B  2787               	fcall	__pidataBANK0	;fetch initializer
   302  000C  00E8               	movwf	__pdataBANK0& (0+127)
   303  000D  2788               	fcall	__pidataBANK0+1	;fetch initializer
   304  000E  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   305  000F  2789               	fcall	__pidataBANK0+2	;fetch initializer
   306  0010  00EA               	movwf	(__pdataBANK0+2)& (0+127)
   307  0011  278A               	fcall	__pidataBANK0+3	;fetch initializer
   308  0012  00EB               	movwf	(__pdataBANK0+3)& (0+127)
   309  0013  278B               	fcall	__pidataBANK0+4	;fetch initializer
   310  0014  00EC               	movwf	(__pdataBANK0+4)& (0+127)
   311  0015  278C               	fcall	__pidataBANK0+5	;fetch initializer
   312  0016  00ED               	movwf	(__pdataBANK0+5)& (0+127)
   313  0017  278D               	fcall	__pidataBANK0+6	;fetch initializer
   314  0018  00EE               	movwf	(__pdataBANK0+6)& (0+127)
   315  0019  278E               	fcall	__pidataBANK0+7	;fetch initializer
   316  001A  00EF               	movwf	(__pdataBANK0+7)& (0+127)
   317                           
   318                           ; Clear objects allocated to BANK1
   319  001B  1383               	bcf	3,7	;select IRP bank0
   320  001C  30A0               	movlw	low __pbssBANK1
   321  001D  0084               	movwf	4
   322  001E  30AA               	movlw	low (__pbssBANK1+10)
   323  001F  278F               	fcall	clear_ram0
   324                           
   325                           ; Clear objects allocated to BANK0
   326  0020  3058               	movlw	low __pbssBANK0
   327  0021  0084               	movwf	4
   328  0022  3068               	movlw	low (__pbssBANK0+16)
   329  0023  278F               	fcall	clear_ram0
   330                           
   331                           ; Clear objects allocated to COMMON
   332  0024  3070               	movlw	low __pbssCOMMON
   333  0025  0084               	movwf	4
   334  0026  3076               	movlw	low (__pbssCOMMON+6)
   335  0027  278F               	fcall	clear_ram0
   336  0028                     end_of_initialization:	
   337                           ;End of C runtime variable initialization code
   338                           
   339  0028                     __end_of__initialization:
   340  0028  0183               	clrf	3
   341  0029  2933               	ljmp	_main	;jump to C main() function
   342                           
   343                           	psect	bssCOMMON
   344  0070                     __pbssCOMMON:
   345  0070                     _uiButtonDebounce:
   346  0070                     	ds	4
   347  0074                     _indiceDisplay:
   348  0074                     	ds	2
   349                           
   350                           	psect	bssBANK0
   351  0058                     __pbssBANK0:
   352  0058                     _Display7seg4digitsVetor:
   353  0058                     	ds	8
   354  0060                     _uiCounterms:
   355  0060                     	ds	4
   356  0064                     _randomSeed:
   357  0064                     	ds	4
   358                           
   359                           	psect	dataBANK0
   360  0068                     __pdataBANK0:
   361  0068                     _readButtonStatus:
   362  0068                     	ds	5
   363  006D                     _diceState:
   364  006D                     	ds	2
   365  006F                     _deviceCurrentState:
   366  006F                     	ds	1
   367                           
   368                           	psect	bssBANK1
   369  00A0                     __pbssBANK1:
   370  00A0                     _Botoes:
   371  00A0                     	ds	10
   372                           
   373                           	psect	clrtext
   374  078F                     clear_ram0:	
   375                           ;	Called with FSR containing the base address, and
   376                           ;	W with the last address+1
   377                           
   378  078F  0064               	clrwdt	;clear the watchdog before getting into this loop
   379  0790                     clrloop0:
   380  0790  0180               	clrf	0	;clear RAM location pointed to by FSR
   381  0791  0A84               	incf	4,f	;increment pointer
   382  0792  0604               	xorwf	4,w	;XOR with final address
   383  0793  1903               	btfsc	3,2	;have we reached the end yet?
   384  0794  3400               	retlw	0	;all done for this memory range, return
   385  0795  0604               	xorwf	4,w	;XOR again to restore value
   386  0796  2F90               	goto	clrloop0	;do the next byte
   387                           
   388                           	psect	cstackBANK1
   389  00AA                     __pcstackBANK1:
   390  00AA                     main@i:
   391                           
   392                           ; 1 bytes @ 0x0
   393  00AA                     	ds	1
   394                           
   395                           	psect	cstackCOMMON
   396  0076                     __pcstackCOMMON:
   397  0076                     ?_configBoard:
   398  0076                     ?_initDisplay:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0076                     ?_initButtons:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0076                     ?_shiftDisplays:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0076                     ?_deviceStateMachine:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0076                     ?_rollDice:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0076                     ?_my_isr_routine:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0076                     ??_my_isr_routine:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0076                     ?_main:	
   420                           ; 1 bytes @ 0x0
   421                           
   422                           
   423                           ; 1 bytes @ 0x0
   424  0076                     	ds	6
   425                           
   426                           	psect	cstackBANK0
   427  0020                     __pcstackBANK0:
   428  0020                     ??_configBoard:
   429  0020                     ??_initDisplay:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0020                     ??_initButtons:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0020                     ?_setPin:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0020                     ?_clearPin:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0020                     ?___awdiv:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0020                     ?___awmod:	
   445                           ; 2 bytes @ 0x0
   446                           
   447  0020                     ?___lwdiv:	
   448                           ; 2 bytes @ 0x0
   449                           
   450  0020                     ?___lmul:	
   451                           ; 2 bytes @ 0x0
   452                           
   453  0020                     setPin@ucPort:	
   454                           ; 4 bytes @ 0x0
   455                           
   456  0020                     clearPin@ucPort:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0020                     ___awdiv@divisor:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0020                     ___awmod@divisor:	
   463                           ; 2 bytes @ 0x0
   464                           
   465  0020                     ___lwdiv@divisor:	
   466                           ; 2 bytes @ 0x0
   467                           
   468  0020                     ___lmul@multiplier:	
   469                           ; 2 bytes @ 0x0
   470                           
   471                           
   472                           ; 4 bytes @ 0x0
   473  0020                     	ds	1
   474  0021                     ??_setPin:
   475  0021                     ??_clearPin:	
   476                           ; 1 bytes @ 0x1
   477                           
   478                           
   479                           ; 1 bytes @ 0x1
   480  0021                     	ds	1
   481  0022                     ___awdiv@dividend:
   482  0022                     ___awmod@dividend:	
   483                           ; 2 bytes @ 0x2
   484                           
   485  0022                     ___lwdiv@dividend:	
   486                           ; 2 bytes @ 0x2
   487                           
   488                           
   489                           ; 2 bytes @ 0x2
   490  0022                     	ds	1
   491  0023                     setPin@ucPin:
   492  0023                     clearPin@ucPin:	
   493                           ; 1 bytes @ 0x3
   494                           
   495                           
   496                           ; 1 bytes @ 0x3
   497  0023                     	ds	1
   498  0024                     ??_shiftDisplays:
   499  0024                     ??___awdiv:	
   500                           ; 1 bytes @ 0x4
   501                           
   502  0024                     ??___awmod:	
   503                           ; 1 bytes @ 0x4
   504                           
   505  0024                     ??___lwdiv:	
   506                           ; 1 bytes @ 0x4
   507                           
   508  0024                     ___lmul@multiplicand:	
   509                           ; 1 bytes @ 0x4
   510                           
   511                           
   512                           ; 4 bytes @ 0x4
   513  0024                     	ds	1
   514  0025                     ___awdiv@counter:
   515  0025                     ___awmod@counter:	
   516                           ; 1 bytes @ 0x5
   517                           
   518  0025                     ___lwdiv@counter:	
   519                           ; 1 bytes @ 0x5
   520                           
   521                           
   522                           ; 1 bytes @ 0x5
   523  0025                     	ds	1
   524  0026                     ___awdiv@sign:
   525  0026                     ___awmod@sign:	
   526                           ; 1 bytes @ 0x6
   527                           
   528  0026                     ___lwdiv@quotient:	
   529                           ; 1 bytes @ 0x6
   530                           
   531                           
   532                           ; 2 bytes @ 0x6
   533  0026                     	ds	1
   534  0027                     ___awdiv@quotient:
   535                           
   536                           ; 2 bytes @ 0x7
   537  0027                     	ds	1
   538  0028                     ??___lmul:
   539                           
   540                           ; 1 bytes @ 0x8
   541  0028                     	ds	1
   542  0029                     ___lmul@product:
   543                           
   544                           ; 4 bytes @ 0x9
   545  0029                     	ds	4
   546  002D                     ?___llmod:
   547  002D                     ___llmod@divisor:	
   548                           ; 4 bytes @ 0xD
   549                           
   550                           
   551                           ; 4 bytes @ 0xD
   552  002D                     	ds	4
   553  0031                     ___llmod@dividend:
   554                           
   555                           ; 4 bytes @ 0x11
   556  0031                     	ds	4
   557  0035                     ??___llmod:
   558                           
   559                           ; 1 bytes @ 0x15
   560  0035                     	ds	1
   561  0036                     ___llmod@counter:
   562                           
   563                           ; 1 bytes @ 0x16
   564  0036                     	ds	1
   565  0037                     ?_randomNumber:
   566                           
   567                           ; 4 bytes @ 0x17
   568  0037                     	ds	4
   569  003B                     ??_randomNumber:
   570                           
   571                           ; 1 bytes @ 0x1B
   572  003B                     	ds	4
   573  003F                     ?___lwmod:
   574  003F                     ___lwmod@divisor:	
   575                           ; 2 bytes @ 0x1F
   576                           
   577                           
   578                           ; 2 bytes @ 0x1F
   579  003F                     	ds	2
   580  0041                     ___lwmod@dividend:
   581                           
   582                           ; 2 bytes @ 0x21
   583  0041                     	ds	2
   584  0043                     ??___lwmod:
   585                           
   586                           ; 1 bytes @ 0x23
   587  0043                     	ds	1
   588  0044                     ___lwmod@counter:
   589                           
   590                           ; 1 bytes @ 0x24
   591  0044                     	ds	1
   592  0045                     ?_writeCharOnDisplay:
   593  0045                     writeCharOnDisplay@ucDisplay:	
   594                           ; 1 bytes @ 0x25
   595                           
   596                           
   597                           ; 1 bytes @ 0x25
   598  0045                     	ds	1
   599  0046                     ??_writeCharOnDisplay:
   600                           
   601                           ; 1 bytes @ 0x26
   602  0046                     	ds	2
   603  0048                     writeCharOnDisplay@ucCharacter:
   604                           
   605                           ; 1 bytes @ 0x28
   606  0048                     	ds	1
   607  0049                     ??_rollDice:
   608                           
   609                           ; 1 bytes @ 0x29
   610  0049                     	ds	4
   611  004D                     rollDice@i:
   612                           
   613                           ; 1 bytes @ 0x2D
   614  004D                     	ds	1
   615  004E                     rollDice@ulTotal:
   616                           
   617                           ; 2 bytes @ 0x2E
   618  004E                     	ds	2
   619  0050                     ??_deviceStateMachine:
   620                           
   621                           ; 1 bytes @ 0x30
   622  0050                     	ds	3
   623  0053                     deviceStateMachine@ucButton:
   624                           
   625                           ; 1 bytes @ 0x33
   626  0053                     	ds	1
   627  0054                     ??_main:
   628                           
   629                           ; 1 bytes @ 0x34
   630  0054                     	ds	4
   631                           
   632                           	psect	maintext
   633  0133                     __pmaintext:	
   634 ;;
   635 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   636 ;;
   637 ;; *************** function _main *****************
   638 ;; Defined at:
   639 ;;		line 74 in file "main.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;		None
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  i               1    0[BANK1 ] unsigned char 
   644 ;; Return value:  Size  Location     Type
   645 ;;                  1    wreg      void 
   646 ;; Registers used:
   647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   648 ;; Tracked objects:
   649 ;;		On entry : B00/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMMON   BANK0   BANK1
   653 ;;      Params:         0       0       0
   654 ;;      Locals:         0       0       1
   655 ;;      Temps:          0       4       0
   656 ;;      Totals:         0       4       1
   657 ;;Total ram usage:        5 bytes
   658 ;; Hardware stack levels required when called: 5
   659 ;; This function calls:
   660 ;;		___llmod
   661 ;;		_configBoard
   662 ;;		_deviceStateMachine
   663 ;;		_initButtons
   664 ;;		_initDisplay
   665 ;;		_randomNumber
   666 ;;		_shiftDisplays
   667 ;; This function is called by:
   668 ;;		Startup code after reset
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           
   673                           ;psect for function _main
   674  0133                     _main:
   675  0133                     l2450:	
   676                           ;incstack = 0
   677                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   678                           
   679                           
   680                           ;main.c: 77:     configBoard();
   681  0133  2644               	fcall	_configBoard
   682                           
   683                           ;main.c: 81:     initDisplay();
   684  0134  2764               	fcall	_initDisplay
   685                           
   686                           ;main.c: 82:     initButtons();
   687  0135  273C               	fcall	_initButtons
   688  0136                     l51:	
   689                           ;main.c: 88:         while(1){
   690                           
   691                           
   692                           ;main.c: 91:         if(0 == (uiCounterms%5)){
   693  0136  3000               	movlw	0
   694  0137  1283               	bcf	3,5	;RP0=0, select bank0
   695  0138  1303               	bcf	3,6	;RP1=0, select bank0
   696  0139  00B0               	movwf	___llmod@divisor+3
   697  013A  3000               	movlw	0
   698  013B  00AF               	movwf	___llmod@divisor+2
   699  013C  3000               	movlw	0
   700  013D  00AE               	movwf	___llmod@divisor+1
   701  013E  3005               	movlw	5
   702  013F  00AD               	movwf	___llmod@divisor
   703  0140  0863               	movf	_uiCounterms+3,w
   704  0141  00B4               	movwf	___llmod@dividend+3
   705  0142  0862               	movf	_uiCounterms+2,w
   706  0143  00B3               	movwf	___llmod@dividend+2
   707  0144  0861               	movf	_uiCounterms+1,w
   708  0145  00B2               	movwf	___llmod@dividend+1
   709  0146  0860               	movf	_uiCounterms,w
   710  0147  00B1               	movwf	___llmod@dividend
   711  0148  24C8               	fcall	___llmod
   712  0149  1283               	bcf	3,5	;RP0=0, select bank0
   713  014A  1303               	bcf	3,6	;RP1=0, select bank0
   714  014B  0830               	movf	?___llmod+3,w
   715  014C  042F               	iorwf	?___llmod+2,w
   716  014D  042E               	iorwf	?___llmod+1,w
   717  014E  042D               	iorwf	?___llmod,w
   718  014F  1D03               	skipz
   719  0150  2952               	goto	u2131
   720  0151  2953               	goto	u2130
   721  0152                     u2131:
   722  0152  2954               	goto	l2454
   723  0153                     u2130:
   724  0153                     l2452:
   725                           
   726                           ;main.c: 92:             shiftDisplays();
   727  0153  2707               	fcall	_shiftDisplays
   728  0154                     l2454:
   729                           
   730                           ;main.c: 96:             if((readButtonStatus[0] != Botoes[0].status) && readButtonStatu
      +                          s[0] == 0){
   731  0154  1683               	bsf	3,5	;RP0=1, select bank1
   732  0155  1303               	bcf	3,6	;RP1=0, select bank1
   733  0156  0821               	movf	(_Botoes^(0+128)+1),w
   734  0157  1283               	bcf	3,5	;RP0=0, select bank0
   735  0158  1303               	bcf	3,6	;RP1=0, select bank0
   736  0159  0668               	xorwf	_readButtonStatus,w
   737  015A  1903               	skipnz
   738  015B  295D               	goto	u2141
   739  015C  295E               	goto	u2140
   740  015D                     u2141:
   741  015D  298C               	goto	l2462
   742  015E                     u2140:
   743  015E                     l2456:
   744  015E  0868               	movf	_readButtonStatus,w
   745  015F  1D03               	btfss	3,2
   746  0160  2962               	goto	u2151
   747  0161  2963               	goto	u2150
   748  0162                     u2151:
   749  0162  298C               	goto	l2462
   750  0163                     u2150:
   751  0163                     l2458:
   752                           
   753                           ;main.c: 97:                 randomSeed = uiCounterms + 47;
   754  0163  302F               	movlw	47
   755  0164  00D4               	movwf	??_main
   756  0165  3000               	movlw	0
   757  0166  00D5               	movwf	??_main+1
   758  0167  3000               	movlw	0
   759  0168  00D6               	movwf	??_main+2
   760  0169  3000               	movlw	0
   761  016A  00D7               	movwf	??_main+3
   762  016B  0860               	movf	_uiCounterms,w
   763  016C  07D4               	addwf	??_main,f
   764  016D  0861               	movf	_uiCounterms+1,w
   765  016E  1803               	skipnc
   766  016F  0F61               	incfsz	_uiCounterms+1,w
   767  0170  2972               	goto	u2160
   768  0171  2973               	goto	u2161
   769  0172                     u2160:
   770  0172  07D5               	addwf	??_main+1,f
   771  0173                     u2161:
   772  0173  0862               	movf	_uiCounterms+2,w
   773  0174  1803               	skipnc
   774  0175  0F62               	incfsz	_uiCounterms+2,w
   775  0176  2978               	goto	u2162
   776  0177  2979               	goto	u2163
   777  0178                     u2162:
   778  0178  07D6               	addwf	??_main+2,f
   779  0179                     u2163:
   780  0179  0863               	movf	_uiCounterms+3,w
   781  017A  1803               	skipnc
   782  017B  0A63               	incf	_uiCounterms+3,w
   783  017C  07D7               	addwf	??_main+3,f
   784  017D  0857               	movf	??_main+3,w
   785  017E  00E7               	movwf	_randomSeed+3
   786  017F  0856               	movf	??_main+2,w
   787  0180  00E6               	movwf	_randomSeed+2
   788  0181  0855               	movf	??_main+1,w
   789  0182  00E5               	movwf	_randomSeed+1
   790  0183  0854               	movf	??_main,w
   791  0184  00E4               	movwf	_randomSeed
   792                           
   793                           ;main.c: 98:                 Botoes[0].status = readButtonStatus[0];
   794  0185  0868               	movf	_readButtonStatus,w
   795  0186  00D4               	movwf	??_main
   796  0187  0854               	movf	??_main,w
   797  0188  1683               	bsf	3,5	;RP0=1, select bank1
   798  0189  1303               	bcf	3,6	;RP1=0, select bank1
   799  018A  00A1               	movwf	(_Botoes^(0+128)+1)
   800                           
   801                           ;main.c: 99:                 break;
   802  018B  29A2               	goto	l2468
   803  018C                     l2462:
   804  018C  1683               	bsf	3,5	;RP0=1, select bank1
   805  018D  1303               	bcf	3,6	;RP1=0, select bank1
   806  018E  0821               	movf	(_Botoes^(0+128)+1),w
   807  018F  1283               	bcf	3,5	;RP0=0, select bank0
   808  0190  1303               	bcf	3,6	;RP1=0, select bank0
   809  0191  0668               	xorwf	_readButtonStatus,w
   810  0192  1903               	skipnz
   811  0193  2995               	goto	u2171
   812  0194  2996               	goto	u2170
   813  0195                     u2171:
   814  0195  2936               	goto	l51
   815  0196                     u2170:
   816  0196                     l2464:
   817  0196  0368               	decf	_readButtonStatus,w
   818  0197  1D03               	btfss	3,2
   819  0198  299A               	goto	u2181
   820  0199  299B               	goto	u2180
   821  019A                     u2181:
   822  019A  2936               	goto	l51
   823  019B                     u2180:
   824  019B                     l2466:
   825                           
   826                           ;main.c: 101:                 Botoes[0].status = readButtonStatus[0];
   827  019B  0868               	movf	_readButtonStatus,w
   828  019C  00D4               	movwf	??_main
   829  019D  0854               	movf	??_main,w
   830  019E  1683               	bsf	3,5	;RP0=1, select bank1
   831  019F  1303               	bcf	3,6	;RP1=0, select bank1
   832  01A0  00A1               	movwf	(_Botoes^(0+128)+1)
   833  01A1  2936               	goto	l51
   834  01A2                     l2468:
   835                           
   836                           ;main.c: 106:      randomNumber();
   837  01A2  251E               	fcall	_randomNumber
   838                           
   839                           ;main.c: 107:      randomNumber();
   840  01A3  251E               	fcall	_randomNumber
   841  01A4                     l58:	
   842                           ;main.c: 109:      while(1){
   843                           
   844                           
   845                           ;main.c: 112:         if(0 == (uiCounterms%5)){
   846  01A4  3000               	movlw	0
   847  01A5  1283               	bcf	3,5	;RP0=0, select bank0
   848  01A6  1303               	bcf	3,6	;RP1=0, select bank0
   849  01A7  00B0               	movwf	___llmod@divisor+3
   850  01A8  3000               	movlw	0
   851  01A9  00AF               	movwf	___llmod@divisor+2
   852  01AA  3000               	movlw	0
   853  01AB  00AE               	movwf	___llmod@divisor+1
   854  01AC  3005               	movlw	5
   855  01AD  00AD               	movwf	___llmod@divisor
   856  01AE  0863               	movf	_uiCounterms+3,w
   857  01AF  00B4               	movwf	___llmod@dividend+3
   858  01B0  0862               	movf	_uiCounterms+2,w
   859  01B1  00B3               	movwf	___llmod@dividend+2
   860  01B2  0861               	movf	_uiCounterms+1,w
   861  01B3  00B2               	movwf	___llmod@dividend+1
   862  01B4  0860               	movf	_uiCounterms,w
   863  01B5  00B1               	movwf	___llmod@dividend
   864  01B6  24C8               	fcall	___llmod
   865  01B7  1283               	bcf	3,5	;RP0=0, select bank0
   866  01B8  1303               	bcf	3,6	;RP1=0, select bank0
   867  01B9  0830               	movf	?___llmod+3,w
   868  01BA  042F               	iorwf	?___llmod+2,w
   869  01BB  042E               	iorwf	?___llmod+1,w
   870  01BC  042D               	iorwf	?___llmod,w
   871  01BD  1D03               	skipz
   872  01BE  29C0               	goto	u2191
   873  01BF  29C1               	goto	u2190
   874  01C0                     u2191:
   875  01C0  29C2               	goto	l2472
   876  01C1                     u2190:
   877  01C1                     l2470:
   878                           
   879                           ;main.c: 113:             shiftDisplays();
   880  01C1  2707               	fcall	_shiftDisplays
   881  01C2                     l2472:
   882                           
   883                           ;main.c: 116:         unsigned char i;;main.c: 119:         for (i = 0; i < 5; i++){
   884  01C2  1683               	bsf	3,5	;RP0=1, select bank1
   885  01C3  1303               	bcf	3,6	;RP1=0, select bank1
   886  01C4  01AA               	clrf	main@i^(0+128)
   887  01C5                     l2478:
   888                           
   889                           ;main.c: 121:             if((readButtonStatus[i] != Botoes[i].status) && readButtonStat
      +                          us[i] == 0){
   890  01C5  082A               	movf	main@i^(0+128),w
   891  01C6  3E68               	addlw	(low (_readButtonStatus| 0))& (0+255)
   892  01C7  0084               	movwf	4
   893  01C8  1383               	bcf	3,7	;select IRP bank0
   894  01C9  0800               	movf	0,w
   895  01CA  1283               	bcf	3,5	;RP0=0, select bank0
   896  01CB  1303               	bcf	3,6	;RP1=0, select bank0
   897  01CC  00D4               	movwf	??_main
   898  01CD  1683               	bsf	3,5	;RP0=1, select bank1
   899  01CE  1303               	bcf	3,6	;RP1=0, select bank1
   900  01CF  082A               	movf	main@i^(0+128),w
   901  01D0  1283               	bcf	3,5	;RP0=0, select bank0
   902  01D1  1303               	bcf	3,6	;RP1=0, select bank0
   903  01D2  00D5               	movwf	??_main+1
   904  01D3  0755               	addwf	??_main+1,w
   905  01D4  3EA1               	addlw	(low ((_Botoes| 0+1)))& (0+255)
   906  01D5  0084               	movwf	4
   907  01D6  0800               	movf	0,w
   908  01D7  0654               	xorwf	??_main,w
   909  01D8  1903               	skipnz
   910  01D9  29DB               	goto	u2201
   911  01DA  29DC               	goto	u2200
   912  01DB                     u2201:
   913  01DB  29FF               	goto	l2486
   914  01DC                     u2200:
   915  01DC                     l2480:
   916  01DC  1683               	bsf	3,5	;RP0=1, select bank1
   917  01DD  1303               	bcf	3,6	;RP1=0, select bank1
   918  01DE  082A               	movf	main@i^(0+128),w
   919  01DF  3E68               	addlw	(low (_readButtonStatus| 0))& (0+255)
   920  01E0  0084               	movwf	4
   921  01E1  0800               	movf	0,w
   922  01E2  1D03               	btfss	3,2
   923  01E3  29E5               	goto	u2211
   924  01E4  29E6               	goto	u2210
   925  01E5                     u2211:
   926  01E5  29FF               	goto	l2486
   927  01E6                     u2210:
   928  01E6                     l2482:
   929                           
   930                           ;main.c: 122:                 deviceStateMachine(i + 1);
   931  01E6  082A               	movf	main@i^(0+128),w
   932  01E7  3E01               	addlw	1
   933  01E8  202A               	fcall	_deviceStateMachine
   934  01E9                     l2484:
   935                           
   936                           ;main.c: 123:                 Botoes[i].status = readButtonStatus[i];
   937  01E9  1683               	bsf	3,5	;RP0=1, select bank1
   938  01EA  1303               	bcf	3,6	;RP1=0, select bank1
   939  01EB  082A               	movf	main@i^(0+128),w
   940  01EC  3E68               	addlw	(low (_readButtonStatus| 0))& (0+255)
   941  01ED  0084               	movwf	4
   942  01EE  1383               	bcf	3,7	;select IRP bank0
   943  01EF  0800               	movf	0,w
   944  01F0  1283               	bcf	3,5	;RP0=0, select bank0
   945  01F1  1303               	bcf	3,6	;RP1=0, select bank0
   946  01F2  00D4               	movwf	??_main
   947  01F3  1683               	bsf	3,5	;RP0=1, select bank1
   948  01F4  1303               	bcf	3,6	;RP1=0, select bank1
   949  01F5  082A               	movf	main@i^(0+128),w
   950  01F6  1283               	bcf	3,5	;RP0=0, select bank0
   951  01F7  1303               	bcf	3,6	;RP1=0, select bank0
   952  01F8  00D5               	movwf	??_main+1
   953  01F9  0755               	addwf	??_main+1,w
   954  01FA  3EA1               	addlw	(low ((_Botoes| 0+1)))& (0+255)
   955  01FB  0084               	movwf	4
   956  01FC  0854               	movf	??_main,w
   957  01FD  0080               	movwf	0
   958                           
   959                           ;main.c: 124:             }else if((readButtonStatus[i] != Botoes[i].status) && readButt
      +                          onStatus[i] == 1){
   960  01FE  2A22               	goto	l2492
   961  01FF                     l2486:
   962  01FF  1683               	bsf	3,5	;RP0=1, select bank1
   963  0200  1303               	bcf	3,6	;RP1=0, select bank1
   964  0201  082A               	movf	main@i^(0+128),w
   965  0202  3E68               	addlw	(low (_readButtonStatus| 0))& (0+255)
   966  0203  0084               	movwf	4
   967  0204  0800               	movf	0,w
   968  0205  1283               	bcf	3,5	;RP0=0, select bank0
   969  0206  1303               	bcf	3,6	;RP1=0, select bank0
   970  0207  00D4               	movwf	??_main
   971  0208  1683               	bsf	3,5	;RP0=1, select bank1
   972  0209  1303               	bcf	3,6	;RP1=0, select bank1
   973  020A  082A               	movf	main@i^(0+128),w
   974  020B  1283               	bcf	3,5	;RP0=0, select bank0
   975  020C  1303               	bcf	3,6	;RP1=0, select bank0
   976  020D  00D5               	movwf	??_main+1
   977  020E  0755               	addwf	??_main+1,w
   978  020F  3EA1               	addlw	(low ((_Botoes| 0+1)))& (0+255)
   979  0210  0084               	movwf	4
   980  0211  0800               	movf	0,w
   981  0212  0654               	xorwf	??_main,w
   982  0213  1903               	skipnz
   983  0214  2A16               	goto	u2221
   984  0215  2A17               	goto	u2220
   985  0216                     u2221:
   986  0216  2A22               	goto	l2492
   987  0217                     u2220:
   988  0217                     l2488:
   989  0217  1683               	bsf	3,5	;RP0=1, select bank1
   990  0218  1303               	bcf	3,6	;RP1=0, select bank1
   991  0219  082A               	movf	main@i^(0+128),w
   992  021A  3E68               	addlw	(low (_readButtonStatus| 0))& (0+255)
   993  021B  0084               	movwf	4
   994  021C  0300               	decf	0,w
   995  021D  1D03               	btfss	3,2
   996  021E  2A20               	goto	u2231
   997  021F  2A21               	goto	u2230
   998  0220                     u2231:
   999  0220  2A22               	goto	l2492
  1000  0221                     u2230:
  1001  0221  29E9               	goto	l2484
  1002  0222                     l2492:
  1003                           
  1004                           ;main.c: 127:         }
  1005  0222  3001               	movlw	1
  1006  0223  1283               	bcf	3,5	;RP0=0, select bank0
  1007  0224  00D4               	movwf	??_main
  1008  0225  0854               	movf	??_main,w
  1009  0226  1683               	bsf	3,5	;RP0=1, select bank1
  1010  0227  1303               	bcf	3,6	;RP1=0, select bank1
  1011  0228  07AA               	addwf	main@i^(0+128),f
  1012  0229                     l2494:
  1013  0229  3005               	movlw	5
  1014  022A  022A               	subwf	main@i^(0+128),w
  1015  022B  1C03               	skipc
  1016  022C  2A2E               	goto	u2241
  1017  022D  2A2F               	goto	u2240
  1018  022E                     u2241:
  1019  022E  29C5               	goto	l2478
  1020  022F                     u2240:
  1021  022F  29A4               	goto	l58
  1022  0230  280A               	ljmp	start
  1023  0231                     __end_of_main:
  1024                           
  1025                           	psect	text1
  1026  0707                     __ptext1:	
  1027 ;; *************** function _shiftDisplays *****************
  1028 ;; Defined at:
  1029 ;;		line 26 in file "utils.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;		None
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;		None
  1034 ;; Return value:  Size  Location     Type
  1035 ;;                  1    wreg      void 
  1036 ;; Registers used:
  1037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1038 ;; Tracked objects:
  1039 ;;		On entry : 0/0
  1040 ;;		On exit  : 0/0
  1041 ;;		Unchanged: 0/0
  1042 ;; Data sizes:     COMMON   BANK0   BANK1
  1043 ;;      Params:         0       0       0
  1044 ;;      Locals:         0       0       0
  1045 ;;      Temps:          0       1       0
  1046 ;;      Totals:         0       1       0
  1047 ;;Total ram usage:        1 bytes
  1048 ;; Hardware stack levels used: 1
  1049 ;; Hardware stack levels required when called: 2
  1050 ;; This function calls:
  1051 ;;		_clearPin
  1052 ;;		_setPin
  1053 ;; This function is called by:
  1054 ;;		_main
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           
  1059                           ;psect for function _shiftDisplays
  1060  0707                     _shiftDisplays:
  1061  0707                     l2360:	
  1062                           ;incstack = 0
  1063                           ; Regs used in _shiftDisplays: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1064                           
  1065                           
  1066                           ;utils.c: 29:     setPin(Display7seg4digitsVetor[indiceDisplay].pin, 1);
  1067  0707  1283               	bcf	3,5	;RP0=0, select bank0
  1068  0708  1303               	bcf	3,6	;RP1=0, select bank0
  1069  0709  01A0               	clrf	setPin@ucPort
  1070  070A  0AA0               	incf	setPin@ucPort,f
  1071  070B  0874               	movf	_indiceDisplay,w
  1072  070C  00A4               	movwf	??_shiftDisplays
  1073  070D  0724               	addwf	??_shiftDisplays,w
  1074  070E  3E58               	addlw	(low (_Display7seg4digitsVetor| 0))& (0+255)
  1075  070F  0084               	movwf	4
  1076  0710  1383               	bcf	3,7	;select IRP bank0
  1077  0711  0800               	movf	0,w
  1078  0712  2689               	fcall	_setPin
  1079  0713                     l2362:
  1080                           
  1081                           ;utils.c: 32:     if(++indiceDisplay > 3){
  1082  0713  3001               	movlw	1
  1083  0714  07F4               	addwf	_indiceDisplay,f
  1084  0715  1803               	skipnc
  1085  0716  0AF5               	incf	_indiceDisplay+1,f
  1086  0717  3000               	movlw	0
  1087  0718  07F5               	addwf	_indiceDisplay+1,f
  1088  0719  0875               	movf	_indiceDisplay+1,w
  1089  071A  3A80               	xorlw	128
  1090  071B  00FF               	movwf	btemp+1
  1091  071C  3080               	movlw	128
  1092  071D  027F               	subwf	btemp+1,w
  1093  071E  1D03               	skipz
  1094  071F  2F22               	goto	u2065
  1095  0720  3004               	movlw	4
  1096  0721  0274               	subwf	_indiceDisplay,w
  1097  0722                     u2065:
  1098  0722  1C03               	skipc
  1099  0723  2F25               	goto	u2061
  1100  0724  2F26               	goto	u2060
  1101  0725                     u2061:
  1102  0725  2F28               	goto	l2366
  1103  0726                     u2060:
  1104  0726                     l2364:
  1105                           
  1106                           ;utils.c: 33:         indiceDisplay = 0;
  1107  0726  01F4               	clrf	_indiceDisplay
  1108  0727  01F5               	clrf	_indiceDisplay+1
  1109  0728                     l2366:
  1110                           
  1111                           ;utils.c: 37:     PORTC = (Display7seg4digitsVetor[indiceDisplay].data);
  1112  0728  0874               	movf	_indiceDisplay,w
  1113  0729  1283               	bcf	3,5	;RP0=0, select bank0
  1114  072A  1303               	bcf	3,6	;RP1=0, select bank0
  1115  072B  00A4               	movwf	??_shiftDisplays
  1116  072C  0724               	addwf	??_shiftDisplays,w
  1117  072D  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  1118  072E  0084               	movwf	4
  1119  072F  1383               	bcf	3,7	;select IRP bank0
  1120  0730  0800               	movf	0,w
  1121  0731  0087               	movwf	7	;volatile
  1122  0732                     l2368:
  1123                           
  1124                           ;utils.c: 40:     clearPin(Display7seg4digitsVetor[indiceDisplay].pin, 1);
  1125  0732  01A0               	clrf	clearPin@ucPort
  1126  0733  0AA0               	incf	clearPin@ucPort,f
  1127  0734  0874               	movf	_indiceDisplay,w
  1128  0735  00A4               	movwf	??_shiftDisplays
  1129  0736  0724               	addwf	??_shiftDisplays,w
  1130  0737  3E58               	addlw	(low (_Display7seg4digitsVetor| 0))& (0+255)
  1131  0738  0084               	movwf	4
  1132  0739  0800               	movf	0,w
  1133  073A  25FF               	fcall	_clearPin
  1134  073B                     l135:
  1135  073B  0008               	return
  1136  073C                     __end_of_shiftDisplays:
  1137                           
  1138                           	psect	text2
  1139  0689                     __ptext2:	
  1140 ;; *************** function _setPin *****************
  1141 ;; Defined at:
  1142 ;;		line 230 in file "utils.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;  ucPin           1    wreg     unsigned char 
  1145 ;;  ucPort          1    0[BANK0 ] unsigned char 
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;  ucPin           1    3[BANK0 ] unsigned char 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  1    wreg      void 
  1150 ;; Registers used:
  1151 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMMON   BANK0   BANK1
  1157 ;;      Params:         0       1       0
  1158 ;;      Locals:         0       1       0
  1159 ;;      Temps:          0       2       0
  1160 ;;      Totals:         0       4       0
  1161 ;;Total ram usage:        4 bytes
  1162 ;; Hardware stack levels used: 1
  1163 ;; Hardware stack levels required when called: 1
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		_shiftDisplays
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           
  1172                           ;psect for function _setPin
  1173  0689                     _setPin:
  1174                           
  1175                           ;incstack = 0
  1176                           ; Regs used in _setPin: [wreg-fsr0h+status,2+status,0]
  1177                           ;setPin@ucPin stored from wreg
  1178  0689  1283               	bcf	3,5	;RP0=0, select bank0
  1179  068A  1303               	bcf	3,6	;RP1=0, select bank0
  1180  068B  00A3               	movwf	setPin@ucPin
  1181  068C                     l2156:
  1182                           
  1183                           ;utils.c: 233:     switch(ucPort){
  1184  068C  2EB7               	goto	l2168
  1185  068D                     l2158:
  1186                           
  1187                           ;utils.c: 235:                 PORTA |= (1<<ucPin);
  1188  068D  3001               	movlw	1
  1189  068E  00A1               	movwf	??_setPin
  1190  068F  0A23               	incf	setPin@ucPin,w
  1191  0690  2E93               	goto	u1804
  1192  0691                     u1805:
  1193  0691  1003               	clrc
  1194  0692  0DA1               	rlf	??_setPin,f
  1195  0693                     u1804:
  1196  0693  3EFF               	addlw	-1
  1197  0694  1D03               	skipz
  1198  0695  2E91               	goto	u1805
  1199  0696  0821               	movf	??_setPin,w
  1200  0697  00A2               	movwf	??_setPin+1
  1201  0698  0822               	movf	??_setPin+1,w
  1202  0699  0485               	iorwf	5,f	;volatile
  1203                           
  1204                           ;utils.c: 236:             break;
  1205  069A  2ECA               	goto	l169
  1206  069B                     l2160:
  1207                           
  1208                           ;utils.c: 238:                 PORTB |= (1<<ucPin);
  1209  069B  3001               	movlw	1
  1210  069C  00A1               	movwf	??_setPin
  1211  069D  0A23               	incf	setPin@ucPin,w
  1212  069E  2EA1               	goto	u1814
  1213  069F                     u1815:
  1214  069F  1003               	clrc
  1215  06A0  0DA1               	rlf	??_setPin,f
  1216  06A1                     u1814:
  1217  06A1  3EFF               	addlw	-1
  1218  06A2  1D03               	skipz
  1219  06A3  2E9F               	goto	u1815
  1220  06A4  0821               	movf	??_setPin,w
  1221  06A5  00A2               	movwf	??_setPin+1
  1222  06A6  0822               	movf	??_setPin+1,w
  1223  06A7  0486               	iorwf	6,f	;volatile
  1224                           
  1225                           ;utils.c: 239:             break;
  1226  06A8  2ECA               	goto	l169
  1227  06A9                     l2162:
  1228                           
  1229                           ;utils.c: 241:                 PORTC |= (1<<ucPin);
  1230  06A9  3001               	movlw	1
  1231  06AA  00A1               	movwf	??_setPin
  1232  06AB  0A23               	incf	setPin@ucPin,w
  1233  06AC  2EAF               	goto	u1824
  1234  06AD                     u1825:
  1235  06AD  1003               	clrc
  1236  06AE  0DA1               	rlf	??_setPin,f
  1237  06AF                     u1824:
  1238  06AF  3EFF               	addlw	-1
  1239  06B0  1D03               	skipz
  1240  06B1  2EAD               	goto	u1825
  1241  06B2  0821               	movf	??_setPin,w
  1242  06B3  00A2               	movwf	??_setPin+1
  1243  06B4  0822               	movf	??_setPin+1,w
  1244  06B5  0487               	iorwf	7,f	;volatile
  1245                           
  1246                           ;utils.c: 242:             break;
  1247  06B6  2ECA               	goto	l169
  1248  06B7                     l2168:
  1249  06B7  0820               	movf	setPin@ucPort,w
  1250  06B8  00A1               	movwf	??_setPin
  1251  06B9  01A2               	clrf	??_setPin+1
  1252                           
  1253                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1254                           ; Switch size 1, requested type "simple"
  1255                           ; Number of cases is 1, Range of values is 0 to 0
  1256                           ; switch strategies available:
  1257                           ; Name         Instructions Cycles
  1258                           ; simple_byte            4     3 (average)
  1259                           ; direct_byte            7     6 (fixed)
  1260                           ; jumptable            260     6 (fixed)
  1261                           ;	Chosen strategy is simple_byte
  1262  06BA  0822               	movf	??_setPin+1,w
  1263  06BB  3A00               	xorlw	0	; case 0
  1264  06BC  1903               	skipnz
  1265  06BD  2EBF               	goto	l2646
  1266  06BE  2ECA               	goto	l169
  1267  06BF                     l2646:
  1268                           
  1269                           ; Switch size 1, requested type "simple"
  1270                           ; Number of cases is 3, Range of values is 0 to 2
  1271                           ; switch strategies available:
  1272                           ; Name         Instructions Cycles
  1273                           ; direct_byte            9     6 (fixed)
  1274                           ; simple_byte           10     6 (average)
  1275                           ; jumptable            260     6 (fixed)
  1276                           ;	Chosen strategy is simple_byte
  1277  06BF  0821               	movf	??_setPin,w
  1278  06C0  3A00               	xorlw	0	; case 0
  1279  06C1  1903               	skipnz
  1280  06C2  2E8D               	goto	l2158
  1281  06C3  3A01               	xorlw	1	; case 1
  1282  06C4  1903               	skipnz
  1283  06C5  2E9B               	goto	l2160
  1284  06C6  3A03               	xorlw	3	; case 2
  1285  06C7  1903               	skipnz
  1286  06C8  2EA9               	goto	l2162
  1287  06C9  2ECA               	goto	l169
  1288  06CA                     l169:
  1289  06CA  0008               	return
  1290  06CB                     __end_of_setPin:
  1291                           
  1292                           	psect	text3
  1293  05FF                     __ptext3:	
  1294 ;; *************** function _clearPin *****************
  1295 ;; Defined at:
  1296 ;;		line 257 in file "utils.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  ucPin           1    wreg     unsigned char 
  1299 ;;  ucPort          1    0[BANK0 ] unsigned char 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  ucPin           1    3[BANK0 ] unsigned char 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  1    wreg      void 
  1304 ;; Registers used:
  1305 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMMON   BANK0   BANK1
  1311 ;;      Params:         0       1       0
  1312 ;;      Locals:         0       1       0
  1313 ;;      Temps:          0       2       0
  1314 ;;      Totals:         0       4       0
  1315 ;;Total ram usage:        4 bytes
  1316 ;; Hardware stack levels used: 1
  1317 ;; Hardware stack levels required when called: 1
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_shiftDisplays
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           
  1326                           ;psect for function _clearPin
  1327  05FF                     _clearPin:
  1328                           
  1329                           ;incstack = 0
  1330                           ; Regs used in _clearPin: [wreg-fsr0h+status,2+status,0]
  1331                           ;clearPin@ucPin stored from wreg
  1332  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  1333  0600  1303               	bcf	3,6	;RP1=0, select bank0
  1334  0601  00A3               	movwf	clearPin@ucPin
  1335  0602                     l2176:
  1336                           
  1337                           ;utils.c: 259:     switch(ucPort){
  1338  0602  2E30               	goto	l2188
  1339  0603                     l2178:
  1340                           
  1341                           ;utils.c: 261:                 PORTA &= ~(1<<ucPin);
  1342  0603  3001               	movlw	1
  1343  0604  00A1               	movwf	??_clearPin
  1344  0605  0A23               	incf	clearPin@ucPin,w
  1345  0606  2E09               	goto	u1834
  1346  0607                     u1835:
  1347  0607  1003               	clrc
  1348  0608  0DA1               	rlf	??_clearPin,f
  1349  0609                     u1834:
  1350  0609  3EFF               	addlw	-1
  1351  060A  1D03               	skipz
  1352  060B  2E07               	goto	u1835
  1353  060C  0821               	movf	??_clearPin,w
  1354  060D  3AFF               	xorlw	255
  1355  060E  00A2               	movwf	??_clearPin+1
  1356  060F  0822               	movf	??_clearPin+1,w
  1357  0610  0585               	andwf	5,f	;volatile
  1358                           
  1359                           ;utils.c: 262:             break;
  1360  0611  2E43               	goto	l178
  1361  0612                     l2180:
  1362                           
  1363                           ;utils.c: 264:                 PORTB &= ~(1<<ucPin);
  1364  0612  3001               	movlw	1
  1365  0613  00A1               	movwf	??_clearPin
  1366  0614  0A23               	incf	clearPin@ucPin,w
  1367  0615  2E18               	goto	u1844
  1368  0616                     u1845:
  1369  0616  1003               	clrc
  1370  0617  0DA1               	rlf	??_clearPin,f
  1371  0618                     u1844:
  1372  0618  3EFF               	addlw	-1
  1373  0619  1D03               	skipz
  1374  061A  2E16               	goto	u1845
  1375  061B  0821               	movf	??_clearPin,w
  1376  061C  3AFF               	xorlw	255
  1377  061D  00A2               	movwf	??_clearPin+1
  1378  061E  0822               	movf	??_clearPin+1,w
  1379  061F  0586               	andwf	6,f	;volatile
  1380                           
  1381                           ;utils.c: 265:             break;
  1382  0620  2E43               	goto	l178
  1383  0621                     l2182:
  1384                           
  1385                           ;utils.c: 267:                 PORTC &= ~(1<<ucPin);
  1386  0621  3001               	movlw	1
  1387  0622  00A1               	movwf	??_clearPin
  1388  0623  0A23               	incf	clearPin@ucPin,w
  1389  0624  2E27               	goto	u1854
  1390  0625                     u1855:
  1391  0625  1003               	clrc
  1392  0626  0DA1               	rlf	??_clearPin,f
  1393  0627                     u1854:
  1394  0627  3EFF               	addlw	-1
  1395  0628  1D03               	skipz
  1396  0629  2E25               	goto	u1855
  1397  062A  0821               	movf	??_clearPin,w
  1398  062B  3AFF               	xorlw	255
  1399  062C  00A2               	movwf	??_clearPin+1
  1400  062D  0822               	movf	??_clearPin+1,w
  1401  062E  0587               	andwf	7,f	;volatile
  1402                           
  1403                           ;utils.c: 268:             break;
  1404  062F  2E43               	goto	l178
  1405  0630                     l2188:
  1406  0630  0820               	movf	clearPin@ucPort,w
  1407  0631  00A1               	movwf	??_clearPin
  1408  0632  01A2               	clrf	??_clearPin+1
  1409                           
  1410                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1411                           ; Switch size 1, requested type "simple"
  1412                           ; Number of cases is 1, Range of values is 0 to 0
  1413                           ; switch strategies available:
  1414                           ; Name         Instructions Cycles
  1415                           ; simple_byte            4     3 (average)
  1416                           ; direct_byte            7     6 (fixed)
  1417                           ; jumptable            260     6 (fixed)
  1418                           ;	Chosen strategy is simple_byte
  1419  0633  0822               	movf	??_clearPin+1,w
  1420  0634  3A00               	xorlw	0	; case 0
  1421  0635  1903               	skipnz
  1422  0636  2E38               	goto	l2648
  1423  0637  2E43               	goto	l178
  1424  0638                     l2648:
  1425                           
  1426                           ; Switch size 1, requested type "simple"
  1427                           ; Number of cases is 3, Range of values is 0 to 2
  1428                           ; switch strategies available:
  1429                           ; Name         Instructions Cycles
  1430                           ; direct_byte            9     6 (fixed)
  1431                           ; simple_byte           10     6 (average)
  1432                           ; jumptable            260     6 (fixed)
  1433                           ;	Chosen strategy is simple_byte
  1434  0638  0821               	movf	??_clearPin,w
  1435  0639  3A00               	xorlw	0	; case 0
  1436  063A  1903               	skipnz
  1437  063B  2E03               	goto	l2178
  1438  063C  3A01               	xorlw	1	; case 1
  1439  063D  1903               	skipnz
  1440  063E  2E12               	goto	l2180
  1441  063F  3A03               	xorlw	3	; case 2
  1442  0640  1903               	skipnz
  1443  0641  2E21               	goto	l2182
  1444  0642  2E43               	goto	l178
  1445  0643                     l178:
  1446  0643  0008               	return
  1447  0644                     __end_of_clearPin:
  1448                           
  1449                           	psect	text4
  1450  0764                     __ptext4:	
  1451 ;; *************** function _initDisplay *****************
  1452 ;; Defined at:
  1453 ;;		line 49 in file "utils.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;		None
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;		None
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      void 
  1460 ;; Registers used:
  1461 ;;		wreg
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMMON   BANK0   BANK1
  1467 ;;      Params:         0       0       0
  1468 ;;      Locals:         0       0       0
  1469 ;;      Temps:          0       1       0
  1470 ;;      Totals:         0       1       0
  1471 ;;Total ram usage:        1 bytes
  1472 ;; Hardware stack levels used: 1
  1473 ;; Hardware stack levels required when called: 1
  1474 ;; This function calls:
  1475 ;;		Nothing
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           
  1482                           ;psect for function _initDisplay
  1483  0764                     _initDisplay:
  1484  0764                     l2338:	
  1485                           ;incstack = 0
  1486                           ; Regs used in _initDisplay: [wreg]
  1487                           
  1488                           
  1489                           ;utils.c: 52:     Display7seg4digitsVetor[0].data = 0b00000110;
  1490  0764  3006               	movlw	6
  1491  0765  1283               	bcf	3,5	;RP0=0, select bank0
  1492  0766  1303               	bcf	3,6	;RP1=0, select bank0
  1493  0767  00A0               	movwf	??_initDisplay
  1494  0768  0820               	movf	??_initDisplay,w
  1495  0769  00D9               	movwf	_Display7seg4digitsVetor+1
  1496                           
  1497                           ;utils.c: 53:     Display7seg4digitsVetor[0].pin = 4;
  1498  076A  3004               	movlw	4
  1499  076B  00A0               	movwf	??_initDisplay
  1500  076C  0820               	movf	??_initDisplay,w
  1501  076D  00D8               	movwf	_Display7seg4digitsVetor
  1502                           
  1503                           ;utils.c: 55:     Display7seg4digitsVetor[1].data = 0b01011110;
  1504  076E  305E               	movlw	94
  1505  076F  00A0               	movwf	??_initDisplay
  1506  0770  0820               	movf	??_initDisplay,w
  1507  0771  00DB               	movwf	_Display7seg4digitsVetor+3
  1508                           
  1509                           ;utils.c: 56:     Display7seg4digitsVetor[1].pin = 5;
  1510  0772  3005               	movlw	5
  1511  0773  00A0               	movwf	??_initDisplay
  1512  0774  0820               	movf	??_initDisplay,w
  1513  0775  00DA               	movwf	_Display7seg4digitsVetor+2
  1514                           
  1515                           ;utils.c: 58:     Display7seg4digitsVetor[2].data = 0b00111111;
  1516  0776  303F               	movlw	63
  1517  0777  00A0               	movwf	??_initDisplay
  1518  0778  0820               	movf	??_initDisplay,w
  1519  0779  00DD               	movwf	_Display7seg4digitsVetor+5
  1520                           
  1521                           ;utils.c: 59:     Display7seg4digitsVetor[2].pin = 6;
  1522  077A  3006               	movlw	6
  1523  077B  00A0               	movwf	??_initDisplay
  1524  077C  0820               	movf	??_initDisplay,w
  1525  077D  00DC               	movwf	_Display7seg4digitsVetor+4
  1526                           
  1527                           ;utils.c: 61:     Display7seg4digitsVetor[3].data = 0b01111101;
  1528  077E  307D               	movlw	125
  1529  077F  00A0               	movwf	??_initDisplay
  1530  0780  0820               	movf	??_initDisplay,w
  1531  0781  00DF               	movwf	_Display7seg4digitsVetor+7
  1532                           
  1533                           ;utils.c: 62:     Display7seg4digitsVetor[3].pin = 7;
  1534  0782  3007               	movlw	7
  1535  0783  00A0               	movwf	??_initDisplay
  1536  0784  0820               	movf	??_initDisplay,w
  1537  0785  00DE               	movwf	_Display7seg4digitsVetor+6
  1538  0786                     l138:
  1539  0786  0008               	return
  1540  0787                     __end_of_initDisplay:
  1541                           
  1542                           	psect	text5
  1543  073C                     __ptext5:	
  1544 ;; *************** function _initButtons *****************
  1545 ;; Defined at:
  1546 ;;		line 122 in file "utils.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;		None
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;		None
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, status,2
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMMON   BANK0   BANK1
  1560 ;;      Params:         0       0       0
  1561 ;;      Locals:         0       0       0
  1562 ;;      Temps:          0       1       0
  1563 ;;      Totals:         0       1       0
  1564 ;;Total ram usage:        1 bytes
  1565 ;; Hardware stack levels used: 1
  1566 ;; Hardware stack levels required when called: 1
  1567 ;; This function calls:
  1568 ;;		Nothing
  1569 ;; This function is called by:
  1570 ;;		_main
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           
  1575                           ;psect for function _initButtons
  1576  073C                     _initButtons:
  1577  073C                     l2340:	
  1578                           ;incstack = 0
  1579                           ; Regs used in _initButtons: [wreg+status,2]
  1580                           
  1581                           
  1582                           ;utils.c: 123:     Botoes[0].pin = 0;
  1583  073C  1683               	bsf	3,5	;RP0=1, select bank1
  1584  073D  1303               	bcf	3,6	;RP1=0, select bank1
  1585  073E  01A0               	clrf	_Botoes^(0+128)
  1586  073F                     l2342:
  1587                           
  1588                           ;utils.c: 124:     Botoes[0].status = 1;
  1589  073F  01A1               	clrf	(_Botoes^(0+128)+1)
  1590  0740  0AA1               	incf	(_Botoes^(0+128)+1),f
  1591  0741                     l2344:
  1592                           
  1593                           ;utils.c: 126:     Botoes[1].pin = 1;
  1594  0741  01A2               	clrf	(_Botoes^(0+128)+2)
  1595  0742  0AA2               	incf	(_Botoes^(0+128)+2),f
  1596  0743                     l2346:
  1597                           
  1598                           ;utils.c: 127:     Botoes[1].status = 1;
  1599  0743  01A3               	clrf	(_Botoes^(0+128)+3)
  1600  0744  0AA3               	incf	(_Botoes^(0+128)+3),f
  1601  0745                     l2348:
  1602                           
  1603                           ;utils.c: 129:     Botoes[2].pin = 2;
  1604  0745  3002               	movlw	2
  1605  0746  1283               	bcf	3,5	;RP0=0, select bank0
  1606  0747  1303               	bcf	3,6	;RP1=0, select bank0
  1607  0748  00A0               	movwf	??_initButtons
  1608  0749  0820               	movf	??_initButtons,w
  1609  074A  1683               	bsf	3,5	;RP0=1, select bank1
  1610  074B  1303               	bcf	3,6	;RP1=0, select bank1
  1611  074C  00A4               	movwf	(_Botoes^(0+128)+4)
  1612  074D                     l2350:
  1613                           
  1614                           ;utils.c: 130:     Botoes[2].status = 1;
  1615  074D  01A5               	clrf	(_Botoes^(0+128)+5)
  1616  074E  0AA5               	incf	(_Botoes^(0+128)+5),f
  1617  074F                     l2352:
  1618                           
  1619                           ;utils.c: 132:     Botoes[3].pin = 4;
  1620  074F  3004               	movlw	4
  1621  0750  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0751  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0752  00A0               	movwf	??_initButtons
  1624  0753  0820               	movf	??_initButtons,w
  1625  0754  1683               	bsf	3,5	;RP0=1, select bank1
  1626  0755  1303               	bcf	3,6	;RP1=0, select bank1
  1627  0756  00A6               	movwf	(_Botoes^(0+128)+6)
  1628  0757                     l2354:
  1629                           
  1630                           ;utils.c: 133:     Botoes[3].status = 1;
  1631  0757  01A7               	clrf	(_Botoes^(0+128)+7)
  1632  0758  0AA7               	incf	(_Botoes^(0+128)+7),f
  1633  0759                     l2356:
  1634                           
  1635                           ;utils.c: 135:     Botoes[4].pin = 5;
  1636  0759  3005               	movlw	5
  1637  075A  1283               	bcf	3,5	;RP0=0, select bank0
  1638  075B  1303               	bcf	3,6	;RP1=0, select bank0
  1639  075C  00A0               	movwf	??_initButtons
  1640  075D  0820               	movf	??_initButtons,w
  1641  075E  1683               	bsf	3,5	;RP0=1, select bank1
  1642  075F  1303               	bcf	3,6	;RP1=0, select bank1
  1643  0760  00A8               	movwf	(_Botoes^(0+128)+8)
  1644  0761                     l2358:
  1645                           
  1646                           ;utils.c: 136:     Botoes[4].status = 1;
  1647  0761  01A9               	clrf	(_Botoes^(0+128)+9)
  1648  0762  0AA9               	incf	(_Botoes^(0+128)+9),f
  1649  0763                     l157:
  1650  0763  0008               	return
  1651  0764                     __end_of_initButtons:
  1652                           
  1653                           	psect	text6
  1654  002A                     __ptext6:	
  1655 ;; *************** function _deviceStateMachine *****************
  1656 ;; Defined at:
  1657 ;;		line 293 in file "utils.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;  ucButton        1    wreg     unsigned char 
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;  ucButton        1   51[BANK0 ] unsigned char 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  1    wreg      void 
  1664 ;; Registers used:
  1665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMMON   BANK0   BANK1
  1671 ;;      Params:         0       0       0
  1672 ;;      Locals:         0       1       0
  1673 ;;      Temps:          0       3       0
  1674 ;;      Totals:         0       4       0
  1675 ;;Total ram usage:        4 bytes
  1676 ;; Hardware stack levels used: 1
  1677 ;; Hardware stack levels required when called: 4
  1678 ;; This function calls:
  1679 ;;		___awdiv
  1680 ;;		___awmod
  1681 ;;		_rollDice
  1682 ;;		_writeCharOnDisplay
  1683 ;; This function is called by:
  1684 ;;		_main
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           
  1689                           ;psect for function _deviceStateMachine
  1690  002A                     _deviceStateMachine:
  1691                           
  1692                           ;incstack = 0
  1693                           ; Regs used in _deviceStateMachine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1694                           ;deviceStateMachine@ucButton stored from wreg
  1695  002A  1283               	bcf	3,5	;RP0=0, select bank0
  1696  002B  1303               	bcf	3,6	;RP1=0, select bank0
  1697  002C  00D3               	movwf	deviceStateMachine@ucButton
  1698  002D                     l2370:
  1699                           
  1700                           ;utils.c: 296:     if(1 == ucButton){
  1701  002D  0353               	decf	deviceStateMachine@ucButton,w
  1702  002E  1D03               	btfss	3,2
  1703  002F  2831               	goto	u2071
  1704  0030  2832               	goto	u2070
  1705  0031                     u2071:
  1706  0031  2835               	goto	l2380
  1707  0032                     u2070:
  1708  0032                     l2372:
  1709                           
  1710                           ;utils.c: 297:         deviceCurrentState = ROLL;
  1711  0032  01EF               	clrf	_deviceCurrentState
  1712  0033                     l2374:
  1713                           
  1714                           ;utils.c: 299:         rollDice();
  1715  0033  22DA               	fcall	_rollDice
  1716  0034  2932               	goto	l182
  1717  0035                     l2380:
  1718  0035  086F               	movf	_deviceCurrentState,w
  1719  0036  1D03               	btfss	3,2
  1720  0037  2839               	goto	u2081
  1721  0038  283A               	goto	u2080
  1722  0039                     u2081:
  1723  0039  28E4               	goto	l2434
  1724  003A                     u2080:
  1725  003A                     l2382:
  1726                           
  1727                           ;utils.c: 303:         deviceCurrentState = MENU;
  1728  003A  01EF               	clrf	_deviceCurrentState
  1729  003B  0AEF               	incf	_deviceCurrentState,f
  1730  003C                     l2384:
  1731                           
  1732                           ;utils.c: 305:         writeCharOnDisplay('0' + diceState[0], 0);
  1733  003C  01C5               	clrf	writeCharOnDisplay@ucDisplay
  1734  003D  086D               	movf	_diceState,w
  1735  003E  3E30               	addlw	48
  1736  003F  2231               	fcall	_writeCharOnDisplay
  1737                           
  1738                           ;utils.c: 306:         writeCharOnDisplay('d', 1);
  1739  0040  1283               	bcf	3,5	;RP0=0, select bank0
  1740  0041  1303               	bcf	3,6	;RP1=0, select bank0
  1741  0042  01C5               	clrf	writeCharOnDisplay@ucDisplay
  1742  0043  0AC5               	incf	writeCharOnDisplay@ucDisplay,f
  1743  0044  3064               	movlw	100
  1744  0045  2231               	fcall	_writeCharOnDisplay
  1745                           
  1746                           ;utils.c: 307:         writeCharOnDisplay('0' + diceState[1]/10, 2);
  1747  0046  3002               	movlw	2
  1748  0047  1283               	bcf	3,5	;RP0=0, select bank0
  1749  0048  1303               	bcf	3,6	;RP1=0, select bank0
  1750  0049  00D0               	movwf	??_deviceStateMachine
  1751  004A  0850               	movf	??_deviceStateMachine,w
  1752  004B  00C5               	movwf	writeCharOnDisplay@ucDisplay
  1753  004C  300A               	movlw	10
  1754  004D  00A0               	movwf	___awdiv@divisor
  1755  004E  3000               	movlw	0
  1756  004F  00A1               	movwf	___awdiv@divisor+1
  1757  0050  086E               	movf	_diceState+1,w
  1758  0051  00D1               	movwf	??_deviceStateMachine+1
  1759  0052  01D2               	clrf	??_deviceStateMachine+2
  1760  0053  0851               	movf	??_deviceStateMachine+1,w
  1761  0054  00A2               	movwf	___awdiv@dividend
  1762  0055  0852               	movf	??_deviceStateMachine+2,w
  1763  0056  00A3               	movwf	___awdiv@dividend+1
  1764  0057  2404               	fcall	___awdiv
  1765  0058  1283               	bcf	3,5	;RP0=0, select bank0
  1766  0059  1303               	bcf	3,6	;RP1=0, select bank0
  1767  005A  0820               	movf	?___awdiv,w
  1768  005B  3E30               	addlw	48
  1769  005C  2231               	fcall	_writeCharOnDisplay
  1770                           
  1771                           ;utils.c: 308:         writeCharOnDisplay('0' + diceState[1]%10, 3);
  1772  005D  3003               	movlw	3
  1773  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1774  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1775  0060  00D0               	movwf	??_deviceStateMachine
  1776  0061  0850               	movf	??_deviceStateMachine,w
  1777  0062  00C5               	movwf	writeCharOnDisplay@ucDisplay
  1778  0063  300A               	movlw	10
  1779  0064  00A0               	movwf	___awmod@divisor
  1780  0065  3000               	movlw	0
  1781  0066  00A1               	movwf	___awmod@divisor+1
  1782  0067  086E               	movf	_diceState+1,w
  1783  0068  00D1               	movwf	??_deviceStateMachine+1
  1784  0069  01D2               	clrf	??_deviceStateMachine+2
  1785  006A  0851               	movf	??_deviceStateMachine+1,w
  1786  006B  00A2               	movwf	___awmod@dividend
  1787  006C  0852               	movf	??_deviceStateMachine+2,w
  1788  006D  00A3               	movwf	___awmod@dividend+1
  1789  006E  246D               	fcall	___awmod
  1790  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1791  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1792  0071  0820               	movf	?___awmod,w
  1793  0072  3E30               	addlw	48
  1794  0073  2231               	fcall	_writeCharOnDisplay
  1795  0074  2932               	goto	l182
  1796  0075                     l2388:
  1797                           
  1798                           ;utils.c: 316:             if(diceState[0] < 9 ){
  1799  0075  3009               	movlw	9
  1800  0076  026D               	subwf	_diceState,w
  1801  0077  1803               	skipnc
  1802  0078  287A               	goto	u2091
  1803  0079  287B               	goto	u2090
  1804  007A                     u2091:
  1805  007A  28FA               	goto	l2436
  1806  007B                     u2090:
  1807  007B                     l2390:
  1808                           
  1809                           ;utils.c: 317:                 diceState[0]++;
  1810  007B  3001               	movlw	1
  1811  007C  00D0               	movwf	??_deviceStateMachine
  1812  007D  0850               	movf	??_deviceStateMachine,w
  1813  007E  07ED               	addwf	_diceState,f
  1814  007F  28FA               	goto	l2436
  1815  0080                     l2392:
  1816                           
  1817                           ;utils.c: 322:             if(diceState[0] > 1){
  1818  0080  3002               	movlw	2
  1819  0081  026D               	subwf	_diceState,w
  1820  0082  1C03               	skipc
  1821  0083  2885               	goto	u2101
  1822  0084  2886               	goto	u2100
  1823  0085                     u2101:
  1824  0085  28FA               	goto	l2436
  1825  0086                     u2100:
  1826  0086                     l2394:
  1827                           
  1828                           ;utils.c: 323:                 diceState[0]--;
  1829  0086  3001               	movlw	1
  1830  0087  02ED               	subwf	_diceState,f
  1831  0088  28FA               	goto	l2436
  1832  0089                     l2396:
  1833                           
  1834                           ;utils.c: 328:             if(diceState[1] < 20){
  1835  0089  3014               	movlw	20
  1836  008A  026E               	subwf	_diceState+1,w
  1837  008B  1803               	skipnc
  1838  008C  288E               	goto	u2111
  1839  008D  288F               	goto	u2110
  1840  008E                     u2111:
  1841  008E  28FA               	goto	l2436
  1842  008F                     u2110:
  1843  008F  28A9               	goto	l2412
  1844  0090                     l2400:
  1845                           
  1846                           ;utils.c: 331:                         diceState[1] = 20;
  1847  0090  3014               	movlw	20
  1848  0091  00D0               	movwf	??_deviceStateMachine
  1849  0092  0850               	movf	??_deviceStateMachine,w
  1850  0093  00EE               	movwf	_diceState+1
  1851                           
  1852                           ;utils.c: 332:                         break;
  1853  0094  28FA               	goto	l2436
  1854  0095                     l2402:
  1855                           
  1856                           ;utils.c: 334:                         diceState[1] = 12;
  1857  0095  300C               	movlw	12
  1858  0096  00D0               	movwf	??_deviceStateMachine
  1859  0097  0850               	movf	??_deviceStateMachine,w
  1860  0098  00EE               	movwf	_diceState+1
  1861                           
  1862                           ;utils.c: 335:                         break;
  1863  0099  28FA               	goto	l2436
  1864  009A                     l2404:
  1865                           
  1866                           ;utils.c: 337:                         diceState[1] = 10;
  1867  009A  300A               	movlw	10
  1868  009B  00D0               	movwf	??_deviceStateMachine
  1869  009C  0850               	movf	??_deviceStateMachine,w
  1870  009D  00EE               	movwf	_diceState+1
  1871                           
  1872                           ;utils.c: 338:                         break;
  1873  009E  28FA               	goto	l2436
  1874  009F                     l2406:
  1875                           
  1876                           ;utils.c: 340:                         diceState[1] = 8;
  1877  009F  3008               	movlw	8
  1878  00A0  00D0               	movwf	??_deviceStateMachine
  1879  00A1  0850               	movf	??_deviceStateMachine,w
  1880  00A2  00EE               	movwf	_diceState+1
  1881                           
  1882                           ;utils.c: 341:                         break;
  1883  00A3  28FA               	goto	l2436
  1884  00A4                     l2408:
  1885                           
  1886                           ;utils.c: 343:                         diceState[1]++;
  1887  00A4  3001               	movlw	1
  1888  00A5  00D0               	movwf	??_deviceStateMachine
  1889  00A6  0850               	movf	??_deviceStateMachine,w
  1890  00A7  07EE               	addwf	_diceState+1,f
  1891                           
  1892                           ;utils.c: 344:                         break;
  1893  00A8  28FA               	goto	l2436
  1894  00A9                     l2412:
  1895  00A9  086E               	movf	_diceState+1,w
  1896  00AA  00D0               	movwf	??_deviceStateMachine
  1897  00AB  01D1               	clrf	??_deviceStateMachine+1
  1898                           
  1899                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1900                           ; Switch size 1, requested type "simple"
  1901                           ; Number of cases is 1, Range of values is 0 to 0
  1902                           ; switch strategies available:
  1903                           ; Name         Instructions Cycles
  1904                           ; simple_byte            4     3 (average)
  1905                           ; direct_byte            7     6 (fixed)
  1906                           ; jumptable            260     6 (fixed)
  1907                           ;	Chosen strategy is simple_byte
  1908  00AC  0851               	movf	??_deviceStateMachine+1,w
  1909  00AD  3A00               	xorlw	0	; case 0
  1910  00AE  1903               	skipnz
  1911  00AF  28B1               	goto	l2650
  1912  00B0  28A4               	goto	l2408
  1913  00B1                     l2650:
  1914                           
  1915                           ; Switch size 1, requested type "simple"
  1916                           ; Number of cases is 4, Range of values is 6 to 12
  1917                           ; switch strategies available:
  1918                           ; Name         Instructions Cycles
  1919                           ; simple_byte           13     7 (average)
  1920                           ; direct_byte           16     9 (fixed)
  1921                           ; jumptable            263     9 (fixed)
  1922                           ;	Chosen strategy is simple_byte
  1923  00B1  0850               	movf	??_deviceStateMachine,w
  1924  00B2  3A06               	xorlw	6	; case 6
  1925  00B3  1903               	skipnz
  1926  00B4  289F               	goto	l2406
  1927  00B5  3A0E               	xorlw	14	; case 8
  1928  00B6  1903               	skipnz
  1929  00B7  289A               	goto	l2404
  1930  00B8  3A02               	xorlw	2	; case 10
  1931  00B9  1903               	skipnz
  1932  00BA  2895               	goto	l2402
  1933  00BB  3A06               	xorlw	6	; case 12
  1934  00BC  1903               	skipnz
  1935  00BD  2890               	goto	l2400
  1936  00BE  28A4               	goto	l2408
  1937  00BF                     l2414:
  1938                           
  1939                           ;utils.c: 351:             if(diceState[1] > 2){
  1940  00BF  3003               	movlw	3
  1941  00C0  026E               	subwf	_diceState+1,w
  1942  00C1  1C03               	skipc
  1943  00C2  28C4               	goto	u2121
  1944  00C3  28C5               	goto	u2120
  1945  00C4                     u2121:
  1946  00C4  28FA               	goto	l2436
  1947  00C5                     u2120:
  1948  00C5  28CE               	goto	l2430
  1949  00C6                     l2424:
  1950                           
  1951                           ;utils.c: 363:                         diceState[1] = 6;
  1952  00C6  3006               	movlw	6
  1953  00C7  00D0               	movwf	??_deviceStateMachine
  1954  00C8  0850               	movf	??_deviceStateMachine,w
  1955  00C9  00EE               	movwf	_diceState+1
  1956                           
  1957                           ;utils.c: 364:                         break;
  1958  00CA  28FA               	goto	l2436
  1959  00CB                     l2426:
  1960                           
  1961                           ;utils.c: 366:                         diceState[1]--;
  1962  00CB  3001               	movlw	1
  1963  00CC  02EE               	subwf	_diceState+1,f
  1964                           
  1965                           ;utils.c: 367:                         break;
  1966  00CD  28FA               	goto	l2436
  1967  00CE                     l2430:
  1968  00CE  086E               	movf	_diceState+1,w
  1969  00CF  00D0               	movwf	??_deviceStateMachine
  1970  00D0  01D1               	clrf	??_deviceStateMachine+1
  1971                           
  1972                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1973                           ; Switch size 1, requested type "simple"
  1974                           ; Number of cases is 1, Range of values is 0 to 0
  1975                           ; switch strategies available:
  1976                           ; Name         Instructions Cycles
  1977                           ; simple_byte            4     3 (average)
  1978                           ; direct_byte            7     6 (fixed)
  1979                           ; jumptable            260     6 (fixed)
  1980                           ;	Chosen strategy is simple_byte
  1981  00D1  0851               	movf	??_deviceStateMachine+1,w
  1982  00D2  3A00               	xorlw	0	; case 0
  1983  00D3  1903               	skipnz
  1984  00D4  28D6               	goto	l2652
  1985  00D5  28CB               	goto	l2426
  1986  00D6                     l2652:
  1987                           
  1988                           ; Switch size 1, requested type "simple"
  1989                           ; Number of cases is 4, Range of values is 8 to 20
  1990                           ; switch strategies available:
  1991                           ; Name         Instructions Cycles
  1992                           ; simple_byte           13     7 (average)
  1993                           ; direct_byte           22     9 (fixed)
  1994                           ; jumptable            263     9 (fixed)
  1995                           ;	Chosen strategy is simple_byte
  1996  00D6  0850               	movf	??_deviceStateMachine,w
  1997  00D7  3A08               	xorlw	8	; case 8
  1998  00D8  1903               	skipnz
  1999  00D9  28C6               	goto	l2424
  2000  00DA  3A02               	xorlw	2	; case 10
  2001  00DB  1903               	skipnz
  2002  00DC  289F               	goto	l2406
  2003  00DD  3A06               	xorlw	6	; case 12
  2004  00DE  1903               	skipnz
  2005  00DF  289A               	goto	l2404
  2006  00E0  3A18               	xorlw	24	; case 20
  2007  00E1  1903               	skipnz
  2008  00E2  2895               	goto	l2402
  2009  00E3  28CB               	goto	l2426
  2010  00E4                     l2434:
  2011  00E4  0853               	movf	deviceStateMachine@ucButton,w
  2012  00E5  00D0               	movwf	??_deviceStateMachine
  2013  00E6  01D1               	clrf	??_deviceStateMachine+1
  2014                           
  2015                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2016                           ; Switch size 1, requested type "simple"
  2017                           ; Number of cases is 1, Range of values is 0 to 0
  2018                           ; switch strategies available:
  2019                           ; Name         Instructions Cycles
  2020                           ; simple_byte            4     3 (average)
  2021                           ; direct_byte            7     6 (fixed)
  2022                           ; jumptable            260     6 (fixed)
  2023                           ;	Chosen strategy is simple_byte
  2024  00E7  0851               	movf	??_deviceStateMachine+1,w
  2025  00E8  3A00               	xorlw	0	; case 0
  2026  00E9  1903               	skipnz
  2027  00EA  28EC               	goto	l2654
  2028  00EB  28FA               	goto	l2436
  2029  00EC                     l2654:
  2030                           
  2031                           ; Switch size 1, requested type "simple"
  2032                           ; Number of cases is 4, Range of values is 2 to 5
  2033                           ; switch strategies available:
  2034                           ; Name         Instructions Cycles
  2035                           ; simple_byte           13     7 (average)
  2036                           ; direct_byte           13     9 (fixed)
  2037                           ; jumptable            263     9 (fixed)
  2038                           ;	Chosen strategy is simple_byte
  2039  00EC  0850               	movf	??_deviceStateMachine,w
  2040  00ED  3A02               	xorlw	2	; case 2
  2041  00EE  1903               	skipnz
  2042  00EF  2875               	goto	l2388
  2043  00F0  3A01               	xorlw	1	; case 3
  2044  00F1  1903               	skipnz
  2045  00F2  2880               	goto	l2392
  2046  00F3  3A07               	xorlw	7	; case 4
  2047  00F4  1903               	skipnz
  2048  00F5  2889               	goto	l2396
  2049  00F6  3A01               	xorlw	1	; case 5
  2050  00F7  1903               	skipnz
  2051  00F8  28BF               	goto	l2414
  2052  00F9  28FA               	goto	l2436
  2053  00FA                     l2436:
  2054                           
  2055                           ;utils.c: 376:         writeCharOnDisplay('0' + diceState[0], 0);
  2056  00FA  01C5               	clrf	writeCharOnDisplay@ucDisplay
  2057  00FB  086D               	movf	_diceState,w
  2058  00FC  3E30               	addlw	48
  2059  00FD  2231               	fcall	_writeCharOnDisplay
  2060                           
  2061                           ;utils.c: 377:         writeCharOnDisplay('d', 1);
  2062  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  2063  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  2064  0100  01C5               	clrf	writeCharOnDisplay@ucDisplay
  2065  0101  0AC5               	incf	writeCharOnDisplay@ucDisplay,f
  2066  0102  3064               	movlw	100
  2067  0103  2231               	fcall	_writeCharOnDisplay
  2068                           
  2069                           ;utils.c: 378:         writeCharOnDisplay('0' + diceState[1]/10, 2);
  2070  0104  3002               	movlw	2
  2071  0105  1283               	bcf	3,5	;RP0=0, select bank0
  2072  0106  1303               	bcf	3,6	;RP1=0, select bank0
  2073  0107  00D0               	movwf	??_deviceStateMachine
  2074  0108  0850               	movf	??_deviceStateMachine,w
  2075  0109  00C5               	movwf	writeCharOnDisplay@ucDisplay
  2076  010A  300A               	movlw	10
  2077  010B  00A0               	movwf	___awdiv@divisor
  2078  010C  3000               	movlw	0
  2079  010D  00A1               	movwf	___awdiv@divisor+1
  2080  010E  086E               	movf	_diceState+1,w
  2081  010F  00D1               	movwf	??_deviceStateMachine+1
  2082  0110  01D2               	clrf	??_deviceStateMachine+2
  2083  0111  0851               	movf	??_deviceStateMachine+1,w
  2084  0112  00A2               	movwf	___awdiv@dividend
  2085  0113  0852               	movf	??_deviceStateMachine+2,w
  2086  0114  00A3               	movwf	___awdiv@dividend+1
  2087  0115  2404               	fcall	___awdiv
  2088  0116  1283               	bcf	3,5	;RP0=0, select bank0
  2089  0117  1303               	bcf	3,6	;RP1=0, select bank0
  2090  0118  0820               	movf	?___awdiv,w
  2091  0119  3E30               	addlw	48
  2092  011A  2231               	fcall	_writeCharOnDisplay
  2093                           
  2094                           ;utils.c: 379:         writeCharOnDisplay('0' + diceState[1]%10, 3);
  2095  011B  3003               	movlw	3
  2096  011C  1283               	bcf	3,5	;RP0=0, select bank0
  2097  011D  1303               	bcf	3,6	;RP1=0, select bank0
  2098  011E  00D0               	movwf	??_deviceStateMachine
  2099  011F  0850               	movf	??_deviceStateMachine,w
  2100  0120  00C5               	movwf	writeCharOnDisplay@ucDisplay
  2101  0121  300A               	movlw	10
  2102  0122  00A0               	movwf	___awmod@divisor
  2103  0123  3000               	movlw	0
  2104  0124  00A1               	movwf	___awmod@divisor+1
  2105  0125  086E               	movf	_diceState+1,w
  2106  0126  00D1               	movwf	??_deviceStateMachine+1
  2107  0127  01D2               	clrf	??_deviceStateMachine+2
  2108  0128  0851               	movf	??_deviceStateMachine+1,w
  2109  0129  00A2               	movwf	___awmod@dividend
  2110  012A  0852               	movf	??_deviceStateMachine+2,w
  2111  012B  00A3               	movwf	___awmod@dividend+1
  2112  012C  246D               	fcall	___awmod
  2113  012D  1283               	bcf	3,5	;RP0=0, select bank0
  2114  012E  1303               	bcf	3,6	;RP1=0, select bank0
  2115  012F  0820               	movf	?___awmod,w
  2116  0130  3E30               	addlw	48
  2117  0131  2231               	fcall	_writeCharOnDisplay
  2118  0132                     l182:
  2119  0132  0008               	return
  2120  0133                     __end_of_deviceStateMachine:
  2121                           
  2122                           	psect	text7
  2123  02DA                     __ptext7:	
  2124 ;; *************** function _rollDice *****************
  2125 ;; Defined at:
  2126 ;;		line 405 in file "utils.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;		None
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;  ulTotal         2   46[BANK0 ] unsigned int 
  2131 ;;  i               1   45[BANK0 ] unsigned char 
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  1    wreg      void 
  2134 ;; Registers used:
  2135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMMON   BANK0   BANK1
  2141 ;;      Params:         0       0       0
  2142 ;;      Locals:         0       3       0
  2143 ;;      Temps:          0       4       0
  2144 ;;      Totals:         0       7       0
  2145 ;;Total ram usage:        7 bytes
  2146 ;; Hardware stack levels used: 1
  2147 ;; Hardware stack levels required when called: 3
  2148 ;; This function calls:
  2149 ;;		___lwdiv
  2150 ;;		___lwmod
  2151 ;;		_randomNumber
  2152 ;;		_writeCharOnDisplay
  2153 ;; This function is called by:
  2154 ;;		_deviceStateMachine
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           
  2159                           ;psect for function _rollDice
  2160  02DA                     _rollDice:
  2161  02DA                     l2196:	
  2162                           ;incstack = 0
  2163                           ; Regs used in _rollDice: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2164                           
  2165                           
  2166                           ;utils.c: 406:     unsigned char i;;utils.c: 407:     unsigned int ulTotal = 0;
  2167  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  2168  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  2169  02DC  01CE               	clrf	rollDice@ulTotal
  2170  02DD  01CF               	clrf	rollDice@ulTotal+1
  2171                           
  2172                           ;utils.c: 409:     for(i = 0; i < diceState[0]; i++){
  2173  02DE  01CD               	clrf	rollDice@i
  2174  02DF  2B03               	goto	l2202
  2175  02E0                     l2198:
  2176                           
  2177                           ;utils.c: 410:         ulTotal += ((unsigned int)randomNumber())%diceState[1] + 1;
  2178  02E0  086E               	movf	_diceState+1,w
  2179  02E1  00C9               	movwf	??_rollDice
  2180  02E2  01CA               	clrf	??_rollDice+1
  2181  02E3  0849               	movf	??_rollDice,w
  2182  02E4  00BF               	movwf	___lwmod@divisor
  2183  02E5  084A               	movf	??_rollDice+1,w
  2184  02E6  00C0               	movwf	___lwmod@divisor+1
  2185  02E7  251E               	fcall	_randomNumber
  2186  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  2187  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  2188  02EA  0838               	movf	?_randomNumber+1,w
  2189  02EB  00C2               	movwf	___lwmod@dividend+1
  2190  02EC  0837               	movf	?_randomNumber,w
  2191  02ED  00C1               	movwf	___lwmod@dividend
  2192  02EE  26CB               	fcall	___lwmod
  2193  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  2194  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  2195  02F1  083F               	movf	?___lwmod,w
  2196  02F2  3E01               	addlw	1
  2197  02F3  00CB               	movwf	??_rollDice+2
  2198  02F4  0840               	movf	?___lwmod+1,w
  2199  02F5  1803               	skipnc
  2200  02F6  3E01               	addlw	1
  2201  02F7  3E00               	addlw	0
  2202  02F8  00CC               	movwf	??_rollDice+3
  2203  02F9  084B               	movf	??_rollDice+2,w
  2204  02FA  07CE               	addwf	rollDice@ulTotal,f
  2205  02FB  1803               	skipnc
  2206  02FC  0ACF               	incf	rollDice@ulTotal+1,f
  2207  02FD  084C               	movf	??_rollDice+3,w
  2208  02FE  07CF               	addwf	rollDice@ulTotal+1,f
  2209  02FF                     l2200:
  2210                           
  2211                           ;utils.c: 411:     }
  2212  02FF  3001               	movlw	1
  2213  0300  00C9               	movwf	??_rollDice
  2214  0301  0849               	movf	??_rollDice,w
  2215  0302  07CD               	addwf	rollDice@i,f
  2216  0303                     l2202:
  2217  0303  086D               	movf	_diceState,w
  2218  0304  024D               	subwf	rollDice@i,w
  2219  0305  1C03               	skipc
  2220  0306  2B08               	goto	u1861
  2221  0307  2B09               	goto	u1860
  2222  0308                     u1861:
  2223  0308  2AE0               	goto	l2198
  2224  0309                     u1860:
  2225  0309                     l2204:
  2226                           
  2227                           ;utils.c: 413:     writeCharOnDisplay('0' + (unsigned char)(ulTotal%10) ,3);
  2228  0309  3003               	movlw	3
  2229  030A  00C9               	movwf	??_rollDice
  2230  030B  0849               	movf	??_rollDice,w
  2231  030C  00C5               	movwf	writeCharOnDisplay@ucDisplay
  2232  030D  300A               	movlw	10
  2233  030E  00BF               	movwf	___lwmod@divisor
  2234  030F  3000               	movlw	0
  2235  0310  00C0               	movwf	___lwmod@divisor+1
  2236  0311  084F               	movf	rollDice@ulTotal+1,w
  2237  0312  00C2               	movwf	___lwmod@dividend+1
  2238  0313  084E               	movf	rollDice@ulTotal,w
  2239  0314  00C1               	movwf	___lwmod@dividend
  2240  0315  26CB               	fcall	___lwmod
  2241  0316  1283               	bcf	3,5	;RP0=0, select bank0
  2242  0317  1303               	bcf	3,6	;RP1=0, select bank0
  2243  0318  083F               	movf	?___lwmod,w
  2244  0319  3E30               	addlw	48
  2245  031A  2231               	fcall	_writeCharOnDisplay
  2246                           
  2247                           ;utils.c: 414:     writeCharOnDisplay('0' + (unsigned char)((ulTotal/10)%10) ,2);
  2248  031B  3002               	movlw	2
  2249  031C  1283               	bcf	3,5	;RP0=0, select bank0
  2250  031D  1303               	bcf	3,6	;RP1=0, select bank0
  2251  031E  00C9               	movwf	??_rollDice
  2252  031F  0849               	movf	??_rollDice,w
  2253  0320  00C5               	movwf	writeCharOnDisplay@ucDisplay
  2254  0321  300A               	movlw	10
  2255  0322  00BF               	movwf	___lwmod@divisor
  2256  0323  3000               	movlw	0
  2257  0324  00C0               	movwf	___lwmod@divisor+1
  2258  0325  300A               	movlw	10
  2259  0326  00A0               	movwf	___lwdiv@divisor
  2260  0327  3000               	movlw	0
  2261  0328  00A1               	movwf	___lwdiv@divisor+1
  2262  0329  084F               	movf	rollDice@ulTotal+1,w
  2263  032A  00A3               	movwf	___lwdiv@dividend+1
  2264  032B  084E               	movf	rollDice@ulTotal,w
  2265  032C  00A2               	movwf	___lwdiv@dividend
  2266  032D  25B9               	fcall	___lwdiv
  2267  032E  1283               	bcf	3,5	;RP0=0, select bank0
  2268  032F  1303               	bcf	3,6	;RP1=0, select bank0
  2269  0330  0821               	movf	?___lwdiv+1,w
  2270  0331  00C2               	movwf	___lwmod@dividend+1
  2271  0332  0820               	movf	?___lwdiv,w
  2272  0333  00C1               	movwf	___lwmod@dividend
  2273  0334  26CB               	fcall	___lwmod
  2274  0335  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0336  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0337  083F               	movf	?___lwmod,w
  2277  0338  3E30               	addlw	48
  2278  0339  2231               	fcall	_writeCharOnDisplay
  2279                           
  2280                           ;utils.c: 415:     writeCharOnDisplay('0' + (unsigned char)((ulTotal/100)%10) ,1);
  2281  033A  1283               	bcf	3,5	;RP0=0, select bank0
  2282  033B  1303               	bcf	3,6	;RP1=0, select bank0
  2283  033C  01C5               	clrf	writeCharOnDisplay@ucDisplay
  2284  033D  0AC5               	incf	writeCharOnDisplay@ucDisplay,f
  2285  033E  300A               	movlw	10
  2286  033F  00BF               	movwf	___lwmod@divisor
  2287  0340  3000               	movlw	0
  2288  0341  00C0               	movwf	___lwmod@divisor+1
  2289  0342  3064               	movlw	100
  2290  0343  00A0               	movwf	___lwdiv@divisor
  2291  0344  3000               	movlw	0
  2292  0345  00A1               	movwf	___lwdiv@divisor+1
  2293  0346  084F               	movf	rollDice@ulTotal+1,w
  2294  0347  00A3               	movwf	___lwdiv@dividend+1
  2295  0348  084E               	movf	rollDice@ulTotal,w
  2296  0349  00A2               	movwf	___lwdiv@dividend
  2297  034A  25B9               	fcall	___lwdiv
  2298  034B  1283               	bcf	3,5	;RP0=0, select bank0
  2299  034C  1303               	bcf	3,6	;RP1=0, select bank0
  2300  034D  0821               	movf	?___lwdiv+1,w
  2301  034E  00C2               	movwf	___lwmod@dividend+1
  2302  034F  0820               	movf	?___lwdiv,w
  2303  0350  00C1               	movwf	___lwmod@dividend
  2304  0351  26CB               	fcall	___lwmod
  2305  0352  1283               	bcf	3,5	;RP0=0, select bank0
  2306  0353  1303               	bcf	3,6	;RP1=0, select bank0
  2307  0354  083F               	movf	?___lwmod,w
  2308  0355  3E30               	addlw	48
  2309  0356  2231               	fcall	_writeCharOnDisplay
  2310                           
  2311                           ;utils.c: 416:     writeCharOnDisplay('0' + (unsigned char)((ulTotal/1000)%10) ,0);
  2312  0357  1283               	bcf	3,5	;RP0=0, select bank0
  2313  0358  1303               	bcf	3,6	;RP1=0, select bank0
  2314  0359  01C5               	clrf	writeCharOnDisplay@ucDisplay
  2315  035A  300A               	movlw	10
  2316  035B  00BF               	movwf	___lwmod@divisor
  2317  035C  3000               	movlw	0
  2318  035D  00C0               	movwf	___lwmod@divisor+1
  2319  035E  30E8               	movlw	232
  2320  035F  00A0               	movwf	___lwdiv@divisor
  2321  0360  3003               	movlw	3
  2322  0361  00A1               	movwf	___lwdiv@divisor+1
  2323  0362  084F               	movf	rollDice@ulTotal+1,w
  2324  0363  00A3               	movwf	___lwdiv@dividend+1
  2325  0364  084E               	movf	rollDice@ulTotal,w
  2326  0365  00A2               	movwf	___lwdiv@dividend
  2327  0366  25B9               	fcall	___lwdiv
  2328  0367  1283               	bcf	3,5	;RP0=0, select bank0
  2329  0368  1303               	bcf	3,6	;RP1=0, select bank0
  2330  0369  0821               	movf	?___lwdiv+1,w
  2331  036A  00C2               	movwf	___lwmod@dividend+1
  2332  036B  0820               	movf	?___lwdiv,w
  2333  036C  00C1               	movwf	___lwmod@dividend
  2334  036D  26CB               	fcall	___lwmod
  2335  036E  1283               	bcf	3,5	;RP0=0, select bank0
  2336  036F  1303               	bcf	3,6	;RP1=0, select bank0
  2337  0370  083F               	movf	?___lwmod,w
  2338  0371  3E30               	addlw	48
  2339  0372  2231               	fcall	_writeCharOnDisplay
  2340  0373                     l218:
  2341  0373  0008               	return
  2342  0374                     __end_of_rollDice:
  2343                           
  2344                           	psect	text8
  2345  0231                     __ptext8:	
  2346 ;; *************** function _writeCharOnDisplay *****************
  2347 ;; Defined at:
  2348 ;;		line 75 in file "utils.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;  ucCharacter     1    wreg     unsigned char 
  2351 ;;  ucDisplay       1   37[BANK0 ] unsigned char 
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;  ucCharacter     1   40[BANK0 ] unsigned char 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  1    wreg      void 
  2356 ;; Registers used:
  2357 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMMON   BANK0   BANK1
  2363 ;;      Params:         0       1       0
  2364 ;;      Locals:         0       1       0
  2365 ;;      Temps:          0       2       0
  2366 ;;      Totals:         0       4       0
  2367 ;;Total ram usage:        4 bytes
  2368 ;; Hardware stack levels used: 1
  2369 ;; Hardware stack levels required when called: 1
  2370 ;; This function calls:
  2371 ;;		Nothing
  2372 ;; This function is called by:
  2373 ;;		_deviceStateMachine
  2374 ;;		_rollDice
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           
  2379                           ;psect for function _writeCharOnDisplay
  2380  0231                     _writeCharOnDisplay:
  2381                           
  2382                           ;incstack = 0
  2383                           ; Regs used in _writeCharOnDisplay: [wreg-fsr0h+status,2+status,0]
  2384                           ;writeCharOnDisplay@ucCharacter stored from wreg
  2385  0231  1283               	bcf	3,5	;RP0=0, select bank0
  2386  0232  1303               	bcf	3,6	;RP1=0, select bank0
  2387  0233  00C8               	movwf	writeCharOnDisplay@ucCharacter
  2388  0234                     l2074:
  2389                           
  2390                           ;utils.c: 78:     switch(ucCharacter){
  2391  0234  2AAE               	goto	l2100
  2392  0235                     l2076:
  2393                           
  2394                           ;utils.c: 80:             Display7seg4digitsVetor[ucDisplay].data = 0b00111111;
  2395  0235  303F               	movlw	63
  2396  0236  00C6               	movwf	??_writeCharOnDisplay
  2397  0237  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2398  0238  00C7               	movwf	??_writeCharOnDisplay+1
  2399  0239  0747               	addwf	??_writeCharOnDisplay+1,w
  2400  023A  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2401  023B  0084               	movwf	4
  2402  023C  0846               	movf	??_writeCharOnDisplay,w
  2403  023D  1383               	bcf	3,7	;select IRP bank0
  2404  023E  0080               	movwf	0
  2405                           
  2406                           ;utils.c: 81:             break;
  2407  023F  2AD9               	goto	l154
  2408  0240                     l2078:
  2409                           
  2410                           ;utils.c: 83:             Display7seg4digitsVetor[ucDisplay].data = 0b00000110;
  2411  0240  3006               	movlw	6
  2412  0241  00C6               	movwf	??_writeCharOnDisplay
  2413  0242  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2414  0243  00C7               	movwf	??_writeCharOnDisplay+1
  2415  0244  0747               	addwf	??_writeCharOnDisplay+1,w
  2416  0245  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2417  0246  0084               	movwf	4
  2418  0247  0846               	movf	??_writeCharOnDisplay,w
  2419  0248  1383               	bcf	3,7	;select IRP bank0
  2420  0249  0080               	movwf	0
  2421                           
  2422                           ;utils.c: 84:             break;
  2423  024A  2AD9               	goto	l154
  2424  024B                     l2080:
  2425                           
  2426                           ;utils.c: 86:             Display7seg4digitsVetor[ucDisplay].data = 0b01011011;
  2427  024B  305B               	movlw	91
  2428  024C  00C6               	movwf	??_writeCharOnDisplay
  2429  024D  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2430  024E  00C7               	movwf	??_writeCharOnDisplay+1
  2431  024F  0747               	addwf	??_writeCharOnDisplay+1,w
  2432  0250  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2433  0251  0084               	movwf	4
  2434  0252  0846               	movf	??_writeCharOnDisplay,w
  2435  0253  1383               	bcf	3,7	;select IRP bank0
  2436  0254  0080               	movwf	0
  2437                           
  2438                           ;utils.c: 87:             break;
  2439  0255  2AD9               	goto	l154
  2440  0256                     l2082:
  2441                           
  2442                           ;utils.c: 89:             Display7seg4digitsVetor[ucDisplay].data = 0b01001111;
  2443  0256  304F               	movlw	79
  2444  0257  00C6               	movwf	??_writeCharOnDisplay
  2445  0258  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2446  0259  00C7               	movwf	??_writeCharOnDisplay+1
  2447  025A  0747               	addwf	??_writeCharOnDisplay+1,w
  2448  025B  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2449  025C  0084               	movwf	4
  2450  025D  0846               	movf	??_writeCharOnDisplay,w
  2451  025E  1383               	bcf	3,7	;select IRP bank0
  2452  025F  0080               	movwf	0
  2453                           
  2454                           ;utils.c: 90:             break;
  2455  0260  2AD9               	goto	l154
  2456  0261                     l2084:
  2457                           
  2458                           ;utils.c: 92:             Display7seg4digitsVetor[ucDisplay].data = 0b01100110;
  2459  0261  3066               	movlw	102
  2460  0262  00C6               	movwf	??_writeCharOnDisplay
  2461  0263  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2462  0264  00C7               	movwf	??_writeCharOnDisplay+1
  2463  0265  0747               	addwf	??_writeCharOnDisplay+1,w
  2464  0266  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2465  0267  0084               	movwf	4
  2466  0268  0846               	movf	??_writeCharOnDisplay,w
  2467  0269  1383               	bcf	3,7	;select IRP bank0
  2468  026A  0080               	movwf	0
  2469                           
  2470                           ;utils.c: 93:             break;
  2471  026B  2AD9               	goto	l154
  2472  026C                     l2086:
  2473                           
  2474                           ;utils.c: 95:             Display7seg4digitsVetor[ucDisplay].data = 0b01101101;
  2475  026C  306D               	movlw	109
  2476  026D  00C6               	movwf	??_writeCharOnDisplay
  2477  026E  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2478  026F  00C7               	movwf	??_writeCharOnDisplay+1
  2479  0270  0747               	addwf	??_writeCharOnDisplay+1,w
  2480  0271  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2481  0272  0084               	movwf	4
  2482  0273  0846               	movf	??_writeCharOnDisplay,w
  2483  0274  1383               	bcf	3,7	;select IRP bank0
  2484  0275  0080               	movwf	0
  2485                           
  2486                           ;utils.c: 96:             break;
  2487  0276  2AD9               	goto	l154
  2488  0277                     l2088:
  2489                           
  2490                           ;utils.c: 98:             Display7seg4digitsVetor[ucDisplay].data = 0b01111101;
  2491  0277  307D               	movlw	125
  2492  0278  00C6               	movwf	??_writeCharOnDisplay
  2493  0279  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2494  027A  00C7               	movwf	??_writeCharOnDisplay+1
  2495  027B  0747               	addwf	??_writeCharOnDisplay+1,w
  2496  027C  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2497  027D  0084               	movwf	4
  2498  027E  0846               	movf	??_writeCharOnDisplay,w
  2499  027F  1383               	bcf	3,7	;select IRP bank0
  2500  0280  0080               	movwf	0
  2501                           
  2502                           ;utils.c: 99:             break;
  2503  0281  2AD9               	goto	l154
  2504  0282                     l2090:
  2505                           
  2506                           ;utils.c: 101:             Display7seg4digitsVetor[ucDisplay].data = 0b00000111;
  2507  0282  3007               	movlw	7
  2508  0283  00C6               	movwf	??_writeCharOnDisplay
  2509  0284  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2510  0285  00C7               	movwf	??_writeCharOnDisplay+1
  2511  0286  0747               	addwf	??_writeCharOnDisplay+1,w
  2512  0287  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2513  0288  0084               	movwf	4
  2514  0289  0846               	movf	??_writeCharOnDisplay,w
  2515  028A  1383               	bcf	3,7	;select IRP bank0
  2516  028B  0080               	movwf	0
  2517                           
  2518                           ;utils.c: 102:             break;
  2519  028C  2AD9               	goto	l154
  2520  028D                     l2092:
  2521                           
  2522                           ;utils.c: 104:             Display7seg4digitsVetor[ucDisplay].data = 0b01111111;
  2523  028D  307F               	movlw	127
  2524  028E  00C6               	movwf	??_writeCharOnDisplay
  2525  028F  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2526  0290  00C7               	movwf	??_writeCharOnDisplay+1
  2527  0291  0747               	addwf	??_writeCharOnDisplay+1,w
  2528  0292  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2529  0293  0084               	movwf	4
  2530  0294  0846               	movf	??_writeCharOnDisplay,w
  2531  0295  1383               	bcf	3,7	;select IRP bank0
  2532  0296  0080               	movwf	0
  2533                           
  2534                           ;utils.c: 105:             break;
  2535  0297  2AD9               	goto	l154
  2536  0298                     l2094:
  2537                           
  2538                           ;utils.c: 107:             Display7seg4digitsVetor[ucDisplay].data = 0b01100111;
  2539  0298  3067               	movlw	103
  2540  0299  00C6               	movwf	??_writeCharOnDisplay
  2541  029A  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2542  029B  00C7               	movwf	??_writeCharOnDisplay+1
  2543  029C  0747               	addwf	??_writeCharOnDisplay+1,w
  2544  029D  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2545  029E  0084               	movwf	4
  2546  029F  0846               	movf	??_writeCharOnDisplay,w
  2547  02A0  1383               	bcf	3,7	;select IRP bank0
  2548  02A1  0080               	movwf	0
  2549                           
  2550                           ;utils.c: 108:             break;
  2551  02A2  2AD9               	goto	l154
  2552  02A3                     l2096:
  2553                           
  2554                           ;utils.c: 110:             Display7seg4digitsVetor[ucDisplay].data = 0b01011110;
  2555  02A3  305E               	movlw	94
  2556  02A4  00C6               	movwf	??_writeCharOnDisplay
  2557  02A5  0845               	movf	writeCharOnDisplay@ucDisplay,w
  2558  02A6  00C7               	movwf	??_writeCharOnDisplay+1
  2559  02A7  0747               	addwf	??_writeCharOnDisplay+1,w
  2560  02A8  3E59               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  2561  02A9  0084               	movwf	4
  2562  02AA  0846               	movf	??_writeCharOnDisplay,w
  2563  02AB  1383               	bcf	3,7	;select IRP bank0
  2564  02AC  0080               	movwf	0
  2565                           
  2566                           ;utils.c: 111:             break;
  2567  02AD  2AD9               	goto	l154
  2568  02AE                     l2100:
  2569  02AE  0848               	movf	writeCharOnDisplay@ucCharacter,w
  2570  02AF  00C6               	movwf	??_writeCharOnDisplay
  2571  02B0  01C7               	clrf	??_writeCharOnDisplay+1
  2572                           
  2573                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2574                           ; Switch size 1, requested type "simple"
  2575                           ; Number of cases is 1, Range of values is 0 to 0
  2576                           ; switch strategies available:
  2577                           ; Name         Instructions Cycles
  2578                           ; simple_byte            4     3 (average)
  2579                           ; direct_byte            7     6 (fixed)
  2580                           ; jumptable            260     6 (fixed)
  2581                           ;	Chosen strategy is simple_byte
  2582  02B1  0847               	movf	??_writeCharOnDisplay+1,w
  2583  02B2  3A00               	xorlw	0	; case 0
  2584  02B3  1903               	skipnz
  2585  02B4  2AB6               	goto	l2656
  2586  02B5  2AD9               	goto	l154
  2587  02B6                     l2656:
  2588                           
  2589                           ; Switch size 1, requested type "simple"
  2590                           ; Number of cases is 11, Range of values is 48 to 100
  2591                           ; switch strategies available:
  2592                           ; Name         Instructions Cycles
  2593                           ; simple_byte           34    18 (average)
  2594                           ; direct_byte           62     9 (fixed)
  2595                           ; jumptable            263     9 (fixed)
  2596                           ;	Chosen strategy is simple_byte
  2597  02B6  0846               	movf	??_writeCharOnDisplay,w
  2598  02B7  3A30               	xorlw	48	; case 48
  2599  02B8  1903               	skipnz
  2600  02B9  2A35               	goto	l2076
  2601  02BA  3A01               	xorlw	1	; case 49
  2602  02BB  1903               	skipnz
  2603  02BC  2A40               	goto	l2078
  2604  02BD  3A03               	xorlw	3	; case 50
  2605  02BE  1903               	skipnz
  2606  02BF  2A4B               	goto	l2080
  2607  02C0  3A01               	xorlw	1	; case 51
  2608  02C1  1903               	skipnz
  2609  02C2  2A56               	goto	l2082
  2610  02C3  3A07               	xorlw	7	; case 52
  2611  02C4  1903               	skipnz
  2612  02C5  2A61               	goto	l2084
  2613  02C6  3A01               	xorlw	1	; case 53
  2614  02C7  1903               	skipnz
  2615  02C8  2A6C               	goto	l2086
  2616  02C9  3A03               	xorlw	3	; case 54
  2617  02CA  1903               	skipnz
  2618  02CB  2A77               	goto	l2088
  2619  02CC  3A01               	xorlw	1	; case 55
  2620  02CD  1903               	skipnz
  2621  02CE  2A82               	goto	l2090
  2622  02CF  3A0F               	xorlw	15	; case 56
  2623  02D0  1903               	skipnz
  2624  02D1  2A8D               	goto	l2092
  2625  02D2  3A01               	xorlw	1	; case 57
  2626  02D3  1903               	skipnz
  2627  02D4  2A98               	goto	l2094
  2628  02D5  3A5D               	xorlw	93	; case 100
  2629  02D6  1903               	skipnz
  2630  02D7  2AA3               	goto	l2096
  2631  02D8  2AD9               	goto	l154
  2632  02D9                     l154:
  2633  02D9  0008               	return
  2634  02DA                     __end_of_writeCharOnDisplay:
  2635                           
  2636                           	psect	text9
  2637  051E                     __ptext9:	
  2638 ;; *************** function _randomNumber *****************
  2639 ;; Defined at:
  2640 ;;		line 391 in file "utils.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;		None
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;		None
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  4   23[BANK0 ] unsigned long 
  2647 ;; Registers used:
  2648 ;;		wreg, status,2, status,0, pclath, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMMON   BANK0   BANK1
  2654 ;;      Params:         0       4       0
  2655 ;;      Locals:         0       0       0
  2656 ;;      Temps:          0       4       0
  2657 ;;      Totals:         0       8       0
  2658 ;;Total ram usage:        8 bytes
  2659 ;; Hardware stack levels used: 1
  2660 ;; Hardware stack levels required when called: 2
  2661 ;; This function calls:
  2662 ;;		___llmod
  2663 ;;		___lmul
  2664 ;; This function is called by:
  2665 ;;		_main
  2666 ;;		_rollDice
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           
  2671                           ;psect for function _randomNumber
  2672  051E                     _randomNumber:
  2673  051E                     l2068:	
  2674                           ;incstack = 0
  2675                           ; Regs used in _randomNumber: [wreg+status,2+status,0+pclath+cstack]
  2676                           
  2677                           
  2678                           ;utils.c: 392:     randomSeed = (733*randomSeed + 1237)%7393;
  2679  051E  3000               	movlw	0
  2680  051F  1283               	bcf	3,5	;RP0=0, select bank0
  2681  0520  1303               	bcf	3,6	;RP1=0, select bank0
  2682  0521  00B0               	movwf	___llmod@divisor+3
  2683  0522  3000               	movlw	0
  2684  0523  00AF               	movwf	___llmod@divisor+2
  2685  0524  301C               	movlw	28
  2686  0525  00AE               	movwf	___llmod@divisor+1
  2687  0526  30E1               	movlw	225
  2688  0527  00AD               	movwf	___llmod@divisor
  2689  0528  30D5               	movlw	213
  2690  0529  00BB               	movwf	??_randomNumber
  2691  052A  3004               	movlw	4
  2692  052B  00BC               	movwf	??_randomNumber+1
  2693  052C  3000               	movlw	0
  2694  052D  00BD               	movwf	??_randomNumber+2
  2695  052E  3000               	movlw	0
  2696  052F  00BE               	movwf	??_randomNumber+3
  2697  0530  0867               	movf	_randomSeed+3,w
  2698  0531  00A3               	movwf	___lmul@multiplier+3
  2699  0532  0866               	movf	_randomSeed+2,w
  2700  0533  00A2               	movwf	___lmul@multiplier+2
  2701  0534  0865               	movf	_randomSeed+1,w
  2702  0535  00A1               	movwf	___lmul@multiplier+1
  2703  0536  0864               	movf	_randomSeed,w
  2704  0537  00A0               	movwf	___lmul@multiplier
  2705  0538  3000               	movlw	0
  2706  0539  00A7               	movwf	___lmul@multiplicand+3
  2707  053A  3000               	movlw	0
  2708  053B  00A6               	movwf	___lmul@multiplicand+2
  2709  053C  3002               	movlw	2
  2710  053D  00A5               	movwf	___lmul@multiplicand+1
  2711  053E  30DD               	movlw	221
  2712  053F  00A4               	movwf	___lmul@multiplicand
  2713  0540  2571               	fcall	___lmul
  2714  0541  1283               	bcf	3,5	;RP0=0, select bank0
  2715  0542  1303               	bcf	3,6	;RP1=0, select bank0
  2716  0543  0820               	movf	?___lmul,w
  2717  0544  07BB               	addwf	??_randomNumber,f
  2718  0545  0821               	movf	?___lmul+1,w
  2719  0546  1803               	skipnc
  2720  0547  0F21               	incfsz	?___lmul+1,w
  2721  0548  2D4A               	goto	u1660
  2722  0549  2D4B               	goto	u1661
  2723  054A                     u1660:
  2724  054A  07BC               	addwf	??_randomNumber+1,f
  2725  054B                     u1661:
  2726  054B  0822               	movf	?___lmul+2,w
  2727  054C  1803               	skipnc
  2728  054D  0F22               	incfsz	?___lmul+2,w
  2729  054E  2D50               	goto	u1662
  2730  054F  2D51               	goto	u1663
  2731  0550                     u1662:
  2732  0550  07BD               	addwf	??_randomNumber+2,f
  2733  0551                     u1663:
  2734  0551  0823               	movf	?___lmul+3,w
  2735  0552  1803               	skipnc
  2736  0553  0A23               	incf	?___lmul+3,w
  2737  0554  07BE               	addwf	??_randomNumber+3,f
  2738  0555  083E               	movf	??_randomNumber+3,w
  2739  0556  00B4               	movwf	___llmod@dividend+3
  2740  0557  083D               	movf	??_randomNumber+2,w
  2741  0558  00B3               	movwf	___llmod@dividend+2
  2742  0559  083C               	movf	??_randomNumber+1,w
  2743  055A  00B2               	movwf	___llmod@dividend+1
  2744  055B  083B               	movf	??_randomNumber,w
  2745  055C  00B1               	movwf	___llmod@dividend
  2746  055D  24C8               	fcall	___llmod
  2747  055E  1283               	bcf	3,5	;RP0=0, select bank0
  2748  055F  1303               	bcf	3,6	;RP1=0, select bank0
  2749  0560  0830               	movf	?___llmod+3,w
  2750  0561  00E7               	movwf	_randomSeed+3
  2751  0562  082F               	movf	?___llmod+2,w
  2752  0563  00E6               	movwf	_randomSeed+2
  2753  0564  082E               	movf	?___llmod+1,w
  2754  0565  00E5               	movwf	_randomSeed+1
  2755  0566  082D               	movf	?___llmod,w
  2756  0567  00E4               	movwf	_randomSeed
  2757  0568                     l2070:
  2758                           
  2759                           ;utils.c: 393:     return randomSeed;
  2760  0568  0867               	movf	_randomSeed+3,w
  2761  0569  00BA               	movwf	?_randomNumber+3
  2762  056A  0866               	movf	_randomSeed+2,w
  2763  056B  00B9               	movwf	?_randomNumber+2
  2764  056C  0865               	movf	_randomSeed+1,w
  2765  056D  00B8               	movwf	?_randomNumber+1
  2766  056E  0864               	movf	_randomSeed,w
  2767  056F  00B7               	movwf	?_randomNumber
  2768  0570                     l212:
  2769  0570  0008               	return
  2770  0571                     __end_of_randomNumber:
  2771                           
  2772                           	psect	text10
  2773  0571                     __ptext10:	
  2774 ;; *************** function ___lmul *****************
  2775 ;; Defined at:
  2776 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul32.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2779 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  product         4    9[BANK0 ] unsigned long 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  4    0[BANK0 ] unsigned long 
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, status,0
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMMON   BANK0   BANK1
  2791 ;;      Params:         0       8       0
  2792 ;;      Locals:         0       4       0
  2793 ;;      Temps:          0       1       0
  2794 ;;      Totals:         0      13       0
  2795 ;;Total ram usage:       13 bytes
  2796 ;; Hardware stack levels used: 1
  2797 ;; Hardware stack levels required when called: 1
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_randomNumber
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           
  2806                           ;psect for function ___lmul
  2807  0571                     ___lmul:
  2808  0571                     l2034:	
  2809                           ;incstack = 0
  2810                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2811                           
  2812  0571  3000               	movlw	0
  2813  0572  1283               	bcf	3,5	;RP0=0, select bank0
  2814  0573  1303               	bcf	3,6	;RP1=0, select bank0
  2815  0574  00AC               	movwf	___lmul@product+3
  2816  0575  3000               	movlw	0
  2817  0576  00AB               	movwf	___lmul@product+2
  2818  0577  3000               	movlw	0
  2819  0578  00AA               	movwf	___lmul@product+1
  2820  0579  3000               	movlw	0
  2821  057A  00A9               	movwf	___lmul@product
  2822  057B                     l2036:
  2823  057B  1C20               	btfss	___lmul@multiplier,0
  2824  057C  2D7E               	goto	u1551
  2825  057D  2D7F               	goto	u1550
  2826  057E                     u1551:
  2827  057E  2D96               	goto	l2040
  2828  057F                     u1550:
  2829  057F                     l2038:
  2830  057F  0824               	movf	___lmul@multiplicand,w
  2831  0580  07A9               	addwf	___lmul@product,f
  2832  0581  0825               	movf	___lmul@multiplicand+1,w
  2833  0582  1103               	clrz
  2834  0583  1803               	skipnc
  2835  0584  3E01               	addlw	1
  2836  0585  1903               	skipnz
  2837  0586  2D88               	goto	u1561
  2838  0587  07AA               	addwf	___lmul@product+1,f
  2839  0588                     u1561:
  2840  0588  0826               	movf	___lmul@multiplicand+2,w
  2841  0589  1103               	clrz
  2842  058A  1803               	skipnc
  2843  058B  3E01               	addlw	1
  2844  058C  1903               	skipnz
  2845  058D  2D8F               	goto	u1562
  2846  058E  07AB               	addwf	___lmul@product+2,f
  2847  058F                     u1562:
  2848  058F  0827               	movf	___lmul@multiplicand+3,w
  2849  0590  1103               	clrz
  2850  0591  1803               	skipnc
  2851  0592  3E01               	addlw	1
  2852  0593  1903               	skipnz
  2853  0594  2D96               	goto	u1563
  2854  0595  07AC               	addwf	___lmul@product+3,f
  2855  0596                     u1563:
  2856  0596                     l2040:
  2857  0596  3001               	movlw	1
  2858  0597  00A8               	movwf	??___lmul
  2859  0598                     u1575:
  2860  0598  1003               	clrc
  2861  0599  0DA4               	rlf	___lmul@multiplicand,f
  2862  059A  0DA5               	rlf	___lmul@multiplicand+1,f
  2863  059B  0DA6               	rlf	___lmul@multiplicand+2,f
  2864  059C  0DA7               	rlf	___lmul@multiplicand+3,f
  2865  059D  0BA8               	decfsz	??___lmul,f
  2866  059E  2D98               	goto	u1575
  2867  059F                     l2042:
  2868  059F  3001               	movlw	1
  2869  05A0                     u1585:
  2870  05A0  1003               	clrc
  2871  05A1  0CA3               	rrf	___lmul@multiplier+3,f
  2872  05A2  0CA2               	rrf	___lmul@multiplier+2,f
  2873  05A3  0CA1               	rrf	___lmul@multiplier+1,f
  2874  05A4  0CA0               	rrf	___lmul@multiplier,f
  2875  05A5  3EFF               	addlw	-1
  2876  05A6  1D03               	skipz
  2877  05A7  2DA0               	goto	u1585
  2878  05A8  0823               	movf	___lmul@multiplier+3,w
  2879  05A9  0422               	iorwf	___lmul@multiplier+2,w
  2880  05AA  0421               	iorwf	___lmul@multiplier+1,w
  2881  05AB  0420               	iorwf	___lmul@multiplier,w
  2882  05AC  1D03               	skipz
  2883  05AD  2DAF               	goto	u1591
  2884  05AE  2DB0               	goto	u1590
  2885  05AF                     u1591:
  2886  05AF  2D7B               	goto	l2036
  2887  05B0                     u1590:
  2888  05B0                     l2044:
  2889  05B0  082C               	movf	___lmul@product+3,w
  2890  05B1  00A3               	movwf	?___lmul+3
  2891  05B2  082B               	movf	___lmul@product+2,w
  2892  05B3  00A2               	movwf	?___lmul+2
  2893  05B4  082A               	movf	___lmul@product+1,w
  2894  05B5  00A1               	movwf	?___lmul+1
  2895  05B6  0829               	movf	___lmul@product,w
  2896  05B7  00A0               	movwf	?___lmul
  2897  05B8                     l318:
  2898  05B8  0008               	return
  2899  05B9                     __end_of___lmul:
  2900                           
  2901                           	psect	text11
  2902  04C8                     __ptext11:	
  2903 ;; *************** function ___llmod *****************
  2904 ;; Defined at:
  2905 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\llmod.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;  divisor         4   13[BANK0 ] unsigned long 
  2908 ;;  dividend        4   17[BANK0 ] unsigned long 
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  counter         1   22[BANK0 ] unsigned char 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  4   13[BANK0 ] unsigned long 
  2913 ;; Registers used:
  2914 ;;		wreg, status,2, status,0
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMMON   BANK0   BANK1
  2920 ;;      Params:         0       8       0
  2921 ;;      Locals:         0       1       0
  2922 ;;      Temps:          0       1       0
  2923 ;;      Totals:         0      10       0
  2924 ;;Total ram usage:       10 bytes
  2925 ;; Hardware stack levels used: 1
  2926 ;; Hardware stack levels required when called: 1
  2927 ;; This function calls:
  2928 ;;		Nothing
  2929 ;; This function is called by:
  2930 ;;		_main
  2931 ;;		_randomNumber
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           
  2936                           ;psect for function ___llmod
  2937  04C8                     ___llmod:
  2938  04C8                     l2048:	
  2939                           ;incstack = 0
  2940                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  2941                           
  2942  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  2943  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  2944  04CA  0830               	movf	___llmod@divisor+3,w
  2945  04CB  042F               	iorwf	___llmod@divisor+2,w
  2946  04CC  042E               	iorwf	___llmod@divisor+1,w
  2947  04CD  042D               	iorwf	___llmod@divisor,w
  2948  04CE  1903               	skipnz
  2949  04CF  2CD1               	goto	u1601
  2950  04D0  2CD2               	goto	u1600
  2951  04D1                     u1601:
  2952  04D1  2D15               	goto	l2064
  2953  04D2                     u1600:
  2954  04D2                     l2050:
  2955  04D2  01B6               	clrf	___llmod@counter
  2956  04D3  0AB6               	incf	___llmod@counter,f
  2957  04D4  2CE2               	goto	l2054
  2958  04D5                     l2052:
  2959  04D5  3001               	movlw	1
  2960  04D6  00B5               	movwf	??___llmod
  2961  04D7                     u1615:
  2962  04D7  1003               	clrc
  2963  04D8  0DAD               	rlf	___llmod@divisor,f
  2964  04D9  0DAE               	rlf	___llmod@divisor+1,f
  2965  04DA  0DAF               	rlf	___llmod@divisor+2,f
  2966  04DB  0DB0               	rlf	___llmod@divisor+3,f
  2967  04DC  0BB5               	decfsz	??___llmod,f
  2968  04DD  2CD7               	goto	u1615
  2969  04DE  3001               	movlw	1
  2970  04DF  00B5               	movwf	??___llmod
  2971  04E0  0835               	movf	??___llmod,w
  2972  04E1  07B6               	addwf	___llmod@counter,f
  2973  04E2                     l2054:
  2974  04E2  1FB0               	btfss	___llmod@divisor+3,7
  2975  04E3  2CE5               	goto	u1621
  2976  04E4  2CE6               	goto	u1620
  2977  04E5                     u1621:
  2978  04E5  2CD5               	goto	l2052
  2979  04E6                     u1620:
  2980  04E6                     l2056:
  2981  04E6  0830               	movf	___llmod@divisor+3,w
  2982  04E7  0234               	subwf	___llmod@dividend+3,w
  2983  04E8  1D03               	skipz
  2984  04E9  2CF4               	goto	u1635
  2985  04EA  082F               	movf	___llmod@divisor+2,w
  2986  04EB  0233               	subwf	___llmod@dividend+2,w
  2987  04EC  1D03               	skipz
  2988  04ED  2CF4               	goto	u1635
  2989  04EE  082E               	movf	___llmod@divisor+1,w
  2990  04EF  0232               	subwf	___llmod@dividend+1,w
  2991  04F0  1D03               	skipz
  2992  04F1  2CF4               	goto	u1635
  2993  04F2  082D               	movf	___llmod@divisor,w
  2994  04F3  0231               	subwf	___llmod@dividend,w
  2995  04F4                     u1635:
  2996  04F4  1C03               	skipc
  2997  04F5  2CF7               	goto	u1631
  2998  04F6  2CF8               	goto	u1630
  2999  04F7                     u1631:
  3000  04F7  2D06               	goto	l2060
  3001  04F8                     u1630:
  3002  04F8                     l2058:
  3003  04F8  082D               	movf	___llmod@divisor,w
  3004  04F9  02B1               	subwf	___llmod@dividend,f
  3005  04FA  082E               	movf	___llmod@divisor+1,w
  3006  04FB  1C03               	skipc
  3007  04FC  0F2E               	incfsz	___llmod@divisor+1,w
  3008  04FD  02B2               	subwf	___llmod@dividend+1,f
  3009  04FE  082F               	movf	___llmod@divisor+2,w
  3010  04FF  1C03               	skipc
  3011  0500  0F2F               	incfsz	___llmod@divisor+2,w
  3012  0501  02B3               	subwf	___llmod@dividend+2,f
  3013  0502  0830               	movf	___llmod@divisor+3,w
  3014  0503  1C03               	skipc
  3015  0504  0F30               	incfsz	___llmod@divisor+3,w
  3016  0505  02B4               	subwf	___llmod@dividend+3,f
  3017  0506                     l2060:
  3018  0506  3001               	movlw	1
  3019  0507                     u1645:
  3020  0507  1003               	clrc
  3021  0508  0CB0               	rrf	___llmod@divisor+3,f
  3022  0509  0CAF               	rrf	___llmod@divisor+2,f
  3023  050A  0CAE               	rrf	___llmod@divisor+1,f
  3024  050B  0CAD               	rrf	___llmod@divisor,f
  3025  050C  3EFF               	addlw	-1
  3026  050D  1D03               	skipz
  3027  050E  2D07               	goto	u1645
  3028  050F                     l2062:
  3029  050F  3001               	movlw	1
  3030  0510  02B6               	subwf	___llmod@counter,f
  3031  0511  1D03               	btfss	3,2
  3032  0512  2D14               	goto	u1651
  3033  0513  2D15               	goto	u1650
  3034  0514                     u1651:
  3035  0514  2CE6               	goto	l2056
  3036  0515                     u1650:
  3037  0515                     l2064:
  3038  0515  0834               	movf	___llmod@dividend+3,w
  3039  0516  00B0               	movwf	?___llmod+3
  3040  0517  0833               	movf	___llmod@dividend+2,w
  3041  0518  00AF               	movwf	?___llmod+2
  3042  0519  0832               	movf	___llmod@dividend+1,w
  3043  051A  00AE               	movwf	?___llmod+1
  3044  051B  0831               	movf	___llmod@dividend,w
  3045  051C  00AD               	movwf	?___llmod
  3046  051D                     l526:
  3047  051D  0008               	return
  3048  051E                     __end_of___llmod:
  3049                           
  3050                           	psect	text12
  3051  06CB                     __ptext12:	
  3052 ;; *************** function ___lwmod *****************
  3053 ;; Defined at:
  3054 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  divisor         2   31[BANK0 ] unsigned int 
  3057 ;;  dividend        2   33[BANK0 ] unsigned int 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  counter         1   36[BANK0 ] unsigned char 
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  2   31[BANK0 ] unsigned int 
  3062 ;; Registers used:
  3063 ;;		wreg, status,2, status,0
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMMON   BANK0   BANK1
  3069 ;;      Params:         0       4       0
  3070 ;;      Locals:         0       1       0
  3071 ;;      Temps:          0       1       0
  3072 ;;      Totals:         0       6       0
  3073 ;;Total ram usage:        6 bytes
  3074 ;; Hardware stack levels used: 1
  3075 ;; Hardware stack levels required when called: 1
  3076 ;; This function calls:
  3077 ;;		Nothing
  3078 ;; This function is called by:
  3079 ;;		_rollDice
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           
  3084                           ;psect for function ___lwmod
  3085  06CB                     ___lwmod:
  3086  06CB                     l2134:	
  3087                           ;incstack = 0
  3088                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3089                           
  3090  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  3091  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  3092  06CD  083F               	movf	___lwmod@divisor,w
  3093  06CE  0440               	iorwf	___lwmod@divisor+1,w
  3094  06CF  1903               	btfsc	3,2
  3095  06D0  2ED2               	goto	u1741
  3096  06D1  2ED3               	goto	u1740
  3097  06D2                     u1741:
  3098  06D2  2F02               	goto	l2152
  3099  06D3                     u1740:
  3100  06D3                     l2136:
  3101  06D3  01C4               	clrf	___lwmod@counter
  3102  06D4  0AC4               	incf	___lwmod@counter,f
  3103  06D5  2EE1               	goto	l2142
  3104  06D6                     l2138:
  3105  06D6  3001               	movlw	1
  3106  06D7                     u1755:
  3107  06D7  1003               	clrc
  3108  06D8  0DBF               	rlf	___lwmod@divisor,f
  3109  06D9  0DC0               	rlf	___lwmod@divisor+1,f
  3110  06DA  3EFF               	addlw	-1
  3111  06DB  1D03               	skipz
  3112  06DC  2ED7               	goto	u1755
  3113  06DD                     l2140:
  3114  06DD  3001               	movlw	1
  3115  06DE  00C3               	movwf	??___lwmod
  3116  06DF  0843               	movf	??___lwmod,w
  3117  06E0  07C4               	addwf	___lwmod@counter,f
  3118  06E1                     l2142:
  3119  06E1  1FC0               	btfss	___lwmod@divisor+1,7
  3120  06E2  2EE4               	goto	u1761
  3121  06E3  2EE5               	goto	u1760
  3122  06E4                     u1761:
  3123  06E4  2ED6               	goto	l2138
  3124  06E5                     u1760:
  3125  06E5                     l2144:
  3126  06E5  0840               	movf	___lwmod@divisor+1,w
  3127  06E6  0242               	subwf	___lwmod@dividend+1,w
  3128  06E7  1D03               	skipz
  3129  06E8  2EEB               	goto	u1775
  3130  06E9  083F               	movf	___lwmod@divisor,w
  3131  06EA  0241               	subwf	___lwmod@dividend,w
  3132  06EB                     u1775:
  3133  06EB  1C03               	skipc
  3134  06EC  2EEE               	goto	u1771
  3135  06ED  2EEF               	goto	u1770
  3136  06EE                     u1771:
  3137  06EE  2EF5               	goto	l2148
  3138  06EF                     u1770:
  3139  06EF                     l2146:
  3140  06EF  083F               	movf	___lwmod@divisor,w
  3141  06F0  02C1               	subwf	___lwmod@dividend,f
  3142  06F1  0840               	movf	___lwmod@divisor+1,w
  3143  06F2  1C03               	skipc
  3144  06F3  03C2               	decf	___lwmod@dividend+1,f
  3145  06F4  02C2               	subwf	___lwmod@dividend+1,f
  3146  06F5                     l2148:
  3147  06F5  3001               	movlw	1
  3148  06F6                     u1785:
  3149  06F6  1003               	clrc
  3150  06F7  0CC0               	rrf	___lwmod@divisor+1,f
  3151  06F8  0CBF               	rrf	___lwmod@divisor,f
  3152  06F9  3EFF               	addlw	-1
  3153  06FA  1D03               	skipz
  3154  06FB  2EF6               	goto	u1785
  3155  06FC                     l2150:
  3156  06FC  3001               	movlw	1
  3157  06FD  02C4               	subwf	___lwmod@counter,f
  3158  06FE  1D03               	btfss	3,2
  3159  06FF  2F01               	goto	u1791
  3160  0700  2F02               	goto	u1790
  3161  0701                     u1791:
  3162  0701  2EE5               	goto	l2144
  3163  0702                     u1790:
  3164  0702                     l2152:
  3165  0702  0842               	movf	___lwmod@dividend+1,w
  3166  0703  00C0               	movwf	?___lwmod+1
  3167  0704  0841               	movf	___lwmod@dividend,w
  3168  0705  00BF               	movwf	?___lwmod
  3169  0706                     l586:
  3170  0706  0008               	return
  3171  0707                     __end_of___lwmod:
  3172                           
  3173                           	psect	text13
  3174  05B9                     __ptext13:	
  3175 ;; *************** function ___lwdiv *****************
  3176 ;; Defined at:
  3177 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  divisor         2    0[BANK0 ] unsigned int 
  3180 ;;  dividend        2    2[BANK0 ] unsigned int 
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;  quotient        2    6[BANK0 ] unsigned int 
  3183 ;;  counter         1    5[BANK0 ] unsigned char 
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  2    0[BANK0 ] unsigned int 
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMMON   BANK0   BANK1
  3193 ;;      Params:         0       4       0
  3194 ;;      Locals:         0       3       0
  3195 ;;      Temps:          0       1       0
  3196 ;;      Totals:         0       8       0
  3197 ;;Total ram usage:        8 bytes
  3198 ;; Hardware stack levels used: 1
  3199 ;; Hardware stack levels required when called: 1
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_rollDice
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           
  3208                           ;psect for function ___lwdiv
  3209  05B9                     ___lwdiv:
  3210  05B9                     l2108:	
  3211                           ;incstack = 0
  3212                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3213                           
  3214  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  3215  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  3216  05BB  01A6               	clrf	___lwdiv@quotient
  3217  05BC  01A7               	clrf	___lwdiv@quotient+1
  3218  05BD                     l2110:
  3219  05BD  0820               	movf	___lwdiv@divisor,w
  3220  05BE  0421               	iorwf	___lwdiv@divisor+1,w
  3221  05BF  1903               	btfsc	3,2
  3222  05C0  2DC2               	goto	u1671
  3223  05C1  2DC3               	goto	u1670
  3224  05C2                     u1671:
  3225  05C2  2DFA               	goto	l2130
  3226  05C3                     u1670:
  3227  05C3                     l2112:
  3228  05C3  01A5               	clrf	___lwdiv@counter
  3229  05C4  0AA5               	incf	___lwdiv@counter,f
  3230  05C5  2DD1               	goto	l2118
  3231  05C6                     l2114:
  3232  05C6  3001               	movlw	1
  3233  05C7                     u1685:
  3234  05C7  1003               	clrc
  3235  05C8  0DA0               	rlf	___lwdiv@divisor,f
  3236  05C9  0DA1               	rlf	___lwdiv@divisor+1,f
  3237  05CA  3EFF               	addlw	-1
  3238  05CB  1D03               	skipz
  3239  05CC  2DC7               	goto	u1685
  3240  05CD                     l2116:
  3241  05CD  3001               	movlw	1
  3242  05CE  00A4               	movwf	??___lwdiv
  3243  05CF  0824               	movf	??___lwdiv,w
  3244  05D0  07A5               	addwf	___lwdiv@counter,f
  3245  05D1                     l2118:
  3246  05D1  1FA1               	btfss	___lwdiv@divisor+1,7
  3247  05D2  2DD4               	goto	u1691
  3248  05D3  2DD5               	goto	u1690
  3249  05D4                     u1691:
  3250  05D4  2DC6               	goto	l2114
  3251  05D5                     u1690:
  3252  05D5                     l2120:
  3253  05D5  3001               	movlw	1
  3254  05D6                     u1705:
  3255  05D6  1003               	clrc
  3256  05D7  0DA6               	rlf	___lwdiv@quotient,f
  3257  05D8  0DA7               	rlf	___lwdiv@quotient+1,f
  3258  05D9  3EFF               	addlw	-1
  3259  05DA  1D03               	skipz
  3260  05DB  2DD6               	goto	u1705
  3261  05DC  0821               	movf	___lwdiv@divisor+1,w
  3262  05DD  0223               	subwf	___lwdiv@dividend+1,w
  3263  05DE  1D03               	skipz
  3264  05DF  2DE2               	goto	u1715
  3265  05E0  0820               	movf	___lwdiv@divisor,w
  3266  05E1  0222               	subwf	___lwdiv@dividend,w
  3267  05E2                     u1715:
  3268  05E2  1C03               	skipc
  3269  05E3  2DE5               	goto	u1711
  3270  05E4  2DE6               	goto	u1710
  3271  05E5                     u1711:
  3272  05E5  2DED               	goto	l2126
  3273  05E6                     u1710:
  3274  05E6                     l2122:
  3275  05E6  0820               	movf	___lwdiv@divisor,w
  3276  05E7  02A2               	subwf	___lwdiv@dividend,f
  3277  05E8  0821               	movf	___lwdiv@divisor+1,w
  3278  05E9  1C03               	skipc
  3279  05EA  03A3               	decf	___lwdiv@dividend+1,f
  3280  05EB  02A3               	subwf	___lwdiv@dividend+1,f
  3281  05EC                     l2124:
  3282  05EC  1426               	bsf	___lwdiv@quotient,0
  3283  05ED                     l2126:
  3284  05ED  3001               	movlw	1
  3285  05EE                     u1725:
  3286  05EE  1003               	clrc
  3287  05EF  0CA1               	rrf	___lwdiv@divisor+1,f
  3288  05F0  0CA0               	rrf	___lwdiv@divisor,f
  3289  05F1  3EFF               	addlw	-1
  3290  05F2  1D03               	skipz
  3291  05F3  2DEE               	goto	u1725
  3292  05F4                     l2128:
  3293  05F4  3001               	movlw	1
  3294  05F5  02A5               	subwf	___lwdiv@counter,f
  3295  05F6  1D03               	btfss	3,2
  3296  05F7  2DF9               	goto	u1731
  3297  05F8  2DFA               	goto	u1730
  3298  05F9                     u1731:
  3299  05F9  2DD5               	goto	l2120
  3300  05FA                     u1730:
  3301  05FA                     l2130:
  3302  05FA  0827               	movf	___lwdiv@quotient+1,w
  3303  05FB  00A1               	movwf	?___lwdiv+1
  3304  05FC  0826               	movf	___lwdiv@quotient,w
  3305  05FD  00A0               	movwf	?___lwdiv
  3306  05FE                     l576:
  3307  05FE  0008               	return
  3308  05FF                     __end_of___lwdiv:
  3309                           
  3310                           	psect	text14
  3311  046D                     __ptext14:	
  3312 ;; *************** function ___awmod *****************
  3313 ;; Defined at:
  3314 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  3315 ;; Parameters:    Size  Location     Type
  3316 ;;  divisor         2    0[BANK0 ] int 
  3317 ;;  dividend        2    2[BANK0 ] int 
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;  sign            1    6[BANK0 ] unsigned char 
  3320 ;;  counter         1    5[BANK0 ] unsigned char 
  3321 ;; Return value:  Size  Location     Type
  3322 ;;                  2    0[BANK0 ] int 
  3323 ;; Registers used:
  3324 ;;		wreg, status,2, status,0
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMMON   BANK0   BANK1
  3330 ;;      Params:         0       4       0
  3331 ;;      Locals:         0       2       0
  3332 ;;      Temps:          0       1       0
  3333 ;;      Totals:         0       7       0
  3334 ;;Total ram usage:        7 bytes
  3335 ;; Hardware stack levels used: 1
  3336 ;; Hardware stack levels required when called: 1
  3337 ;; This function calls:
  3338 ;;		Nothing
  3339 ;; This function is called by:
  3340 ;;		_deviceStateMachine
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           
  3345                           ;psect for function ___awmod
  3346  046D                     ___awmod:
  3347  046D                     l2250:	
  3348                           ;incstack = 0
  3349                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3350                           
  3351  046D  1283               	bcf	3,5	;RP0=0, select bank0
  3352  046E  1303               	bcf	3,6	;RP1=0, select bank0
  3353  046F  01A6               	clrf	___awmod@sign
  3354  0470                     l2252:
  3355  0470  1FA3               	btfss	___awmod@dividend+1,7
  3356  0471  2C73               	goto	u1971
  3357  0472  2C74               	goto	u1970
  3358  0473                     u1971:
  3359  0473  2C7B               	goto	l2258
  3360  0474                     u1970:
  3361  0474                     l2254:
  3362  0474  09A2               	comf	___awmod@dividend,f
  3363  0475  09A3               	comf	___awmod@dividend+1,f
  3364  0476  0AA2               	incf	___awmod@dividend,f
  3365  0477  1903               	skipnz
  3366  0478  0AA3               	incf	___awmod@dividend+1,f
  3367  0479                     l2256:
  3368  0479  01A6               	clrf	___awmod@sign
  3369  047A  0AA6               	incf	___awmod@sign,f
  3370  047B                     l2258:
  3371  047B  1FA1               	btfss	___awmod@divisor+1,7
  3372  047C  2C7E               	goto	u1981
  3373  047D  2C7F               	goto	u1980
  3374  047E                     u1981:
  3375  047E  2C84               	goto	l2262
  3376  047F                     u1980:
  3377  047F                     l2260:
  3378  047F  09A0               	comf	___awmod@divisor,f
  3379  0480  09A1               	comf	___awmod@divisor+1,f
  3380  0481  0AA0               	incf	___awmod@divisor,f
  3381  0482  1903               	skipnz
  3382  0483  0AA1               	incf	___awmod@divisor+1,f
  3383  0484                     l2262:
  3384  0484  0820               	movf	___awmod@divisor,w
  3385  0485  0421               	iorwf	___awmod@divisor+1,w
  3386  0486  1903               	btfsc	3,2
  3387  0487  2C89               	goto	u1991
  3388  0488  2C8A               	goto	u1990
  3389  0489                     u1991:
  3390  0489  2CB9               	goto	l2280
  3391  048A                     u1990:
  3392  048A                     l2264:
  3393  048A  01A5               	clrf	___awmod@counter
  3394  048B  0AA5               	incf	___awmod@counter,f
  3395  048C  2C98               	goto	l2270
  3396  048D                     l2266:
  3397  048D  3001               	movlw	1
  3398  048E                     u2005:
  3399  048E  1003               	clrc
  3400  048F  0DA0               	rlf	___awmod@divisor,f
  3401  0490  0DA1               	rlf	___awmod@divisor+1,f
  3402  0491  3EFF               	addlw	-1
  3403  0492  1D03               	skipz
  3404  0493  2C8E               	goto	u2005
  3405  0494                     l2268:
  3406  0494  3001               	movlw	1
  3407  0495  00A4               	movwf	??___awmod
  3408  0496  0824               	movf	??___awmod,w
  3409  0497  07A5               	addwf	___awmod@counter,f
  3410  0498                     l2270:
  3411  0498  1FA1               	btfss	___awmod@divisor+1,7
  3412  0499  2C9B               	goto	u2011
  3413  049A  2C9C               	goto	u2010
  3414  049B                     u2011:
  3415  049B  2C8D               	goto	l2266
  3416  049C                     u2010:
  3417  049C                     l2272:
  3418  049C  0821               	movf	___awmod@divisor+1,w
  3419  049D  0223               	subwf	___awmod@dividend+1,w
  3420  049E  1D03               	skipz
  3421  049F  2CA2               	goto	u2025
  3422  04A0  0820               	movf	___awmod@divisor,w
  3423  04A1  0222               	subwf	___awmod@dividend,w
  3424  04A2                     u2025:
  3425  04A2  1C03               	skipc
  3426  04A3  2CA5               	goto	u2021
  3427  04A4  2CA6               	goto	u2020
  3428  04A5                     u2021:
  3429  04A5  2CAC               	goto	l2276
  3430  04A6                     u2020:
  3431  04A6                     l2274:
  3432  04A6  0820               	movf	___awmod@divisor,w
  3433  04A7  02A2               	subwf	___awmod@dividend,f
  3434  04A8  0821               	movf	___awmod@divisor+1,w
  3435  04A9  1C03               	skipc
  3436  04AA  03A3               	decf	___awmod@dividend+1,f
  3437  04AB  02A3               	subwf	___awmod@dividend+1,f
  3438  04AC                     l2276:
  3439  04AC  3001               	movlw	1
  3440  04AD                     u2035:
  3441  04AD  1003               	clrc
  3442  04AE  0CA1               	rrf	___awmod@divisor+1,f
  3443  04AF  0CA0               	rrf	___awmod@divisor,f
  3444  04B0  3EFF               	addlw	-1
  3445  04B1  1D03               	skipz
  3446  04B2  2CAD               	goto	u2035
  3447  04B3                     l2278:
  3448  04B3  3001               	movlw	1
  3449  04B4  02A5               	subwf	___awmod@counter,f
  3450  04B5  1D03               	btfss	3,2
  3451  04B6  2CB8               	goto	u2041
  3452  04B7  2CB9               	goto	u2040
  3453  04B8                     u2041:
  3454  04B8  2C9C               	goto	l2272
  3455  04B9                     u2040:
  3456  04B9                     l2280:
  3457  04B9  0826               	movf	___awmod@sign,w
  3458  04BA  1903               	btfsc	3,2
  3459  04BB  2CBD               	goto	u2051
  3460  04BC  2CBE               	goto	u2050
  3461  04BD                     u2051:
  3462  04BD  2CC3               	goto	l2284
  3463  04BE                     u2050:
  3464  04BE                     l2282:
  3465  04BE  09A2               	comf	___awmod@dividend,f
  3466  04BF  09A3               	comf	___awmod@dividend+1,f
  3467  04C0  0AA2               	incf	___awmod@dividend,f
  3468  04C1  1903               	skipnz
  3469  04C2  0AA3               	incf	___awmod@dividend+1,f
  3470  04C3                     l2284:
  3471  04C3  0823               	movf	___awmod@dividend+1,w
  3472  04C4  00A1               	movwf	?___awmod+1
  3473  04C5  0822               	movf	___awmod@dividend,w
  3474  04C6  00A0               	movwf	?___awmod
  3475  04C7                     l470:
  3476  04C7  0008               	return
  3477  04C8                     __end_of___awmod:
  3478                           
  3479                           	psect	text15
  3480  0404                     __ptext15:	
  3481 ;; *************** function ___awdiv *****************
  3482 ;; Defined at:
  3483 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;  divisor         2    0[BANK0 ] int 
  3486 ;;  dividend        2    2[BANK0 ] int 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  quotient        2    7[BANK0 ] int 
  3489 ;;  sign            1    6[BANK0 ] unsigned char 
  3490 ;;  counter         1    5[BANK0 ] unsigned char 
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  2    0[BANK0 ] int 
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMMON   BANK0   BANK1
  3500 ;;      Params:         0       4       0
  3501 ;;      Locals:         0       4       0
  3502 ;;      Temps:          0       1       0
  3503 ;;      Totals:         0       9       0
  3504 ;;Total ram usage:        9 bytes
  3505 ;; Hardware stack levels used: 1
  3506 ;; Hardware stack levels required when called: 1
  3507 ;; This function calls:
  3508 ;;		Nothing
  3509 ;; This function is called by:
  3510 ;;		_deviceStateMachine
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           
  3515                           ;psect for function ___awdiv
  3516  0404                     ___awdiv:
  3517  0404                     l2206:	
  3518                           ;incstack = 0
  3519                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3520                           
  3521  0404  1283               	bcf	3,5	;RP0=0, select bank0
  3522  0405  1303               	bcf	3,6	;RP1=0, select bank0
  3523  0406  01A6               	clrf	___awdiv@sign
  3524  0407                     l2208:
  3525  0407  1FA1               	btfss	___awdiv@divisor+1,7
  3526  0408  2C0A               	goto	u1871
  3527  0409  2C0B               	goto	u1870
  3528  040A                     u1871:
  3529  040A  2C12               	goto	l2214
  3530  040B                     u1870:
  3531  040B                     l2210:
  3532  040B  09A0               	comf	___awdiv@divisor,f
  3533  040C  09A1               	comf	___awdiv@divisor+1,f
  3534  040D  0AA0               	incf	___awdiv@divisor,f
  3535  040E  1903               	skipnz
  3536  040F  0AA1               	incf	___awdiv@divisor+1,f
  3537  0410                     l2212:
  3538  0410  01A6               	clrf	___awdiv@sign
  3539  0411  0AA6               	incf	___awdiv@sign,f
  3540  0412                     l2214:
  3541  0412  1FA3               	btfss	___awdiv@dividend+1,7
  3542  0413  2C15               	goto	u1881
  3543  0414  2C16               	goto	u1880
  3544  0415                     u1881:
  3545  0415  2C1F               	goto	l2220
  3546  0416                     u1880:
  3547  0416                     l2216:
  3548  0416  09A2               	comf	___awdiv@dividend,f
  3549  0417  09A3               	comf	___awdiv@dividend+1,f
  3550  0418  0AA2               	incf	___awdiv@dividend,f
  3551  0419  1903               	skipnz
  3552  041A  0AA3               	incf	___awdiv@dividend+1,f
  3553  041B                     l2218:
  3554  041B  3001               	movlw	1
  3555  041C  00A4               	movwf	??___awdiv
  3556  041D  0824               	movf	??___awdiv,w
  3557  041E  06A6               	xorwf	___awdiv@sign,f
  3558  041F                     l2220:
  3559  041F  01A7               	clrf	___awdiv@quotient
  3560  0420  01A8               	clrf	___awdiv@quotient+1
  3561  0421                     l2222:
  3562  0421  0820               	movf	___awdiv@divisor,w
  3563  0422  0421               	iorwf	___awdiv@divisor+1,w
  3564  0423  1903               	btfsc	3,2
  3565  0424  2C26               	goto	u1891
  3566  0425  2C27               	goto	u1890
  3567  0426                     u1891:
  3568  0426  2C5E               	goto	l2242
  3569  0427                     u1890:
  3570  0427                     l2224:
  3571  0427  01A5               	clrf	___awdiv@counter
  3572  0428  0AA5               	incf	___awdiv@counter,f
  3573  0429  2C35               	goto	l2230
  3574  042A                     l2226:
  3575  042A  3001               	movlw	1
  3576  042B                     u1905:
  3577  042B  1003               	clrc
  3578  042C  0DA0               	rlf	___awdiv@divisor,f
  3579  042D  0DA1               	rlf	___awdiv@divisor+1,f
  3580  042E  3EFF               	addlw	-1
  3581  042F  1D03               	skipz
  3582  0430  2C2B               	goto	u1905
  3583  0431                     l2228:
  3584  0431  3001               	movlw	1
  3585  0432  00A4               	movwf	??___awdiv
  3586  0433  0824               	movf	??___awdiv,w
  3587  0434  07A5               	addwf	___awdiv@counter,f
  3588  0435                     l2230:
  3589  0435  1FA1               	btfss	___awdiv@divisor+1,7
  3590  0436  2C38               	goto	u1911
  3591  0437  2C39               	goto	u1910
  3592  0438                     u1911:
  3593  0438  2C2A               	goto	l2226
  3594  0439                     u1910:
  3595  0439                     l2232:
  3596  0439  3001               	movlw	1
  3597  043A                     u1925:
  3598  043A  1003               	clrc
  3599  043B  0DA7               	rlf	___awdiv@quotient,f
  3600  043C  0DA8               	rlf	___awdiv@quotient+1,f
  3601  043D  3EFF               	addlw	-1
  3602  043E  1D03               	skipz
  3603  043F  2C3A               	goto	u1925
  3604  0440  0821               	movf	___awdiv@divisor+1,w
  3605  0441  0223               	subwf	___awdiv@dividend+1,w
  3606  0442  1D03               	skipz
  3607  0443  2C46               	goto	u1935
  3608  0444  0820               	movf	___awdiv@divisor,w
  3609  0445  0222               	subwf	___awdiv@dividend,w
  3610  0446                     u1935:
  3611  0446  1C03               	skipc
  3612  0447  2C49               	goto	u1931
  3613  0448  2C4A               	goto	u1930
  3614  0449                     u1931:
  3615  0449  2C51               	goto	l2238
  3616  044A                     u1930:
  3617  044A                     l2234:
  3618  044A  0820               	movf	___awdiv@divisor,w
  3619  044B  02A2               	subwf	___awdiv@dividend,f
  3620  044C  0821               	movf	___awdiv@divisor+1,w
  3621  044D  1C03               	skipc
  3622  044E  03A3               	decf	___awdiv@dividend+1,f
  3623  044F  02A3               	subwf	___awdiv@dividend+1,f
  3624  0450                     l2236:
  3625  0450  1427               	bsf	___awdiv@quotient,0
  3626  0451                     l2238:
  3627  0451  3001               	movlw	1
  3628  0452                     u1945:
  3629  0452  1003               	clrc
  3630  0453  0CA1               	rrf	___awdiv@divisor+1,f
  3631  0454  0CA0               	rrf	___awdiv@divisor,f
  3632  0455  3EFF               	addlw	-1
  3633  0456  1D03               	skipz
  3634  0457  2C52               	goto	u1945
  3635  0458                     l2240:
  3636  0458  3001               	movlw	1
  3637  0459  02A5               	subwf	___awdiv@counter,f
  3638  045A  1D03               	btfss	3,2
  3639  045B  2C5D               	goto	u1951
  3640  045C  2C5E               	goto	u1950
  3641  045D                     u1951:
  3642  045D  2C39               	goto	l2232
  3643  045E                     u1950:
  3644  045E                     l2242:
  3645  045E  0826               	movf	___awdiv@sign,w
  3646  045F  1903               	btfsc	3,2
  3647  0460  2C62               	goto	u1961
  3648  0461  2C63               	goto	u1960
  3649  0462                     u1961:
  3650  0462  2C68               	goto	l2246
  3651  0463                     u1960:
  3652  0463                     l2244:
  3653  0463  09A7               	comf	___awdiv@quotient,f
  3654  0464  09A8               	comf	___awdiv@quotient+1,f
  3655  0465  0AA7               	incf	___awdiv@quotient,f
  3656  0466  1903               	skipnz
  3657  0467  0AA8               	incf	___awdiv@quotient+1,f
  3658  0468                     l2246:
  3659  0468  0828               	movf	___awdiv@quotient+1,w
  3660  0469  00A1               	movwf	?___awdiv+1
  3661  046A  0827               	movf	___awdiv@quotient,w
  3662  046B  00A0               	movwf	?___awdiv
  3663  046C                     l457:
  3664  046C  0008               	return
  3665  046D                     __end_of___awdiv:
  3666                           
  3667                           	psect	text16
  3668  0644                     __ptext16:	
  3669 ;; *************** function _configBoard *****************
  3670 ;; Defined at:
  3671 ;;		line 148 in file "utils.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;		None
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      void 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMMON   BANK0   BANK1
  3685 ;;      Params:         0       0       0
  3686 ;;      Locals:         0       0       0
  3687 ;;      Temps:          0       1       0
  3688 ;;      Totals:         0       1       0
  3689 ;;Total ram usage:        1 bytes
  3690 ;; Hardware stack levels used: 1
  3691 ;; Hardware stack levels required when called: 1
  3692 ;; This function calls:
  3693 ;;		Nothing
  3694 ;; This function is called by:
  3695 ;;		_main
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function _configBoard
  3701  0644                     _configBoard:
  3702  0644                     l2288:	
  3703                           ;incstack = 0
  3704                           ; Regs used in _configBoard: [wreg+status,2+status,0]
  3705                           
  3706                           
  3707                           ;utils.c: 158:     OSCCON |= (1<<0);
  3708  0644  1683               	bsf	3,5	;RP0=1, select bank1
  3709  0645  1303               	bcf	3,6	;RP1=0, select bank1
  3710  0646  140F               	bsf	15,0	;volatile
  3711  0647                     l2290:
  3712                           
  3713                           ;utils.c: 159:     OSCCON &= ~(1<<1);
  3714  0647  30FD               	movlw	253
  3715  0648  1283               	bcf	3,5	;RP0=0, select bank0
  3716  0649  1303               	bcf	3,6	;RP1=0, select bank0
  3717  064A  00A0               	movwf	??_configBoard
  3718  064B  0820               	movf	??_configBoard,w
  3719  064C  1683               	bsf	3,5	;RP0=1, select bank1
  3720  064D  1303               	bcf	3,6	;RP1=0, select bank1
  3721  064E  058F               	andwf	15,f	;volatile
  3722  064F                     l2292:
  3723                           
  3724                           ;utils.c: 160:     OSCCON |= (1<<2);
  3725  064F  150F               	bsf	15,2	;volatile
  3726                           
  3727                           ;utils.c: 161:     OSCCON &= ~(1<<3);
  3728  0650  30F7               	movlw	247
  3729  0651  1283               	bcf	3,5	;RP0=0, select bank0
  3730  0652  1303               	bcf	3,6	;RP1=0, select bank0
  3731  0653  00A0               	movwf	??_configBoard
  3732  0654  0820               	movf	??_configBoard,w
  3733  0655  1683               	bsf	3,5	;RP0=1, select bank1
  3734  0656  1303               	bcf	3,6	;RP1=0, select bank1
  3735  0657  058F               	andwf	15,f	;volatile
  3736                           
  3737                           ;utils.c: 162:     OSCCON |= (0b01110000);
  3738  0658  3070               	movlw	112
  3739  0659  1283               	bcf	3,5	;RP0=0, select bank0
  3740  065A  1303               	bcf	3,6	;RP1=0, select bank0
  3741  065B  00A0               	movwf	??_configBoard
  3742  065C  0820               	movf	??_configBoard,w
  3743  065D  1683               	bsf	3,5	;RP0=1, select bank1
  3744  065E  1303               	bcf	3,6	;RP1=0, select bank1
  3745  065F  048F               	iorwf	15,f	;volatile
  3746  0660                     l2294:
  3747                           
  3748                           ;utils.c: 165:     ANSEL = 0x00;
  3749  0660  1283               	bcf	3,5	;RP0=0, select bank2
  3750  0661  1703               	bsf	3,6	;RP1=1, select bank2
  3751  0662  019E               	clrf	30	;volatile
  3752  0663                     l2296:
  3753                           
  3754                           ;utils.c: 168:     TRISA = 0b00110111;
  3755  0663  3037               	movlw	55
  3756  0664  1683               	bsf	3,5	;RP0=1, select bank1
  3757  0665  1303               	bcf	3,6	;RP1=0, select bank1
  3758  0666  0085               	movwf	5	;volatile
  3759  0667                     l2298:
  3760                           
  3761                           ;utils.c: 169:     TRISB = 0x00;
  3762  0667  0186               	clrf	6	;volatile
  3763  0668                     l2300:
  3764                           
  3765                           ;utils.c: 170:     TRISC = 0x00;
  3766  0668  0187               	clrf	7	;volatile
  3767  0669                     l2302:
  3768                           
  3769                           ;utils.c: 173:     PORTA = 0xff;
  3770  0669  30FF               	movlw	255
  3771  066A  1283               	bcf	3,5	;RP0=0, select bank0
  3772  066B  1303               	bcf	3,6	;RP1=0, select bank0
  3773  066C  0085               	movwf	5	;volatile
  3774  066D                     l2304:
  3775                           
  3776                           ;utils.c: 174:     PORTB = 0x00;
  3777  066D  0186               	clrf	6	;volatile
  3778  066E                     l2306:
  3779                           
  3780                           ;utils.c: 175:     PORTC = 0xff;
  3781  066E  30FF               	movlw	255
  3782  066F  0087               	movwf	7	;volatile
  3783  0670                     l2308:
  3784                           
  3785                           ;utils.c: 178:     nRABPU = 0;
  3786  0670  1683               	bsf	3,5	;RP0=1, select bank1
  3787  0671  1303               	bcf	3,6	;RP1=0, select bank1
  3788  0672  1381               	bcf	1,7	;volatile
  3789  0673                     l2310:
  3790                           
  3791                           ;utils.c: 186:     T0CS = 0;
  3792  0673  1281               	bcf	1,5	;volatile
  3793  0674                     l2312:
  3794                           
  3795                           ;utils.c: 187:     PSA = 0;
  3796  0674  1181               	bcf	1,3	;volatile
  3797  0675                     l2314:
  3798                           
  3799                           ;utils.c: 188:     PS0 = 1;
  3800  0675  1401               	bsf	1,0	;volatile
  3801  0676                     l2316:
  3802                           
  3803                           ;utils.c: 189:     PS1 = 1;
  3804  0676  1481               	bsf	1,1	;volatile
  3805  0677                     l2318:
  3806                           
  3807                           ;utils.c: 190:     PS2 = 0;
  3808  0677  1101               	bcf	1,2	;volatile
  3809  0678                     l2320:
  3810                           
  3811                           ;utils.c: 196:     TMR0= 133;
  3812  0678  3085               	movlw	133
  3813  0679  1283               	bcf	3,5	;RP0=0, select bank0
  3814  067A  1303               	bcf	3,6	;RP1=0, select bank0
  3815  067B  0081               	movwf	1	;volatile
  3816  067C                     l2322:
  3817                           
  3818                           ;utils.c: 204:     GIE=1;
  3819  067C  178B               	bsf	11,7	;volatile
  3820  067D                     l2324:
  3821                           
  3822                           ;utils.c: 205:     PEIE=1;
  3823  067D  170B               	bsf	11,6	;volatile
  3824  067E                     l2326:
  3825                           
  3826                           ;utils.c: 206:     T0IE=1;
  3827  067E  168B               	bsf	11,5	;volatile
  3828  067F                     l2328:
  3829                           
  3830                           ;utils.c: 207:     RABIE = 1;
  3831  067F  158B               	bsf	11,3	;volatile
  3832  0680                     l2330:
  3833                           
  3834                           ;utils.c: 210:     T0IF = 0;
  3835  0680  110B               	bcf	11,2	;volatile
  3836  0681                     l2332:
  3837                           
  3838                           ;utils.c: 211:     RABIF = 0;
  3839  0681  100B               	bcf	11,0	;volatile
  3840  0682                     l2334:
  3841                           
  3842                           ;utils.c: 214:     WPUA = 0b111111;
  3843  0682  303F               	movlw	63
  3844  0683  1683               	bsf	3,5	;RP0=1, select bank1
  3845  0684  1303               	bcf	3,6	;RP1=0, select bank1
  3846  0685  0095               	movwf	21	;volatile
  3847  0686                     l2336:
  3848                           
  3849                           ;utils.c: 217:     IOCA = 0b00110111;
  3850  0686  3037               	movlw	55
  3851  0687  0096               	movwf	22	;volatile
  3852  0688                     l160:
  3853  0688  0008               	return
  3854  0689                     __end_of_configBoard:
  3855                           
  3856                           	psect	text17
  3857  0374                     __ptext17:	
  3858 ;; *************** function _my_isr_routine *****************
  3859 ;; Defined at:
  3860 ;;		line 43 in file "main.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;		None
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;		None
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      void 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMMON   BANK0   BANK1
  3874 ;;      Params:         0       0       0
  3875 ;;      Locals:         0       0       0
  3876 ;;      Temps:          6       0       0
  3877 ;;      Totals:         6       0       0
  3878 ;;Total ram usage:        6 bytes
  3879 ;; Hardware stack levels used: 1
  3880 ;; This function calls:
  3881 ;;		Nothing
  3882 ;; This function is called by:
  3883 ;;		Interrupt level 1
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           
  3888                           ;psect for function _my_isr_routine
  3889  0374                     _my_isr_routine:
  3890  0374                     i1l1834:
  3891                           
  3892                           ;main.c: 46:     if(T0IF)
  3893  0374  1D0B               	btfss	11,2	;volatile
  3894  0375  2B77               	goto	u136_21
  3895  0376  2B78               	goto	u136_20
  3896  0377                     u136_21:
  3897  0377  2B8B               	goto	i1l1840
  3898  0378                     u136_20:
  3899  0378                     i1l1836:
  3900                           
  3901                           ;main.c: 47:     {;main.c: 48:         T0IF = 0;
  3902  0378  110B               	bcf	11,2	;volatile
  3903  0379                     i1l1838:
  3904                           
  3905                           ;main.c: 49:         TMR0 = 133;
  3906  0379  3085               	movlw	133
  3907  037A  1283               	bcf	3,5	;RP0=0, select bank0
  3908  037B  1303               	bcf	3,6	;RP1=0, select bank0
  3909  037C  0081               	movwf	1	;volatile
  3910                           
  3911                           ;main.c: 50:         uiCounterms++;
  3912  037D  3001               	movlw	1
  3913  037E  07E0               	addwf	_uiCounterms,f
  3914  037F  3000               	movlw	0
  3915  0380  1803               	skipnc
  3916  0381  3001               	movlw	1
  3917  0382  07E1               	addwf	_uiCounterms+1,f
  3918  0383  3000               	movlw	0
  3919  0384  1803               	skipnc
  3920  0385  3001               	movlw	1
  3921  0386  07E2               	addwf	_uiCounterms+2,f
  3922  0387  3000               	movlw	0
  3923  0388  1803               	skipnc
  3924  0389  3001               	movlw	1
  3925  038A  07E3               	addwf	_uiCounterms+3,f
  3926  038B                     i1l1840:
  3927                           
  3928                           ;main.c: 56:     if(RABIF){
  3929  038B  1C0B               	btfss	11,0	;volatile
  3930  038C  2B8E               	goto	u137_21
  3931  038D  2B8F               	goto	u137_20
  3932  038E                     u137_21:
  3933  038E  2BFD               	goto	i1l46
  3934  038F                     u137_20:
  3935  038F                     i1l1842:
  3936                           
  3937                           ;main.c: 58:         if(uiCounterms - uiButtonDebounce > 19){
  3938  038F  1283               	bcf	3,5	;RP0=0, select bank0
  3939  0390  1303               	bcf	3,6	;RP1=0, select bank0
  3940  0391  0860               	movf	_uiCounterms,w
  3941  0392  00F6               	movwf	??_my_isr_routine
  3942  0393  0861               	movf	_uiCounterms+1,w
  3943  0394  00F7               	movwf	??_my_isr_routine+1
  3944  0395  0862               	movf	_uiCounterms+2,w
  3945  0396  00F8               	movwf	??_my_isr_routine+2
  3946  0397  0863               	movf	_uiCounterms+3,w
  3947  0398  00F9               	movwf	??_my_isr_routine+3
  3948  0399  0870               	movf	_uiButtonDebounce,w
  3949  039A  02F6               	subwf	??_my_isr_routine,f
  3950  039B  0871               	movf	_uiButtonDebounce+1,w
  3951  039C  1C03               	skipc
  3952  039D  0F71               	incfsz	_uiButtonDebounce+1,w
  3953  039E  2BA0               	goto	u138_21
  3954  039F  2BA1               	goto	u138_22
  3955  03A0                     u138_21:
  3956  03A0  02F7               	subwf	??_my_isr_routine+1,f
  3957  03A1                     u138_22:
  3958  03A1  0872               	movf	_uiButtonDebounce+2,w
  3959  03A2  1C03               	skipc
  3960  03A3  0F72               	incfsz	_uiButtonDebounce+2,w
  3961  03A4  2BA6               	goto	u138_23
  3962  03A5  2BA7               	goto	u138_24
  3963  03A6                     u138_23:
  3964  03A6  02F8               	subwf	??_my_isr_routine+2,f
  3965  03A7                     u138_24:
  3966  03A7  0873               	movf	_uiButtonDebounce+3,w
  3967  03A8  1C03               	skipc
  3968  03A9  0F73               	incfsz	_uiButtonDebounce+3,w
  3969  03AA  2BAC               	goto	u138_25
  3970  03AB  2BAD               	goto	u138_26
  3971  03AC                     u138_25:
  3972  03AC  02F9               	subwf	??_my_isr_routine+3,f
  3973  03AD                     u138_26:
  3974  03AD  0879               	movf	??_my_isr_routine+3,w
  3975  03AE  1D03               	btfss	3,2
  3976  03AF  2BBE               	goto	u139_20
  3977  03B0  0878               	movf	??_my_isr_routine+2,w
  3978  03B1  1D03               	btfss	3,2
  3979  03B2  2BBE               	goto	u139_20
  3980  03B3  0877               	movf	??_my_isr_routine+1,w
  3981  03B4  1D03               	btfss	3,2
  3982  03B5  2BBE               	goto	u139_20
  3983  03B6  3014               	movlw	20
  3984  03B7  0276               	subwf	??_my_isr_routine,w
  3985  03B8  1D03               	skipz
  3986  03B9  2BBA               	goto	u139_23
  3987  03BA                     u139_23:
  3988  03BA  1C03               	btfss	3,0
  3989  03BB  2BBD               	goto	u139_21
  3990  03BC  2BBE               	goto	u139_20
  3991  03BD                     u139_21:
  3992  03BD  2BFC               	goto	i1l1856
  3993  03BE                     u139_20:
  3994  03BE                     i1l1844:
  3995                           
  3996                           ;main.c: 60:             readButtonStatus[0] = (PORTA & (1<<0))>>0;
  3997  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  3998  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  3999  03C0  0805               	movf	5,w	;volatile
  4000  03C1  3901               	andlw	1
  4001  03C2  00F6               	movwf	??_my_isr_routine
  4002  03C3  0876               	movf	??_my_isr_routine,w
  4003  03C4  00E8               	movwf	_readButtonStatus
  4004  03C5                     i1l1846:
  4005                           
  4006                           ;main.c: 61:             readButtonStatus[1] = (PORTA & (1<<1))>>1;
  4007  03C5  0805               	movf	5,w	;volatile
  4008  03C6  00F6               	movwf	??_my_isr_routine
  4009  03C7  1003               	clrc
  4010  03C8  0C76               	rrf	??_my_isr_routine,w
  4011  03C9  3901               	andlw	1
  4012  03CA  00F7               	movwf	??_my_isr_routine+1
  4013  03CB  0877               	movf	??_my_isr_routine+1,w
  4014  03CC  00E9               	movwf	_readButtonStatus+1
  4015  03CD                     i1l1848:
  4016                           
  4017                           ;main.c: 62:             readButtonStatus[2] = (PORTA & (1<<2))>>2;
  4018  03CD  0805               	movf	5,w	;volatile
  4019  03CE  00F6               	movwf	??_my_isr_routine
  4020  03CF  3002               	movlw	2
  4021  03D0                     u140_25:
  4022  03D0  1003               	clrc
  4023  03D1  0CF6               	rrf	??_my_isr_routine,f
  4024  03D2  3EFF               	addlw	-1
  4025  03D3  1D03               	skipz
  4026  03D4  2BD0               	goto	u140_25
  4027  03D5  0876               	movf	??_my_isr_routine,w
  4028  03D6  3901               	andlw	1
  4029  03D7  00F7               	movwf	??_my_isr_routine+1
  4030  03D8  0877               	movf	??_my_isr_routine+1,w
  4031  03D9  00EA               	movwf	_readButtonStatus+2
  4032  03DA                     i1l1850:
  4033                           
  4034                           ;main.c: 63:             readButtonStatus[3] = (PORTA & (1<<4))>>4;
  4035  03DA  0805               	movf	5,w	;volatile
  4036  03DB  00F6               	movwf	??_my_isr_routine
  4037  03DC  3004               	movlw	4
  4038  03DD                     u141_25:
  4039  03DD  1003               	clrc
  4040  03DE  0CF6               	rrf	??_my_isr_routine,f
  4041  03DF  3EFF               	addlw	-1
  4042  03E0  1D03               	skipz
  4043  03E1  2BDD               	goto	u141_25
  4044  03E2  0876               	movf	??_my_isr_routine,w
  4045  03E3  3901               	andlw	1
  4046  03E4  00F7               	movwf	??_my_isr_routine+1
  4047  03E5  0877               	movf	??_my_isr_routine+1,w
  4048  03E6  00EB               	movwf	_readButtonStatus+3
  4049  03E7                     i1l1852:
  4050                           
  4051                           ;main.c: 64:             readButtonStatus[4] = (PORTA & (1<<5))>>5;
  4052  03E7  0805               	movf	5,w	;volatile
  4053  03E8  00F6               	movwf	??_my_isr_routine
  4054  03E9  3005               	movlw	5
  4055  03EA                     u142_25:
  4056  03EA  1003               	clrc
  4057  03EB  0CF6               	rrf	??_my_isr_routine,f
  4058  03EC  3EFF               	addlw	-1
  4059  03ED  1D03               	skipz
  4060  03EE  2BEA               	goto	u142_25
  4061  03EF  0876               	movf	??_my_isr_routine,w
  4062  03F0  3901               	andlw	1
  4063  03F1  00F7               	movwf	??_my_isr_routine+1
  4064  03F2  0877               	movf	??_my_isr_routine+1,w
  4065  03F3  00EC               	movwf	_readButtonStatus+4
  4066  03F4                     i1l1854:
  4067                           
  4068                           ;main.c: 67:             uiButtonDebounce = uiCounterms;
  4069  03F4  0863               	movf	_uiCounterms+3,w
  4070  03F5  00F3               	movwf	_uiButtonDebounce+3
  4071  03F6  0862               	movf	_uiCounterms+2,w
  4072  03F7  00F2               	movwf	_uiButtonDebounce+2
  4073  03F8  0861               	movf	_uiCounterms+1,w
  4074  03F9  00F1               	movwf	_uiButtonDebounce+1
  4075  03FA  0860               	movf	_uiCounterms,w
  4076  03FB  00F0               	movwf	_uiButtonDebounce
  4077  03FC                     i1l1856:
  4078                           
  4079                           ;main.c: 70:         RABIF = 0;
  4080  03FC  100B               	bcf	11,0	;volatile
  4081  03FD                     i1l46:
  4082  03FD  087B               	movf	??_my_isr_routine+5,w
  4083  03FE  008A               	movwf	10
  4084  03FF  0E7A               	swapf	??_my_isr_routine+4,w
  4085  0400  0083               	movwf	3
  4086  0401  0EFE               	swapf	btemp,f
  4087  0402  0E7E               	swapf	btemp,w
  4088  0403  0009               	retfie
  4089  0404                     __end_of_my_isr_routine:
  4090  007E                     btemp	set	126	;btemp
  4091  007E                     wtemp0	set	126
  4092                           
  4093                           	psect	intentry
  4094  0004                     __pintentry:	
  4095                           ;incstack = 0
  4096                           ; Regs used in _my_isr_routine: [wreg+status,2+status,0]
  4097                           
  4098  0004                     interrupt_function:
  4099  007E                     saved_w	set	btemp
  4100  0004  00FE               	movwf	btemp
  4101  0005  0E03               	swapf	3,w
  4102  0006  00FA               	movwf	??_my_isr_routine+4
  4103  0007  080A               	movf	10,w
  4104  0008  00FB               	movwf	??_my_isr_routine+5
  4105  0009  2B74               	ljmp	_my_isr_routine
  4106                           
  4107                           	psect	config
  4108                           
  4109                           ;Config register CONFIG @ 0x2007
  4110                           ;	Oscillator Selection bits
  4111                           ;	FOSC = INTRCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O function
      +                           on RA5/OSC1/CLKIN
  4112                           ;	Watchdog Timer Enable bit
  4113                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4114                           ;	Power-up Timer Enable bit
  4115                           ;	PWRTE = OFF, PWRT disabled
  4116                           ;	MCLR Pin Function Select bit
  4117                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  4118                           ;	Code Protection bit
  4119                           ;	CP = OFF, Program memory code protection is disabled
  4120                           ;	Data Code Protection bit
  4121                           ;	CPD = OFF, Data memory code protection is disabled
  4122                           ;	Brown-out Reset Selection bits
  4123                           ;	BOREN = OFF, BOR disabled
  4124                           ;	Internal External Switchover bit
  4125                           ;	IESO = ON, Internal External Switchover mode is enabled
  4126                           ;	Fail-Safe Clock Monitor Enabled bit
  4127                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4128  2007                     	org	8199
  4129  2007  34D4               	dw	13524

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     56      80
    BANK1            32      1      11

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _my_isr_routine in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_deviceStateMachine
    _shiftDisplays->_clearPin
    _shiftDisplays->_setPin
    _deviceStateMachine->_rollDice
    _rollDice->_writeCharOnDisplay
    _writeCharOnDisplay->___lwmod
    _randomNumber->___llmod
    ___llmod->___lmul
    ___lwmod->_randomNumber

Critical Paths under _my_isr_routine in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr_routine in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   10429
                                             52 BANK0      4     4      0
                                              0 BANK1      1     1      0
                            ___llmod
                        _configBoard
                 _deviceStateMachine
                        _initButtons
                        _initDisplay
                       _randomNumber
                      _shiftDisplays
 ---------------------------------------------------------------------------------
 (1) _shiftDisplays                                        1     1      0     428
                                              4 BANK0      1     1      0
                           _clearPin
                             _setPin
 ---------------------------------------------------------------------------------
 (2) _setPin                                               4     3      1     214
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _clearPin                                             4     3      1     214
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _initDisplay                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initButtons                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _deviceStateMachine                                   4     4      0    7732
                                             48 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                           _rollDice
                 _writeCharOnDisplay
 ---------------------------------------------------------------------------------
 (2) _rollDice                                             7     7      0    4620
                                             41 BANK0      7     7      0
                            ___lwdiv
                            ___lwmod
                       _randomNumber
                 _writeCharOnDisplay
 ---------------------------------------------------------------------------------
 (2) _writeCharOnDisplay                                   4     3      1    1452
                                             37 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _randomNumber                                         8     4      4    1088
                                             23 BANK0      8     4      4
                            ___llmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     316
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     772
                                             13 BANK0     10     2      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4    1132
                                             31 BANK0      6     2      4
                            ___lwdiv (ARG)
                       _randomNumber (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     781
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     793
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     805
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _my_isr_routine                                       6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___llmod
     ___lmul (ARG)
   _configBoard
   _deviceStateMachine
     ___awdiv
     ___awmod
     _rollDice
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
         _randomNumber (ARG)
           ___llmod
           ___lmul
       _randomNumber
       _writeCharOnDisplay
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
     _writeCharOnDisplay
   _initButtons
   _initDisplay
   _randomNumber
   _shiftDisplays
     _clearPin
     _setPin

 _my_isr_routine (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      1       B       6       34.4%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     38      50       4      100.0%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      67       8        0.0%
ABS                  0      0      67       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Nov 24 13:26:02 2021

                           l51 0136                             l58 01A4                   ___awdiv@sign 0026  
                           fsr 0004                            l212 0570                            l135 073B  
                          l160 0688                            l154 02D9                            l218 0373  
                          l138 0786                            l157 0763                            l318 05B8  
                          l182 0132                            l169 06CA                            l178 0643  
                          l470 04C7                            l526 051D                            l457 046C  
                          l576 05FE                            l586 0706                            _GIE 005F  
                          _PS0 0408                            _PS1 0409                            _PS2 040A  
                          _PSA 040B                 clearPin@ucPort 0020                            fsr0 0004  
                          indf 0000                   ___awmod@sign 0026                           l2100 02AE  
                         l2110 05BD                           l2120 05D5                           l2112 05C3  
                         l2040 0596                           l2200 02FF                           l2210 040B  
                         l2122 05E6                           l2114 05C6                           l2130 05FA  
                         l2050 04D2                           l2042 059F                           l2034 0571  
                         l2202 0303                           l2300 0668                           l2220 041F  
                         l2212 0410                           l2124 05EC                           l2116 05CD  
                         l2108 05B9                           l2140 06DD                           l2060 0506  
                         l2052 04D5                           l2044 05B0                           l2036 057B  
                         l2204 0309                           l2310 0673                           l2302 0669  
                         l2230 0435                           l2222 0421                           l2214 0412  
                         l2206 0404                           l2126 05ED                           l2118 05D1  
                         l2150 06FC                           l2142 06E1                           l2134 06CB  
                         l2062 050F                           l2054 04E2                           l2038 057F  
                         l2070 0568                           l2320 0678                           l2312 0674  
                         l2304 066D                           l2240 0458                           l2232 0439  
                         l2224 0427                           l2216 0416                           l2208 0407  
                         l2128 05F4                           l2144 06E5                           l2136 06D3  
                         l2152 0702                           l2056 04E6                           l2064 0515  
                         l2048 04C8                           l2080 024B                           l2400 0090  
                         l2160 069B                           l2330 0680                           l2322 067C  
                         l2314 0675                           l2306 066E                           l2234 044A  
                         l2226 042A                           l2242 045E                           l2218 041B  
                         l2250 046D                           l2146 06EF                           l2138 06D6  
                         l2058 04F8                           l2090 0282                           l2082 0256  
                         l2074 0234                           l2402 0095                           l2162 06A9  
                         l2332 0681                           l2324 067D                           l2316 0676  
                         l2308 0670                           l2244 0463                           l2236 0450  
                         l2228 0431                           l2260 047F                           l2252 0470  
                         l2148 06F5                           l2068 051E                           l2092 028D  
                         l2084 0261                           l2076 0235                           l2404 009A  
                         l2412 00A9                           l2340 073C                           l2180 0612  
                         l2156 068C                           l2334 0682                           l2326 067E  
                         l2318 0677                           l2246 0468                           l2238 0451  
                         l2270 0498                           l2262 0484                           l2254 0474  
                         l2094 0298                           l2086 026C                           l2078 0240  
                         l2430 00CE                           l2414 00BF                           l2406 009F  
                         l2350 074D                           l2342 073F                           l2182 0621  
                         l2158 068D                           l2336 0686                           l2328 067F  
                         l2272 049C                           l2264 048A                           l2280 04B9  
                         l2256 0479                           l2096 02A3                           l2088 0277  
                         l2424 00C6                           l2408 00A4                           l2352 074F  
                         l2344 0741                           l2176 0602                           l2168 06B7  
                         l2360 0707                           l2290 0647                           l2282 04BE  
                         l2274 04A6                           l2266 048D                           l2258 047B  
                         l2426 00CB                           l2434 00E4                           l2370 002D  
                         l2354 0757                           l2346 0743                           l2338 0764  
                         l2178 0603                           l2362 0713                           l2450 0133  
                         l2292 064F                           l2284 04C3                           l2276 04AC  
                         l2268 0494                           l2196 02DA                           l2436 00FA  
                         l2372 0032                           l2380 0035                           l2356 0759  
                         l2348 0745                           l2188 0630                           l2364 0726  
                         l2452 0153                           l2294 0660                           l2278 04B3  
                         l2198 02E0                           l2390 007B                           l2382 003A  
                         l2374 0033                           l2358 0761                           l2366 0728  
                         l2470 01C1                           l2462 018C                           l2454 0154  
                         l2296 0663                           l2288 0644                           l2392 0080  
                         l2384 003C                           l2368 0732                           l2480 01DC  
                         l2472 01C2                           l2464 0196                           l2456 015E  
                         l2298 0667                           l2650 00B1                           l2394 0086  
                         l2482 01E6                           l2466 019B                           l2458 0163  
                         l2652 00D6                           l2396 0089                           l2388 0075  
                         l2492 0222                           l2484 01E9                           l2468 01A2  
                         l2654 00EC                           l2646 06BF                           l2494 0229  
                         l2486 01FF                           l2478 01C5                           l2656 02B6  
                         l2648 0638                           l2488 0217                           _T0IE 005D  
                         _T0IF 005A                           _T0CS 040D                           u2010 049C  
                         u2011 049B                           u2020 04A6                           u2100 0086  
                         u2021 04A5                           u2005 048E                           u2101 0085  
                         u2110 008F                           u2111 008E                           u2040 04B9  
                         u2120 00C5                           u2200 01DC                           u2041 04B8  
                         u2025 04A2                           u2121 00C4                           u2201 01DB  
                         u2050 04BE                           u2210 01E6                           u2130 0153  
                         u2051 04BD                           u2035 04AD                           u2211 01E5  
                         u2131 0152                           _IOCA 0096                           u2060 0726  
                         u2220 0217                           u2140 015E                           u2061 0725  
                         u2221 0216                           u2141 015D                           u2070 0032  
                         u2230 0221                           u2150 0163                           u2071 0031  
                         u2231 0220                           u2151 0162                           u1600 04D2  
                         u2080 003A                           u2240 022F                           u2160 0172  
                         u1601 04D1                           u2081 0039                           u2065 0722  
                         u2241 022E                           u2161 0173                           u2090 007B  
                         u2170 0196                           u2162 0178                           u2091 007A  
                         u2171 0195                           u2163 0179                           u1620 04E6  
                         u2180 019B                           u1621 04E5                           u2181 019A  
                         u1710 05E6                           u1630 04F8                           u1550 057F  
                         u2190 01C1                           u1711 05E5                           u1631 04F7  
                         u1615 04D7                           u1551 057E                           u2191 01C0  
                         u1705 05D6                           u1561 0588                           u1730 05FA  
                         u1650 0515                           u1562 058F                           u1731 05F9  
                         u1715 05E2                           u1651 0514                           u1635 04F4  
                         u1563 0596                           u1740 06D3                           u1660 054A  
                         u1804 0693                           u1725 05EE                           u1741 06D2  
                         u1645 0507                           u1661 054B                           u1805 0691  
                         u1910 0439                           u1670 05C3                           u1590 05B0  
                         u1662 0550                           u1814 06A1                           u1911 0438  
                         u1671 05C2                           u1591 05AF                           u1575 0598  
                         u1663 0551                           u1815 069F                           u1760 06E5  
                         u1824 06AF                           u1905 042B                           u1761 06E4  
                         u1585 05A0                           u1825 06AD                           u1930 044A  
                         u1690 05D5                           u1770 06EF                           u1834 0609  
                         u1931 0449                           u1691 05D4                           u1771 06EE  
                         u1755 06D7                           u1835 0607                           u1860 0309  
                         u1844 0618                           u1925 043A                           u1685 05C7  
                         u1861 0308                           u1845 0616                           u1950 045E  
                         u1870 040B                           u1790 0702                           u1854 0627  
                         u1951 045D                           u1935 0446                           u1871 040A  
                         u1791 0701                           u1775 06EB                           u1855 0625  
                         u1960 0463                           u1880 0416                           u1961 0462  
                         u1945 0452                           u1881 0415                           u1785 06F6  
                         u1890 0427                           u1970 0474                           u1891 0426  
                         u1971 0473                           _PEIE 005E                           u1980 047F  
                         u1981 047E                           u1990 048A                           u1991 0489  
                         i1l46 03FD                           _TMR0 0001                           _WPUA 0095  
                         _main 0133                           btemp 007E                           start 000A  
                 ?_initDisplay 0076                   ?_initButtons 0076               _readButtonStatus 0068  
                        ?_main 0076                __end_of___awdiv 046D                __end_of___awmod 04C8  
                        _ANSEL 011E                ___awdiv@divisor 0020                __end_of___llmod 051E  
              __end_of___lwdiv 05FF                          _RABIE 005B                          _RABIF 0058  
              __end_of___lwmod 0707                ___awdiv@counter 0025                          _PORTA 0005  
                        _PORTB 0006                          _PORTC 0007                          _TRISA 0085  
                        _TRISB 0086                          _TRISC 0087            ___lmul@multiplicand 0024  
                _indiceDisplay 0074                          main@i 00AA                          pclath 000A  
                        status 0003     __end_of_writeCharOnDisplay 02DA                          wtemp0 007E  
              __initialization 000B                   __end_of_main 0231                         ??_main 0054  
             ___llmod@dividend 0031               ___awdiv@dividend 0022                         i1l1840 038B  
                       i1l1850 03DA                         i1l1842 038F                         i1l1834 0374  
                       i1l1852 03E7                         i1l1844 03BE                         i1l1836 0378  
                       i1l1854 03F4                         i1l1846 03C5                         i1l1838 0379  
                       i1l1848 03CD                         i1l1856 03FC                         u140_25 03D0  
                       u141_25 03DD                         u142_25 03EA                         u136_20 0378  
                       u136_21 0377                         u137_20 038F                         u137_21 038E  
                       u138_21 03A0                         u138_22 03A1                         u138_23 03A6  
                       u138_24 03A7                         u138_25 03AC                         u138_26 03AD  
                       u139_20 03BE                         u139_21 03BD                         u139_23 03BA  
                       _OSCCON 008F               __end_of_clearPin 0644                         _Botoes 00A0  
                       _nRABPU 040F           __size_of_configBoard 0045                         ___lmul 0571  
                    ??___awdiv 0024          __end_of_shiftDisplays 073C                      ??___awmod 0024  
                    ??___llmod 0035                      ??___lwdiv 0024                      ??___lwmod 0043  
             ___awdiv@quotient 0027                         _setPin 0689                ___awmod@divisor 0020  
              ___awmod@counter 0025               __end_of_rollDice 0374                         saved_w 007E  
  __size_of_deviceStateMachine 0109        __end_of__initialization 0028               _uiButtonDebounce 0070  
               __pcstackCOMMON 0076                  ?_randomNumber 0037     deviceStateMachine@ucButton 0053  
                 __pidataBANK0 0787           __size_of_initDisplay 0023           __size_of_initButtons 0028  
                   __pbssBANK0 0058                     __pbssBANK1 00A0                 ??_randomNumber 003B  
                   __pmaintext 0133                        ?___lmul 0020                     __pintentry 0004  
               ___lmul@product 0029                        ?_setPin 0020                    setPin@ucPin 0023  
                    ?_clearPin 0020        __size_of_my_isr_routine 0090                      ?_rollDice 0076  
                      ___awdiv 0404                __size_of___lmul 0048                        ___awmod 046D  
                      ___llmod 04C8                        ___lwdiv 05B9                        ___lwmod 06CB  
           _writeCharOnDisplay 0231                __size_of_setPin 0042                        __ptext1 0707  
                      __ptext2 0689                        __ptext3 05FF                        __ptext4 0764  
                      __ptext5 073C                        __ptext6 002A                        __ptext7 02DA  
                      __ptext8 0231                        __ptext9 051E               ___awmod@dividend 0022  
          ?_writeCharOnDisplay 0045                     ??_clearPin 0021                     _randomSeed 0064  
                      clrloop0 0790           end_of_initialization 0028           ??_writeCharOnDisplay 0046  
              rollDice@ulTotal 004E                     ??_rollDice 0049  writeCharOnDisplay@ucCharacter 0048  
         __end_of_randomNumber 0571             _deviceCurrentState 006F                  clearPin@ucPin 0023  
                ??_configBoard 0020                 __end_of___lmul 05B9                 __end_of_setPin 06CB  
          start_initialization 000B     __end_of_deviceStateMachine 0133                 _my_isr_routine 0374  
       __size_of_shiftDisplays 0035                ___llmod@divisor 002D                ___llmod@counter 0036  
                ??_initDisplay 0020                  ??_initButtons 0020                       ??___lmul 0028  
          __end_of_configBoard 0689                    __pdataBANK0 0068                       ??_setPin 0021  
                  __pbssCOMMON 0070                      ___latbits 0000                  __pcstackBANK0 0020  
                __pcstackBANK1 00AA         __end_of_my_isr_routine 0404              __size_of_clearPin 0045  
                    _diceState 006D               ___lwdiv@dividend 0022                       ?___awdiv 0020  
                     ?___awmod 0020                       ?___llmod 002D                       ?___lwdiv 0020  
                     ?___lwmod 003F                  _shiftDisplays 0707              __size_of_rollDice 009A  
          __end_of_initDisplay 0787          __size_of_randomNumber 0053            __end_of_initButtons 0764  
              ?_my_isr_routine 0076                   setPin@ucPort 0020               ___lwdiv@quotient 0026  
            interrupt_function 0004                    _configBoard 0644                      clear_ram0 078F  
                 _randomNumber 051E                 ?_shiftDisplays 0076              ___lmul@multiplier 0020  
  __size_of_writeCharOnDisplay 00A9                    _initDisplay 0764                    _initButtons 073C  
             __size_of___awdiv 0069               __size_of___awmod 005B               __size_of___llmod 0056  
             __size_of___lwdiv 0046               __size_of___lwmod 003C        _Display7seg4digitsVetor 0058  
                     _clearPin 05FF                ___lwdiv@divisor 0020                ___lwdiv@counter 0025  
                     __ptext10 0571                       __ptext11 04C8                       __ptext12 06CB  
                     __ptext13 05B9                       __ptext14 046D                       __ptext15 0404  
                     __ptext16 0644                       __ptext17 0374                    _uiCounterms 0060  
                __size_of_main 00FE             _deviceStateMachine 002A                      rollDice@i 004D  
              ??_shiftDisplays 0024                       _rollDice 02DA            ?_deviceStateMachine 0076  
  writeCharOnDisplay@ucDisplay 0045           ??_deviceStateMachine 0050                       intlevel1 0000  
             ___lwmod@dividend 0041               ??_my_isr_routine 0076                ___lwmod@divisor 003F  
              ___lwmod@counter 0044                   ?_configBoard 0076  
