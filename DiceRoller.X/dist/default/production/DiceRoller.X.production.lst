

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Nov 19 17:33:44 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F687
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    31                           	dabs	1,0x7E,2
    32  0000                     
    33                           ; Version 2.20
    34                           ; Generated 12/02/2020 GMT
    35                           ; 
    36                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F687 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     	;# 
    68  0001                     	;# 
    69  0002                     	;# 
    70  0003                     	;# 
    71  0004                     	;# 
    72  0005                     	;# 
    73  0006                     	;# 
    74  0007                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  010C                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  0115                     	;# 
   118  0116                     	;# 
   119  0118                     	;# 
   120  0119                     	;# 
   121  011A                     	;# 
   122  011B                     	;# 
   123  011E                     	;# 
   124  011F                     	;# 
   125  018C                     	;# 
   126  018D                     	;# 
   127  019E                     	;# 
   128  0000                     	;# 
   129  0001                     	;# 
   130  0002                     	;# 
   131  0003                     	;# 
   132  0004                     	;# 
   133  0005                     	;# 
   134  0006                     	;# 
   135  0007                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001E                     	;# 
   150  001F                     	;# 
   151  0081                     	;# 
   152  0085                     	;# 
   153  0086                     	;# 
   154  0087                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  008F                     	;# 
   159  0090                     	;# 
   160  0093                     	;# 
   161  0093                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0095                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0096                     	;# 
   168  0097                     	;# 
   169  0098                     	;# 
   170  0099                     	;# 
   171  009A                     	;# 
   172  009B                     	;# 
   173  009E                     	;# 
   174  009F                     	;# 
   175  010C                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0118                     	;# 
   181  0119                     	;# 
   182  011A                     	;# 
   183  011B                     	;# 
   184  011E                     	;# 
   185  011F                     	;# 
   186  018C                     	;# 
   187  018D                     	;# 
   188  019E                     	;# 
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  000A                     	;# 
   198  000B                     	;# 
   199  000C                     	;# 
   200  000D                     	;# 
   201  000E                     	;# 
   202  000E                     	;# 
   203  000F                     	;# 
   204  0010                     	;# 
   205  0013                     	;# 
   206  0014                     	;# 
   207  0018                     	;# 
   208  0019                     	;# 
   209  001A                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  0087                     	;# 
   216  008C                     	;# 
   217  008D                     	;# 
   218  008E                     	;# 
   219  008F                     	;# 
   220  0090                     	;# 
   221  0093                     	;# 
   222  0093                     	;# 
   223  0093                     	;# 
   224  0094                     	;# 
   225  0095                     	;# 
   226  0095                     	;# 
   227  0096                     	;# 
   228  0096                     	;# 
   229  0097                     	;# 
   230  0098                     	;# 
   231  0099                     	;# 
   232  009A                     	;# 
   233  009B                     	;# 
   234  009E                     	;# 
   235  009F                     	;# 
   236  010C                     	;# 
   237  010C                     	;# 
   238  010D                     	;# 
   239  0115                     	;# 
   240  0116                     	;# 
   241  0118                     	;# 
   242  0119                     	;# 
   243  011A                     	;# 
   244  011B                     	;# 
   245  011E                     	;# 
   246  011F                     	;# 
   247  018C                     	;# 
   248  018D                     	;# 
   249  019E                     	;# 
   250                           
   251                           	psect	idataBANK0
   252  07EE                     __pidataBANK0:
   253                           
   254                           ;initializer for _readButtonStatus
   255  07EE  3401               	retlw	1
   256  07EF  3401               	retlw	1
   257  07F0  3401               	retlw	1
   258  07F1  3401               	retlw	1
   259  07F2  3401               	retlw	1
   260                           
   261                           ;initializer for _diceState
   262  07F3  3401               	retlw	1
   263  07F4  3406               	retlw	6
   264                           
   265                           ;initializer for _deviceCurrentState
   266  07F5  3401               	retlw	1
   267  0007                     _PORTC	set	7
   268  0005                     _PORTA	set	5
   269  0006                     _PORTB	set	6
   270  0001                     _TMR0	set	1
   271  005B                     _RABIE	set	91
   272  005D                     _T0IE	set	93
   273  005E                     _PEIE	set	94
   274  005F                     _GIE	set	95
   275  0058                     _RABIF	set	88
   276  005A                     _T0IF	set	90
   277  0096                     _IOCA	set	150
   278  0087                     _TRISC	set	135
   279  0086                     _TRISB	set	134
   280  0085                     _TRISA	set	133
   281  008F                     _OSCCON	set	143
   282  04AC                     _WPUA4	set	1196
   283  040A                     _PS2	set	1034
   284  0409                     _PS1	set	1033
   285  0408                     _PS0	set	1032
   286  040B                     _PSA	set	1035
   287  040D                     _T0CS	set	1037
   288  040F                     _nRABPU	set	1039
   289  0116                     _IOCB	set	278
   290  011F                     _ANSELH	set	287
   291  011E                     _ANSEL	set	286
   292  08AF                     _WPUB7	set	2223
   293  08AE                     _WPUB6	set	2222
   294  08AD                     _WPUB5	set	2221
   295  08AC                     _WPUB4	set	2220
   296                           
   297                           	psect	cinit
   298  000B                     start_initialization:	
   299                           ; #config settings
   300                           
   301  000B                     __initialization:
   302                           
   303                           ; Initialize objects allocated to BANK0
   304  000B  27EE               	fcall	__pidataBANK0	;fetch initializer
   305  000C  00E1               	movwf	__pdataBANK0& (0+127)
   306  000D  27EF               	fcall	__pidataBANK0+1	;fetch initializer
   307  000E  00E2               	movwf	(__pdataBANK0+1)& (0+127)
   308  000F  27F0               	fcall	__pidataBANK0+2	;fetch initializer
   309  0010  00E3               	movwf	(__pdataBANK0+2)& (0+127)
   310  0011  27F1               	fcall	__pidataBANK0+3	;fetch initializer
   311  0012  00E4               	movwf	(__pdataBANK0+3)& (0+127)
   312  0013  27F2               	fcall	__pidataBANK0+4	;fetch initializer
   313  0014  00E5               	movwf	(__pdataBANK0+4)& (0+127)
   314  0015  27F3               	fcall	__pidataBANK0+5	;fetch initializer
   315  0016  00E6               	movwf	(__pdataBANK0+5)& (0+127)
   316  0017  27F4               	fcall	__pidataBANK0+6	;fetch initializer
   317  0018  00E7               	movwf	(__pdataBANK0+6)& (0+127)
   318  0019  27F5               	fcall	__pidataBANK0+7	;fetch initializer
   319  001A  00E8               	movwf	(__pdataBANK0+7)& (0+127)
   320                           
   321                           ; Clear objects allocated to BANK1
   322  001B  1383               	bcf	3,7	;select IRP bank0
   323  001C  30A0               	movlw	low __pbssBANK1
   324  001D  0084               	movwf	4
   325  001E  30BB               	movlw	low (__pbssBANK1+27)
   326  001F  27F6               	fcall	clear_ram0
   327                           
   328                           ; Clear objects allocated to BANK0
   329  0020  3057               	movlw	low __pbssBANK0
   330  0021  0084               	movwf	4
   331  0022  3061               	movlw	low (__pbssBANK0+10)
   332  0023  27F6               	fcall	clear_ram0
   333                           
   334                           ; Clear objects allocated to COMMON
   335  0024  3076               	movlw	low __pbssCOMMON
   336  0025  0084               	movwf	4
   337  0026  307A               	movlw	low (__pbssCOMMON+4)
   338  0027  27F6               	fcall	clear_ram0
   339  0028                     end_of_initialization:	
   340                           ;End of C runtime variable initialization code
   341                           
   342  0028                     __end_of__initialization:
   343  0028  0183               	clrf	3
   344  0029  282A               	ljmp	_main	;jump to C main() function
   345                           
   346                           	psect	bssCOMMON
   347  0076                     __pbssCOMMON:
   348  0076                     _uiButtonDebounce:
   349  0076                     	ds	4
   350                           
   351                           	psect	bssBANK0
   352  0057                     __pbssBANK0:
   353  0057                     _uiCounterms:
   354  0057                     	ds	4
   355  005B                     _indiceDisplay:
   356  005B                     	ds	2
   357  005D                     _randomSeed:
   358  005D                     	ds	4
   359                           
   360                           	psect	dataBANK0
   361  0061                     __pdataBANK0:
   362  0061                     _readButtonStatus:
   363  0061                     	ds	5
   364  0066                     _diceState:
   365  0066                     	ds	2
   366  0068                     _deviceCurrentState:
   367  0068                     	ds	1
   368                           
   369                           	psect	bssBANK1
   370  00A0                     __pbssBANK1:
   371  00A0                     _Botoes:
   372  00A0                     	ds	15
   373  00AF                     _Display7seg4digitsVetor:
   374  00AF                     	ds	12
   375                           
   376                           	psect	clrtext
   377  07F6                     clear_ram0:	
   378                           ;	Called with FSR containing the base address, and
   379                           ;	W with the last address+1
   380                           
   381  07F6  0064               	clrwdt	;clear the watchdog before getting into this loop
   382  07F7                     clrloop0:
   383  07F7  0180               	clrf	0	;clear RAM location pointed to by FSR
   384  07F8  0A84               	incf	4,f	;increment pointer
   385  07F9  0604               	xorwf	4,w	;XOR with final address
   386  07FA  1903               	btfsc	3,2	;have we reached the end yet?
   387  07FB  3400               	retlw	0	;all done for this memory range, return
   388  07FC  0604               	xorwf	4,w	;XOR again to restore value
   389  07FD  2FF7               	goto	clrloop0	;do the next byte
   390                           
   391                           	psect	cstackCOMMON
   392  0070                     __pcstackCOMMON:
   393  0070                     ?_configBoard:
   394  0070                     ?_initDisplay:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_initButtons:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_shiftDisplays:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_deviceStateMachine:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_my_isr_routine:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ??_my_isr_routine:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_main:	
   413                           ; 1 bytes @ 0x0
   414                           
   415                           
   416                           ; 1 bytes @ 0x0
   417  0070                     	ds	6
   418                           
   419                           	psect	cstackBANK0
   420  0020                     __pcstackBANK0:
   421  0020                     ??_configBoard:
   422  0020                     ??_initDisplay:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0020                     ??_initButtons:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0020                     ?___bmul:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0020                     ?___awdiv:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0020                     ?___lmul:	
   435                           ; 2 bytes @ 0x0
   436                           
   437  0020                     ___bmul@multiplicand:	
   438                           ; 4 bytes @ 0x0
   439                           
   440  0020                     ___awdiv@divisor:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0020                     ___lmul@multiplier:	
   444                           ; 2 bytes @ 0x0
   445                           
   446                           
   447                           ; 4 bytes @ 0x0
   448  0020                     	ds	1
   449  0021                     ??___bmul:
   450                           
   451                           ; 1 bytes @ 0x1
   452  0021                     	ds	1
   453  0022                     ___bmul@product:
   454  0022                     ___awdiv@dividend:	
   455                           ; 1 bytes @ 0x2
   456                           
   457                           
   458                           ; 2 bytes @ 0x2
   459  0022                     	ds	1
   460  0023                     ___bmul@multiplier:
   461                           
   462                           ; 1 bytes @ 0x3
   463  0023                     	ds	1
   464  0024                     ?_setPin:
   465  0024                     ?_clearPin:	
   466                           ; 1 bytes @ 0x4
   467                           
   468  0024                     ??___awdiv:	
   469                           ; 1 bytes @ 0x4
   470                           
   471  0024                     setPin@ucPort:	
   472                           ; 1 bytes @ 0x4
   473                           
   474  0024                     clearPin@ucPort:	
   475                           ; 1 bytes @ 0x4
   476                           
   477  0024                     ___lmul@multiplicand:	
   478                           ; 1 bytes @ 0x4
   479                           
   480                           
   481                           ; 4 bytes @ 0x4
   482  0024                     	ds	1
   483  0025                     ??_setPin:
   484  0025                     ??_clearPin:	
   485                           ; 1 bytes @ 0x5
   486                           
   487  0025                     ___awdiv@counter:	
   488                           ; 1 bytes @ 0x5
   489                           
   490                           
   491                           ; 1 bytes @ 0x5
   492  0025                     	ds	1
   493  0026                     ___awdiv@sign:
   494                           
   495                           ; 1 bytes @ 0x6
   496  0026                     	ds	1
   497  0027                     setPin@ucPin:
   498  0027                     clearPin@ucPin:	
   499                           ; 1 bytes @ 0x7
   500                           
   501  0027                     ___awdiv@quotient:	
   502                           ; 1 bytes @ 0x7
   503                           
   504                           
   505                           ; 2 bytes @ 0x7
   506  0027                     	ds	1
   507  0028                     ??_shiftDisplays:
   508  0028                     ??___lmul:	
   509                           ; 1 bytes @ 0x8
   510                           
   511                           
   512                           ; 1 bytes @ 0x8
   513  0028                     	ds	1
   514  0029                     ___lmul@product:
   515                           
   516                           ; 4 bytes @ 0x9
   517  0029                     	ds	4
   518  002D                     ?___llmod:
   519  002D                     ___llmod@divisor:	
   520                           ; 4 bytes @ 0xD
   521                           
   522                           
   523                           ; 4 bytes @ 0xD
   524  002D                     	ds	4
   525  0031                     ___llmod@dividend:
   526                           
   527                           ; 4 bytes @ 0x11
   528  0031                     	ds	4
   529  0035                     ??___llmod:
   530                           
   531                           ; 1 bytes @ 0x15
   532  0035                     	ds	1
   533  0036                     ___llmod@counter:
   534                           
   535                           ; 1 bytes @ 0x16
   536  0036                     	ds	1
   537  0037                     ?_randomNumber:
   538                           
   539                           ; 4 bytes @ 0x17
   540  0037                     	ds	4
   541  003B                     ??_randomNumber:
   542                           
   543                           ; 1 bytes @ 0x1B
   544  003B                     	ds	4
   545  003F                     ?___awmod:
   546  003F                     ___awmod@divisor:	
   547                           ; 2 bytes @ 0x1F
   548                           
   549                           
   550                           ; 2 bytes @ 0x1F
   551  003F                     	ds	2
   552  0041                     ___awmod@dividend:
   553                           
   554                           ; 2 bytes @ 0x21
   555  0041                     	ds	2
   556  0043                     ??___awmod:
   557                           
   558                           ; 1 bytes @ 0x23
   559  0043                     	ds	1
   560  0044                     ___awmod@counter:
   561                           
   562                           ; 1 bytes @ 0x24
   563  0044                     	ds	1
   564  0045                     ___awmod@sign:
   565                           
   566                           ; 1 bytes @ 0x25
   567  0045                     	ds	1
   568  0046                     ?_writeCharOnDisplay:
   569  0046                     writeCharOnDisplay@ucDisplay:	
   570                           ; 1 bytes @ 0x26
   571                           
   572                           
   573                           ; 1 bytes @ 0x26
   574  0046                     	ds	1
   575  0047                     ??_writeCharOnDisplay:
   576                           
   577                           ; 1 bytes @ 0x27
   578  0047                     	ds	2
   579  0049                     writeCharOnDisplay@ucCharacter:
   580                           
   581                           ; 1 bytes @ 0x29
   582  0049                     	ds	1
   583  004A                     ??_deviceStateMachine:
   584                           
   585                           ; 1 bytes @ 0x2A
   586  004A                     	ds	3
   587  004D                     deviceStateMachine@ulTotalRoll:
   588                           
   589                           ; 2 bytes @ 0x2D
   590  004D                     	ds	2
   591  004F                     deviceStateMachine@i:
   592                           
   593                           ; 2 bytes @ 0x2F
   594  004F                     	ds	2
   595  0051                     deviceStateMachine@ucButton:
   596                           
   597                           ; 1 bytes @ 0x31
   598  0051                     	ds	1
   599  0052                     ??_main:
   600                           
   601                           ; 1 bytes @ 0x32
   602  0052                     	ds	4
   603  0056                     main@i:
   604                           
   605                           ; 1 bytes @ 0x36
   606  0056                     	ds	1
   607                           
   608                           	psect	maintext
   609  002A                     __pmaintext:	
   610 ;;
   611 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   612 ;;
   613 ;; *************** function _main *****************
   614 ;; Defined at:
   615 ;;		line 72 in file "main.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;		None
   618 ;; Auto vars:     Size  Location     Type
   619 ;;  i               1   54[BANK0 ] unsigned char 
   620 ;; Return value:  Size  Location     Type
   621 ;;                  1    wreg      void 
   622 ;; Registers used:
   623 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   624 ;; Tracked objects:
   625 ;;		On entry : B00/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMMON   BANK0   BANK1
   629 ;;      Params:         0       0       0
   630 ;;      Locals:         0       1       0
   631 ;;      Temps:          0       4       0
   632 ;;      Totals:         0       5       0
   633 ;;Total ram usage:        5 bytes
   634 ;; Hardware stack levels required when called: 4
   635 ;; This function calls:
   636 ;;		___bmul
   637 ;;		___llmod
   638 ;;		_configBoard
   639 ;;		_deviceStateMachine
   640 ;;		_initButtons
   641 ;;		_initDisplay
   642 ;;		_randomNumber
   643 ;;		_shiftDisplays
   644 ;;		_writeCharOnDisplay
   645 ;; This function is called by:
   646 ;;		Startup code after reset
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           
   651                           ;psect for function _main
   652  002A                     _main:
   653  002A                     l2488:	
   654                           ;incstack = 0
   655                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   656                           
   657                           
   658                           ;main.c: 75:     configBoard();
   659  002A  26E3               	fcall	_configBoard
   660                           
   661                           ;main.c: 78:     initDisplay();
   662  002B  27B9               	fcall	_initDisplay
   663                           
   664                           ;main.c: 79:     initButtons();
   665  002C  277D               	fcall	_initButtons
   666  002D                     l2490:
   667                           
   668                           ;main.c: 83:     writeCharOnDisplay('d', 0);
   669  002D  1283               	bcf	3,5	;RP0=0, select bank0
   670  002E  1303               	bcf	3,6	;RP1=0, select bank0
   671  002F  01C6               	clrf	writeCharOnDisplay@ucDisplay
   672  0030  3064               	movlw	100
   673  0031  22BE               	fcall	_writeCharOnDisplay
   674  0032                     l2492:
   675                           
   676                           ;main.c: 84:     writeCharOnDisplay('d', 1);
   677  0032  1283               	bcf	3,5	;RP0=0, select bank0
   678  0033  1303               	bcf	3,6	;RP1=0, select bank0
   679  0034  01C6               	clrf	writeCharOnDisplay@ucDisplay
   680  0035  0AC6               	incf	writeCharOnDisplay@ucDisplay,f
   681  0036  3064               	movlw	100
   682  0037  22BE               	fcall	_writeCharOnDisplay
   683  0038                     l2494:
   684                           
   685                           ;main.c: 85:     writeCharOnDisplay('d', 2);
   686  0038  3002               	movlw	2
   687  0039  1283               	bcf	3,5	;RP0=0, select bank0
   688  003A  1303               	bcf	3,6	;RP1=0, select bank0
   689  003B  00D2               	movwf	??_main
   690  003C  0852               	movf	??_main,w
   691  003D  00C6               	movwf	writeCharOnDisplay@ucDisplay
   692  003E  3064               	movlw	100
   693  003F  22BE               	fcall	_writeCharOnDisplay
   694  0040                     l2496:
   695                           
   696                           ;main.c: 86:     writeCharOnDisplay('d', 3);
   697  0040  3003               	movlw	3
   698  0041  1283               	bcf	3,5	;RP0=0, select bank0
   699  0042  1303               	bcf	3,6	;RP1=0, select bank0
   700  0043  00D2               	movwf	??_main
   701  0044  0852               	movf	??_main,w
   702  0045  00C6               	movwf	writeCharOnDisplay@ucDisplay
   703  0046  3064               	movlw	100
   704  0047  22BE               	fcall	_writeCharOnDisplay
   705  0048                     l2498:
   706                           
   707                           ;main.c: 88:      unsigned char i = 0;
   708  0048  1283               	bcf	3,5	;RP0=0, select bank0
   709  0049  1303               	bcf	3,6	;RP1=0, select bank0
   710  004A  01D6               	clrf	main@i
   711  004B                     l2500:
   712                           
   713                           ;main.c: 92:            if(0 == (uiCounterms%5)){
   714  004B  3000               	movlw	0
   715  004C  00B0               	movwf	___llmod@divisor+3
   716  004D  3000               	movlw	0
   717  004E  00AF               	movwf	___llmod@divisor+2
   718  004F  3000               	movlw	0
   719  0050  00AE               	movwf	___llmod@divisor+1
   720  0051  3005               	movlw	5
   721  0052  00AD               	movwf	___llmod@divisor
   722  0053  085A               	movf	_uiCounterms+3,w
   723  0054  00B4               	movwf	___llmod@dividend+3
   724  0055  0859               	movf	_uiCounterms+2,w
   725  0056  00B3               	movwf	___llmod@dividend+2
   726  0057  0858               	movf	_uiCounterms+1,w
   727  0058  00B2               	movwf	___llmod@dividend+1
   728  0059  0857               	movf	_uiCounterms,w
   729  005A  00B1               	movwf	___llmod@dividend
   730  005B  263A               	fcall	___llmod
   731  005C  1283               	bcf	3,5	;RP0=0, select bank0
   732  005D  1303               	bcf	3,6	;RP1=0, select bank0
   733  005E  0830               	movf	?___llmod+3,w
   734  005F  042F               	iorwf	?___llmod+2,w
   735  0060  042E               	iorwf	?___llmod+1,w
   736  0061  042D               	iorwf	?___llmod,w
   737  0062  1D03               	skipz
   738  0063  2865               	goto	u1981
   739  0064  2866               	goto	u1980
   740  0065                     u1981:
   741  0065  2867               	goto	l2504
   742  0066                     u1980:
   743  0066                     l2502:
   744                           
   745                           ;main.c: 93:                 shiftDisplays();
   746  0066  2451               	fcall	_shiftDisplays
   747  0067                     l2504:
   748                           
   749                           ;main.c: 96:             if((readButtonStatus[i] != Botoes[i].status) && readButtonStatu
      +                          s[i] == 0){
   750  0067  1283               	bcf	3,5	;RP0=0, select bank0
   751  0068  1303               	bcf	3,6	;RP1=0, select bank0
   752  0069  0856               	movf	main@i,w
   753  006A  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
   754  006B  0084               	movwf	4
   755  006C  1383               	bcf	3,7	;select IRP bank0
   756  006D  0800               	movf	0,w
   757  006E  00D2               	movwf	??_main
   758  006F  3003               	movlw	3
   759  0070  00D3               	movwf	??_main+1
   760  0071  0853               	movf	??_main+1,w
   761  0072  00A0               	movwf	___bmul@multiplicand
   762  0073  0856               	movf	main@i,w
   763  0074  27D7               	fcall	___bmul
   764  0075  3EA2               	addlw	(low ((_Botoes| 0+2)))& (0+255)
   765  0076  0084               	movwf	4
   766  0077  1383               	bcf	3,7	;select IRP bank1
   767  0078  0800               	movf	0,w
   768  0079  1283               	bcf	3,5	;RP0=0, select bank0
   769  007A  1303               	bcf	3,6	;RP1=0, select bank0
   770  007B  0652               	xorwf	??_main,w
   771  007C  1903               	skipnz
   772  007D  287F               	goto	u1991
   773  007E  2880               	goto	u1990
   774  007F                     u1991:
   775  007F  28BD               	goto	l2514
   776  0080                     u1990:
   777  0080                     l2506:
   778  0080  0856               	movf	main@i,w
   779  0081  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
   780  0082  0084               	movwf	4
   781  0083  0800               	movf	0,w
   782  0084  1D03               	btfss	3,2
   783  0085  2887               	goto	u2001
   784  0086  2888               	goto	u2000
   785  0087                     u2001:
   786  0087  28BD               	goto	l2514
   787  0088                     u2000:
   788  0088                     l2508:
   789                           
   790                           ;main.c: 98:                 randomSeed = uiCounterms + 47;
   791  0088  302F               	movlw	47
   792  0089  00D2               	movwf	??_main
   793  008A  3000               	movlw	0
   794  008B  00D3               	movwf	??_main+1
   795  008C  3000               	movlw	0
   796  008D  00D4               	movwf	??_main+2
   797  008E  3000               	movlw	0
   798  008F  00D5               	movwf	??_main+3
   799  0090  0857               	movf	_uiCounterms,w
   800  0091  07D2               	addwf	??_main,f
   801  0092  0858               	movf	_uiCounterms+1,w
   802  0093  1803               	skipnc
   803  0094  0F58               	incfsz	_uiCounterms+1,w
   804  0095  2897               	goto	u2010
   805  0096  2898               	goto	u2011
   806  0097                     u2010:
   807  0097  07D3               	addwf	??_main+1,f
   808  0098                     u2011:
   809  0098  0859               	movf	_uiCounterms+2,w
   810  0099  1803               	skipnc
   811  009A  0F59               	incfsz	_uiCounterms+2,w
   812  009B  289D               	goto	u2012
   813  009C  289E               	goto	u2013
   814  009D                     u2012:
   815  009D  07D4               	addwf	??_main+2,f
   816  009E                     u2013:
   817  009E  085A               	movf	_uiCounterms+3,w
   818  009F  1803               	skipnc
   819  00A0  0A5A               	incf	_uiCounterms+3,w
   820  00A1  07D5               	addwf	??_main+3,f
   821  00A2  0855               	movf	??_main+3,w
   822  00A3  00E0               	movwf	_randomSeed+3
   823  00A4  0854               	movf	??_main+2,w
   824  00A5  00DF               	movwf	_randomSeed+2
   825  00A6  0853               	movf	??_main+1,w
   826  00A7  00DE               	movwf	_randomSeed+1
   827  00A8  0852               	movf	??_main,w
   828  00A9  00DD               	movwf	_randomSeed
   829  00AA                     l2510:
   830                           
   831                           ;main.c: 100:                 Botoes[i].status = readButtonStatus[i];
   832  00AA  0856               	movf	main@i,w
   833  00AB  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
   834  00AC  0084               	movwf	4
   835  00AD  0800               	movf	0,w
   836  00AE  00D2               	movwf	??_main
   837  00AF  3003               	movlw	3
   838  00B0  00D3               	movwf	??_main+1
   839  00B1  0853               	movf	??_main+1,w
   840  00B2  00A0               	movwf	___bmul@multiplicand
   841  00B3  0856               	movf	main@i,w
   842  00B4  27D7               	fcall	___bmul
   843  00B5  3EA2               	addlw	(low ((_Botoes| 0+2)))& (0+255)
   844  00B6  0084               	movwf	4
   845  00B7  1283               	bcf	3,5	;RP0=0, select bank0
   846  00B8  1303               	bcf	3,6	;RP1=0, select bank0
   847  00B9  0852               	movf	??_main,w
   848  00BA  1383               	bcf	3,7	;select IRP bank1
   849  00BB  0080               	movwf	0
   850                           
   851                           ;main.c: 101:                 break;
   852  00BC  28EE               	goto	l2520
   853  00BD                     l2514:
   854  00BD  0856               	movf	main@i,w
   855  00BE  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
   856  00BF  0084               	movwf	4
   857  00C0  0800               	movf	0,w
   858  00C1  00D2               	movwf	??_main
   859  00C2  3003               	movlw	3
   860  00C3  00D3               	movwf	??_main+1
   861  00C4  0853               	movf	??_main+1,w
   862  00C5  00A0               	movwf	___bmul@multiplicand
   863  00C6  0856               	movf	main@i,w
   864  00C7  27D7               	fcall	___bmul
   865  00C8  3EA2               	addlw	(low ((_Botoes| 0+2)))& (0+255)
   866  00C9  0084               	movwf	4
   867  00CA  1383               	bcf	3,7	;select IRP bank1
   868  00CB  0800               	movf	0,w
   869  00CC  1283               	bcf	3,5	;RP0=0, select bank0
   870  00CD  1303               	bcf	3,6	;RP1=0, select bank0
   871  00CE  0652               	xorwf	??_main,w
   872  00CF  1903               	skipnz
   873  00D0  28D2               	goto	u2021
   874  00D1  28D3               	goto	u2020
   875  00D2                     u2021:
   876  00D2  284B               	goto	l2500
   877  00D3                     u2020:
   878  00D3                     l2516:
   879  00D3  0856               	movf	main@i,w
   880  00D4  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
   881  00D5  0084               	movwf	4
   882  00D6  0300               	decf	0,w
   883  00D7  1D03               	btfss	3,2
   884  00D8  28DA               	goto	u2031
   885  00D9  28DB               	goto	u2030
   886  00DA                     u2031:
   887  00DA  284B               	goto	l2500
   888  00DB                     u2030:
   889  00DB                     l2518:
   890                           
   891                           ;main.c: 103:                 Botoes[i].status = readButtonStatus[i];
   892  00DB  0856               	movf	main@i,w
   893  00DC  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
   894  00DD  0084               	movwf	4
   895  00DE  0800               	movf	0,w
   896  00DF  00D2               	movwf	??_main
   897  00E0  3003               	movlw	3
   898  00E1  00D3               	movwf	??_main+1
   899  00E2  0853               	movf	??_main+1,w
   900  00E3  00A0               	movwf	___bmul@multiplicand
   901  00E4  0856               	movf	main@i,w
   902  00E5  27D7               	fcall	___bmul
   903  00E6  3EA2               	addlw	(low ((_Botoes| 0+2)))& (0+255)
   904  00E7  0084               	movwf	4
   905  00E8  1283               	bcf	3,5	;RP0=0, select bank0
   906  00E9  1303               	bcf	3,6	;RP1=0, select bank0
   907  00EA  0852               	movf	??_main,w
   908  00EB  1383               	bcf	3,7	;select IRP bank1
   909  00EC  0080               	movwf	0
   910  00ED  284B               	goto	l2500
   911  00EE                     l2520:
   912                           
   913                           ;main.c: 107:    randomNumber();
   914  00EE  2690               	fcall	_randomNumber
   915                           
   916                           ;main.c: 108:    randomNumber();
   917  00EF  2690               	fcall	_randomNumber
   918  00F0                     l62:	
   919                           ;main.c: 110:       while(1){
   920                           
   921                           
   922                           ;main.c: 114:         if(0 == (uiCounterms%5)){
   923  00F0  3000               	movlw	0
   924  00F1  1283               	bcf	3,5	;RP0=0, select bank0
   925  00F2  1303               	bcf	3,6	;RP1=0, select bank0
   926  00F3  00B0               	movwf	___llmod@divisor+3
   927  00F4  3000               	movlw	0
   928  00F5  00AF               	movwf	___llmod@divisor+2
   929  00F6  3000               	movlw	0
   930  00F7  00AE               	movwf	___llmod@divisor+1
   931  00F8  3005               	movlw	5
   932  00F9  00AD               	movwf	___llmod@divisor
   933  00FA  085A               	movf	_uiCounterms+3,w
   934  00FB  00B4               	movwf	___llmod@dividend+3
   935  00FC  0859               	movf	_uiCounterms+2,w
   936  00FD  00B3               	movwf	___llmod@dividend+2
   937  00FE  0858               	movf	_uiCounterms+1,w
   938  00FF  00B2               	movwf	___llmod@dividend+1
   939  0100  0857               	movf	_uiCounterms,w
   940  0101  00B1               	movwf	___llmod@dividend
   941  0102  263A               	fcall	___llmod
   942  0103  1283               	bcf	3,5	;RP0=0, select bank0
   943  0104  1303               	bcf	3,6	;RP1=0, select bank0
   944  0105  0830               	movf	?___llmod+3,w
   945  0106  042F               	iorwf	?___llmod+2,w
   946  0107  042E               	iorwf	?___llmod+1,w
   947  0108  042D               	iorwf	?___llmod,w
   948  0109  1D03               	skipz
   949  010A  290C               	goto	u2041
   950  010B  290D               	goto	u2040
   951  010C                     u2041:
   952  010C  290E               	goto	l2524
   953  010D                     u2040:
   954  010D                     l2522:
   955                           
   956                           ;main.c: 115:             shiftDisplays();
   957  010D  2451               	fcall	_shiftDisplays
   958  010E                     l2524:
   959                           
   960                           ;main.c: 119:         for (i = 0; i < 5; i++){
   961  010E  1283               	bcf	3,5	;RP0=0, select bank0
   962  010F  1303               	bcf	3,6	;RP1=0, select bank0
   963  0110  01D6               	clrf	main@i
   964  0111                     l2530:
   965                           
   966                           ;main.c: 121:             if((readButtonStatus[i] != Botoes[i].status) && readButtonStat
      +                          us[i] == 0){
   967  0111  0856               	movf	main@i,w
   968  0112  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
   969  0113  0084               	movwf	4
   970  0114  1383               	bcf	3,7	;select IRP bank0
   971  0115  0800               	movf	0,w
   972  0116  00D2               	movwf	??_main
   973  0117  3003               	movlw	3
   974  0118  00D3               	movwf	??_main+1
   975  0119  0853               	movf	??_main+1,w
   976  011A  00A0               	movwf	___bmul@multiplicand
   977  011B  0856               	movf	main@i,w
   978  011C  27D7               	fcall	___bmul
   979  011D  3EA2               	addlw	(low ((_Botoes| 0+2)))& (0+255)
   980  011E  0084               	movwf	4
   981  011F  1383               	bcf	3,7	;select IRP bank1
   982  0120  0800               	movf	0,w
   983  0121  1283               	bcf	3,5	;RP0=0, select bank0
   984  0122  1303               	bcf	3,6	;RP1=0, select bank0
   985  0123  0652               	xorwf	??_main,w
   986  0124  1903               	skipnz
   987  0125  2927               	goto	u2051
   988  0126  2928               	goto	u2050
   989  0127                     u2051:
   990  0127  2949               	goto	l2536
   991  0128                     u2050:
   992  0128                     l2532:
   993  0128  0856               	movf	main@i,w
   994  0129  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
   995  012A  0084               	movwf	4
   996  012B  0800               	movf	0,w
   997  012C  1D03               	btfss	3,2
   998  012D  292F               	goto	u2061
   999  012E  2930               	goto	u2060
  1000  012F                     u2061:
  1001  012F  2949               	goto	l2536
  1002  0130                     u2060:
  1003  0130                     l2534:
  1004                           
  1005                           ;main.c: 123:                 deviceStateMachine(i + 1);
  1006  0130  0856               	movf	main@i,w
  1007  0131  3E01               	addlw	1
  1008  0132  2185               	fcall	_deviceStateMachine
  1009                           
  1010                           ;main.c: 125:                 Botoes[i].status = readButtonStatus[i];
  1011  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1012  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1013  0135  0856               	movf	main@i,w
  1014  0136  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
  1015  0137  0084               	movwf	4
  1016  0138  1383               	bcf	3,7	;select IRP bank0
  1017  0139  0800               	movf	0,w
  1018  013A  00D2               	movwf	??_main
  1019  013B  3003               	movlw	3
  1020  013C  00D3               	movwf	??_main+1
  1021  013D  0853               	movf	??_main+1,w
  1022  013E  00A0               	movwf	___bmul@multiplicand
  1023  013F  0856               	movf	main@i,w
  1024  0140  27D7               	fcall	___bmul
  1025  0141  3EA2               	addlw	(low ((_Botoes| 0+2)))& (0+255)
  1026  0142  0084               	movwf	4
  1027  0143  1283               	bcf	3,5	;RP0=0, select bank0
  1028  0144  1303               	bcf	3,6	;RP1=0, select bank0
  1029  0145  0852               	movf	??_main,w
  1030  0146  1383               	bcf	3,7	;select IRP bank1
  1031  0147  0080               	movwf	0
  1032                           
  1033                           ;main.c: 126:             }else if((readButtonStatus[i] != Botoes[i].status) && readButt
      +                          onStatus[i] == 1){
  1034  0148  2979               	goto	l2542
  1035  0149                     l2536:
  1036  0149  0856               	movf	main@i,w
  1037  014A  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
  1038  014B  0084               	movwf	4
  1039  014C  0800               	movf	0,w
  1040  014D  00D2               	movwf	??_main
  1041  014E  3003               	movlw	3
  1042  014F  00D3               	movwf	??_main+1
  1043  0150  0853               	movf	??_main+1,w
  1044  0151  00A0               	movwf	___bmul@multiplicand
  1045  0152  0856               	movf	main@i,w
  1046  0153  27D7               	fcall	___bmul
  1047  0154  3EA2               	addlw	(low ((_Botoes| 0+2)))& (0+255)
  1048  0155  0084               	movwf	4
  1049  0156  1383               	bcf	3,7	;select IRP bank1
  1050  0157  0800               	movf	0,w
  1051  0158  1283               	bcf	3,5	;RP0=0, select bank0
  1052  0159  1303               	bcf	3,6	;RP1=0, select bank0
  1053  015A  0652               	xorwf	??_main,w
  1054  015B  1903               	skipnz
  1055  015C  295E               	goto	u2071
  1056  015D  295F               	goto	u2070
  1057  015E                     u2071:
  1058  015E  2979               	goto	l2542
  1059  015F                     u2070:
  1060  015F                     l2538:
  1061  015F  0856               	movf	main@i,w
  1062  0160  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
  1063  0161  0084               	movwf	4
  1064  0162  0300               	decf	0,w
  1065  0163  1D03               	btfss	3,2
  1066  0164  2966               	goto	u2081
  1067  0165  2967               	goto	u2080
  1068  0166                     u2081:
  1069  0166  2979               	goto	l2542
  1070  0167                     u2080:
  1071  0167                     l2540:
  1072                           
  1073                           ;main.c: 127:                 Botoes[i].status = readButtonStatus[i];
  1074  0167  0856               	movf	main@i,w
  1075  0168  3E61               	addlw	(low (_readButtonStatus| 0))& (0+255)
  1076  0169  0084               	movwf	4
  1077  016A  0800               	movf	0,w
  1078  016B  00D2               	movwf	??_main
  1079  016C  3003               	movlw	3
  1080  016D  00D3               	movwf	??_main+1
  1081  016E  0853               	movf	??_main+1,w
  1082  016F  00A0               	movwf	___bmul@multiplicand
  1083  0170  0856               	movf	main@i,w
  1084  0171  27D7               	fcall	___bmul
  1085  0172  3EA2               	addlw	(low ((_Botoes| 0+2)))& (0+255)
  1086  0173  0084               	movwf	4
  1087  0174  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0175  1303               	bcf	3,6	;RP1=0, select bank0
  1089  0176  0852               	movf	??_main,w
  1090  0177  1383               	bcf	3,7	;select IRP bank1
  1091  0178  0080               	movwf	0
  1092  0179                     l2542:
  1093                           
  1094                           ;main.c: 130:         }
  1095  0179  3001               	movlw	1
  1096  017A  00D2               	movwf	??_main
  1097  017B  0852               	movf	??_main,w
  1098  017C  07D6               	addwf	main@i,f
  1099  017D                     l2544:
  1100  017D  3005               	movlw	5
  1101  017E  0256               	subwf	main@i,w
  1102  017F  1C03               	skipc
  1103  0180  2982               	goto	u2091
  1104  0181  2983               	goto	u2090
  1105  0182                     u2091:
  1106  0182  2911               	goto	l2530
  1107  0183                     u2090:
  1108  0183  28F0               	goto	l62
  1109  0184  280A               	ljmp	start
  1110  0185                     __end_of_main:
  1111                           
  1112                           	psect	text1
  1113  0451                     __ptext1:	
  1114 ;; *************** function _shiftDisplays *****************
  1115 ;; Defined at:
  1116 ;;		line 161 in file "utils.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;		None
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMMON   BANK0   BANK1
  1130 ;;      Params:         0       0       0
  1131 ;;      Locals:         0       0       0
  1132 ;;      Temps:          0       3       0
  1133 ;;      Totals:         0       3       0
  1134 ;;Total ram usage:        3 bytes
  1135 ;; Hardware stack levels used: 1
  1136 ;; Hardware stack levels required when called: 2
  1137 ;; This function calls:
  1138 ;;		___bmul
  1139 ;;		_clearPin
  1140 ;;		_setPin
  1141 ;; This function is called by:
  1142 ;;		_main
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           
  1147                           ;psect for function _shiftDisplays
  1148  0451                     _shiftDisplays:
  1149  0451                     l2388:	
  1150                           ;incstack = 0
  1151                           ; Regs used in _shiftDisplays: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1152                           
  1153                           
  1154                           ;utils.c: 164:     setPin(Display7seg4digitsVetor[indiceDisplay].pin, Display7seg4digits
      +                          Vetor[indiceDisplay].port);
  1155  0451  3003               	movlw	3
  1156  0452  1283               	bcf	3,5	;RP0=0, select bank0
  1157  0453  1303               	bcf	3,6	;RP1=0, select bank0
  1158  0454  00A8               	movwf	??_shiftDisplays
  1159  0455  0828               	movf	??_shiftDisplays,w
  1160  0456  00A0               	movwf	___bmul@multiplicand
  1161  0457  085B               	movf	_indiceDisplay,w
  1162  0458  27D7               	fcall	___bmul
  1163  0459  3EB0               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  1164  045A  0084               	movwf	4
  1165  045B  1383               	bcf	3,7	;select IRP bank1
  1166  045C  0800               	movf	0,w
  1167  045D  1283               	bcf	3,5	;RP0=0, select bank0
  1168  045E  1303               	bcf	3,6	;RP1=0, select bank0
  1169  045F  00A9               	movwf	??_shiftDisplays+1
  1170  0460  0829               	movf	??_shiftDisplays+1,w
  1171  0461  00A4               	movwf	setPin@ucPort
  1172  0462  3003               	movlw	3
  1173  0463  00AA               	movwf	??_shiftDisplays+2
  1174  0464  082A               	movf	??_shiftDisplays+2,w
  1175  0465  00A0               	movwf	___bmul@multiplicand
  1176  0466  085B               	movf	_indiceDisplay,w
  1177  0467  27D7               	fcall	___bmul
  1178  0468  3EAF               	addlw	(low (_Display7seg4digitsVetor| 0))& (0+255)
  1179  0469  0084               	movwf	4
  1180  046A  1383               	bcf	3,7	;select IRP bank1
  1181  046B  0800               	movf	0,w
  1182  046C  25E0               	fcall	_setPin
  1183  046D                     l2390:
  1184                           
  1185                           ;utils.c: 166:     indiceDisplay++;
  1186  046D  3001               	movlw	1
  1187  046E  1283               	bcf	3,5	;RP0=0, select bank0
  1188  046F  1303               	bcf	3,6	;RP1=0, select bank0
  1189  0470  07DB               	addwf	_indiceDisplay,f
  1190  0471  1803               	skipnc
  1191  0472  0ADC               	incf	_indiceDisplay+1,f
  1192  0473  3000               	movlw	0
  1193  0474  07DC               	addwf	_indiceDisplay+1,f
  1194  0475                     l2392:
  1195                           
  1196                           ;utils.c: 169:     if(indiceDisplay > 3){
  1197  0475  085C               	movf	_indiceDisplay+1,w
  1198  0476  3A80               	xorlw	128
  1199  0477  00FF               	movwf	btemp+1
  1200  0478  3080               	movlw	128
  1201  0479  027F               	subwf	btemp+1,w
  1202  047A  1D03               	skipz
  1203  047B  2C7E               	goto	u1895
  1204  047C  3004               	movlw	4
  1205  047D  025B               	subwf	_indiceDisplay,w
  1206  047E                     u1895:
  1207  047E  1C03               	skipc
  1208  047F  2C81               	goto	u1891
  1209  0480  2C82               	goto	u1890
  1210  0481                     u1891:
  1211  0481  2C86               	goto	l2396
  1212  0482                     u1890:
  1213  0482                     l2394:
  1214                           
  1215                           ;utils.c: 170:         indiceDisplay = 0;
  1216  0482  1283               	bcf	3,5	;RP0=0, select bank0
  1217  0483  1303               	bcf	3,6	;RP1=0, select bank0
  1218  0484  01DB               	clrf	_indiceDisplay
  1219  0485  01DC               	clrf	_indiceDisplay+1
  1220  0486                     l2396:
  1221                           
  1222                           ;utils.c: 174:     PORTC = (Display7seg4digitsVetor[indiceDisplay].data);
  1223  0486  3003               	movlw	3
  1224  0487  1283               	bcf	3,5	;RP0=0, select bank0
  1225  0488  1303               	bcf	3,6	;RP1=0, select bank0
  1226  0489  00A8               	movwf	??_shiftDisplays
  1227  048A  0828               	movf	??_shiftDisplays,w
  1228  048B  00A0               	movwf	___bmul@multiplicand
  1229  048C  085B               	movf	_indiceDisplay,w
  1230  048D  27D7               	fcall	___bmul
  1231  048E  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  1232  048F  0084               	movwf	4
  1233  0490  1383               	bcf	3,7	;select IRP bank1
  1234  0491  0800               	movf	0,w
  1235  0492  1283               	bcf	3,5	;RP0=0, select bank0
  1236  0493  1303               	bcf	3,6	;RP1=0, select bank0
  1237  0494  0087               	movwf	7	;volatile
  1238  0495                     l2398:
  1239                           
  1240                           ;utils.c: 177:     clearPin(Display7seg4digitsVetor[indiceDisplay].pin, Display7seg4digi
      +                          tsVetor[indiceDisplay].port);
  1241  0495  3003               	movlw	3
  1242  0496  00A8               	movwf	??_shiftDisplays
  1243  0497  0828               	movf	??_shiftDisplays,w
  1244  0498  00A0               	movwf	___bmul@multiplicand
  1245  0499  085B               	movf	_indiceDisplay,w
  1246  049A  27D7               	fcall	___bmul
  1247  049B  3EB0               	addlw	(low ((_Display7seg4digitsVetor| 0+1)))& (0+255)
  1248  049C  0084               	movwf	4
  1249  049D  1383               	bcf	3,7	;select IRP bank1
  1250  049E  0800               	movf	0,w
  1251  049F  1283               	bcf	3,5	;RP0=0, select bank0
  1252  04A0  1303               	bcf	3,6	;RP1=0, select bank0
  1253  04A1  00A9               	movwf	??_shiftDisplays+1
  1254  04A2  0829               	movf	??_shiftDisplays+1,w
  1255  04A3  00A4               	movwf	clearPin@ucPort
  1256  04A4  3003               	movlw	3
  1257  04A5  00AA               	movwf	??_shiftDisplays+2
  1258  04A6  082A               	movf	??_shiftDisplays+2,w
  1259  04A7  00A0               	movwf	___bmul@multiplicand
  1260  04A8  085B               	movf	_indiceDisplay,w
  1261  04A9  27D7               	fcall	___bmul
  1262  04AA  3EAF               	addlw	(low (_Display7seg4digitsVetor| 0))& (0+255)
  1263  04AB  0084               	movwf	4
  1264  04AC  1383               	bcf	3,7	;select IRP bank1
  1265  04AD  0800               	movf	0,w
  1266  04AE  2528               	fcall	_clearPin
  1267  04AF                     l2400:
  1268                           
  1269                           ;utils.c: 183:     if(0 != indiceDisplay){
  1270  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  1271  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  1272  04B1  085B               	movf	_indiceDisplay,w
  1273  04B2  045C               	iorwf	_indiceDisplay+1,w
  1274  04B3  1903               	btfsc	3,2
  1275  04B4  2CB6               	goto	u1901
  1276  04B5  2CB7               	goto	u1900
  1277  04B6                     u1901:
  1278  04B6  2CBB               	goto	l2404
  1279  04B7                     u1900:
  1280  04B7                     l2402:
  1281                           
  1282                           ;utils.c: 185:         setPin(0, 0);
  1283  04B7  01A4               	clrf	setPin@ucPort
  1284  04B8  3000               	movlw	0
  1285  04B9  25E0               	fcall	_setPin
  1286                           
  1287                           ;utils.c: 186:     }else{
  1288  04BA  2CBE               	goto	l200
  1289  04BB                     l2404:
  1290                           
  1291                           ;utils.c: 187:         clearPin(0, 0);
  1292  04BB  01A4               	clrf	clearPin@ucPort
  1293  04BC  3000               	movlw	0
  1294  04BD  2528               	fcall	_clearPin
  1295  04BE                     l200:
  1296  04BE  0008               	return
  1297  04BF                     __end_of_shiftDisplays:
  1298                           
  1299                           	psect	text2
  1300  05E0                     __ptext2:	
  1301 ;; *************** function _setPin *****************
  1302 ;; Defined at:
  1303 ;;		line 18 in file "utils.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;  ucPin           1    wreg     unsigned char 
  1306 ;;  ucPort          1    4[BANK0 ] unsigned char 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  ucPin           1    7[BANK0 ] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMMON   BANK0   BANK1
  1318 ;;      Params:         0       1       0
  1319 ;;      Locals:         0       1       0
  1320 ;;      Temps:          0       2       0
  1321 ;;      Totals:         0       4       0
  1322 ;;Total ram usage:        4 bytes
  1323 ;; Hardware stack levels used: 1
  1324 ;; Hardware stack levels required when called: 1
  1325 ;; This function calls:
  1326 ;;		Nothing
  1327 ;; This function is called by:
  1328 ;;		_shiftDisplays
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           
  1333                           ;psect for function _setPin
  1334  05E0                     _setPin:
  1335                           
  1336                           ;incstack = 0
  1337                           ; Regs used in _setPin: [wreg-fsr0h+status,2+status,0]
  1338                           ;setPin@ucPin stored from wreg
  1339  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  1340  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  1341  05E2  00A7               	movwf	setPin@ucPin
  1342  05E3                     l1598:
  1343                           
  1344                           ;utils.c: 21:     switch(ucPort){
  1345  05E3  2E26               	goto	l1618
  1346  05E4                     l1600:
  1347                           
  1348                           ;utils.c: 23:             if(ucPin >= 0 && ucPin <= 5){
  1349  05E4  3006               	movlw	6
  1350  05E5  0227               	subwf	setPin@ucPin,w
  1351  05E6  1803               	skipnc
  1352  05E7  2DE9               	goto	u1011
  1353  05E8  2DEA               	goto	u1010
  1354  05E9                     u1011:
  1355  05E9  2E39               	goto	l150
  1356  05EA                     u1010:
  1357  05EA                     l1602:
  1358                           
  1359                           ;utils.c: 24:                 PORTA |= (1<<ucPin);
  1360  05EA  3001               	movlw	1
  1361  05EB  00A5               	movwf	??_setPin
  1362  05EC  0A27               	incf	setPin@ucPin,w
  1363  05ED  2DF0               	goto	u1024
  1364  05EE                     u1025:
  1365  05EE  1003               	clrc
  1366  05EF  0DA5               	rlf	??_setPin,f
  1367  05F0                     u1024:
  1368  05F0  3EFF               	addlw	-1
  1369  05F1  1D03               	skipz
  1370  05F2  2DEE               	goto	u1025
  1371  05F3  0825               	movf	??_setPin,w
  1372  05F4  00A6               	movwf	??_setPin+1
  1373  05F5  0826               	movf	??_setPin+1,w
  1374  05F6  0485               	iorwf	5,f	;volatile
  1375                           
  1376                           ;utils.c: 25:             }else{
  1377  05F7  2E39               	goto	l150
  1378  05F8                     l1604:
  1379                           
  1380                           ;utils.c: 30:              if(ucPin >= 4 && ucPin <= 7){
  1381  05F8  3004               	movlw	4
  1382  05F9  0227               	subwf	setPin@ucPin,w
  1383  05FA  1C03               	skipc
  1384  05FB  2DFD               	goto	u1031
  1385  05FC  2DFE               	goto	u1030
  1386  05FD                     u1031:
  1387  05FD  2E39               	goto	l150
  1388  05FE                     u1030:
  1389  05FE                     l1606:
  1390  05FE  3008               	movlw	8
  1391  05FF  0227               	subwf	setPin@ucPin,w
  1392  0600  1803               	skipnc
  1393  0601  2E03               	goto	u1041
  1394  0602  2E04               	goto	u1040
  1395  0603                     u1041:
  1396  0603  2E39               	goto	l150
  1397  0604                     u1040:
  1398  0604                     l1608:
  1399                           
  1400                           ;utils.c: 31:                 PORTB |= (1<<ucPin);
  1401  0604  3001               	movlw	1
  1402  0605  00A5               	movwf	??_setPin
  1403  0606  0A27               	incf	setPin@ucPin,w
  1404  0607  2E0A               	goto	u1054
  1405  0608                     u1055:
  1406  0608  1003               	clrc
  1407  0609  0DA5               	rlf	??_setPin,f
  1408  060A                     u1054:
  1409  060A  3EFF               	addlw	-1
  1410  060B  1D03               	skipz
  1411  060C  2E08               	goto	u1055
  1412  060D  0825               	movf	??_setPin,w
  1413  060E  00A6               	movwf	??_setPin+1
  1414  060F  0826               	movf	??_setPin+1,w
  1415  0610  0486               	iorwf	6,f	;volatile
  1416                           
  1417                           ;utils.c: 32:             }else{
  1418  0611  2E39               	goto	l150
  1419  0612                     l1610:
  1420                           
  1421                           ;utils.c: 37:              if(ucPin >= 0 && ucPin <= 7){
  1422  0612  3008               	movlw	8
  1423  0613  0227               	subwf	setPin@ucPin,w
  1424  0614  1803               	skipnc
  1425  0615  2E17               	goto	u1061
  1426  0616  2E18               	goto	u1060
  1427  0617                     u1061:
  1428  0617  2E39               	goto	l150
  1429  0618                     u1060:
  1430  0618                     l1612:
  1431                           
  1432                           ;utils.c: 38:                 PORTC |= (1<<ucPin);
  1433  0618  3001               	movlw	1
  1434  0619  00A5               	movwf	??_setPin
  1435  061A  0A27               	incf	setPin@ucPin,w
  1436  061B  2E1E               	goto	u1074
  1437  061C                     u1075:
  1438  061C  1003               	clrc
  1439  061D  0DA5               	rlf	??_setPin,f
  1440  061E                     u1074:
  1441  061E  3EFF               	addlw	-1
  1442  061F  1D03               	skipz
  1443  0620  2E1C               	goto	u1075
  1444  0621  0825               	movf	??_setPin,w
  1445  0622  00A6               	movwf	??_setPin+1
  1446  0623  0826               	movf	??_setPin+1,w
  1447  0624  0487               	iorwf	7,f	;volatile
  1448                           
  1449                           ;utils.c: 39:             }else{
  1450  0625  2E39               	goto	l150
  1451  0626                     l1618:
  1452  0626  0824               	movf	setPin@ucPort,w
  1453  0627  00A5               	movwf	??_setPin
  1454  0628  01A6               	clrf	??_setPin+1
  1455                           
  1456                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1457                           ; Switch size 1, requested type "simple"
  1458                           ; Number of cases is 1, Range of values is 0 to 0
  1459                           ; switch strategies available:
  1460                           ; Name         Instructions Cycles
  1461                           ; simple_byte            4     3 (average)
  1462                           ; direct_byte            7     6 (fixed)
  1463                           ; jumptable            260     6 (fixed)
  1464                           ;	Chosen strategy is simple_byte
  1465  0629  0826               	movf	??_setPin+1,w
  1466  062A  3A00               	xorlw	0	; case 0
  1467  062B  1903               	skipnz
  1468  062C  2E2E               	goto	l2686
  1469  062D  2E39               	goto	l150
  1470  062E                     l2686:
  1471                           
  1472                           ; Switch size 1, requested type "simple"
  1473                           ; Number of cases is 3, Range of values is 0 to 2
  1474                           ; switch strategies available:
  1475                           ; Name         Instructions Cycles
  1476                           ; direct_byte            9     6 (fixed)
  1477                           ; simple_byte           10     6 (average)
  1478                           ; jumptable            260     6 (fixed)
  1479                           ;	Chosen strategy is simple_byte
  1480  062E  0825               	movf	??_setPin,w
  1481  062F  3A00               	xorlw	0	; case 0
  1482  0630  1903               	skipnz
  1483  0631  2DE4               	goto	l1600
  1484  0632  3A01               	xorlw	1	; case 1
  1485  0633  1903               	skipnz
  1486  0634  2DF8               	goto	l1604
  1487  0635  3A03               	xorlw	3	; case 2
  1488  0636  1903               	skipnz
  1489  0637  2E12               	goto	l1610
  1490  0638  2E39               	goto	l150
  1491  0639                     l150:
  1492  0639  0008               	return
  1493  063A                     __end_of_setPin:
  1494                           
  1495                           	psect	text3
  1496  0528                     __ptext3:	
  1497 ;; *************** function _clearPin *****************
  1498 ;; Defined at:
  1499 ;;		line 51 in file "utils.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;  ucPin           1    wreg     unsigned char 
  1502 ;;  ucPort          1    4[BANK0 ] unsigned char 
  1503 ;; Auto vars:     Size  Location     Type
  1504 ;;  ucPin           1    7[BANK0 ] unsigned char 
  1505 ;; Return value:  Size  Location     Type
  1506 ;;                  1    wreg      void 
  1507 ;; Registers used:
  1508 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1509 ;; Tracked objects:
  1510 ;;		On entry : 0/0
  1511 ;;		On exit  : 0/0
  1512 ;;		Unchanged: 0/0
  1513 ;; Data sizes:     COMMON   BANK0   BANK1
  1514 ;;      Params:         0       1       0
  1515 ;;      Locals:         0       1       0
  1516 ;;      Temps:          0       2       0
  1517 ;;      Totals:         0       4       0
  1518 ;;Total ram usage:        4 bytes
  1519 ;; Hardware stack levels used: 1
  1520 ;; Hardware stack levels required when called: 1
  1521 ;; This function calls:
  1522 ;;		Nothing
  1523 ;; This function is called by:
  1524 ;;		_shiftDisplays
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           
  1529                           ;psect for function _clearPin
  1530  0528                     _clearPin:
  1531                           
  1532                           ;incstack = 0
  1533                           ; Regs used in _clearPin: [wreg-fsr0h+status,2+status,0]
  1534                           ;clearPin@ucPin stored from wreg
  1535  0528  1283               	bcf	3,5	;RP0=0, select bank0
  1536  0529  1303               	bcf	3,6	;RP1=0, select bank0
  1537  052A  00A7               	movwf	clearPin@ucPin
  1538  052B                     l1626:
  1539                           
  1540                           ;utils.c: 53:     switch(ucPort){
  1541  052B  2D71               	goto	l1646
  1542  052C                     l1628:
  1543                           
  1544                           ;utils.c: 55:             if(ucPin >= 0 && ucPin <= 5){
  1545  052C  3006               	movlw	6
  1546  052D  0227               	subwf	clearPin@ucPin,w
  1547  052E  1803               	skipnc
  1548  052F  2D31               	goto	u1081
  1549  0530  2D32               	goto	u1080
  1550  0531                     u1081:
  1551  0531  2D84               	goto	l165
  1552  0532                     u1080:
  1553  0532                     l1630:
  1554                           
  1555                           ;utils.c: 56:                 PORTA &= ~(1<<ucPin);
  1556  0532  3001               	movlw	1
  1557  0533  00A5               	movwf	??_clearPin
  1558  0534  0A27               	incf	clearPin@ucPin,w
  1559  0535  2D38               	goto	u1094
  1560  0536                     u1095:
  1561  0536  1003               	clrc
  1562  0537  0DA5               	rlf	??_clearPin,f
  1563  0538                     u1094:
  1564  0538  3EFF               	addlw	-1
  1565  0539  1D03               	skipz
  1566  053A  2D36               	goto	u1095
  1567  053B  0825               	movf	??_clearPin,w
  1568  053C  3AFF               	xorlw	255
  1569  053D  00A6               	movwf	??_clearPin+1
  1570  053E  0826               	movf	??_clearPin+1,w
  1571  053F  0585               	andwf	5,f	;volatile
  1572                           
  1573                           ;utils.c: 57:             }else{
  1574  0540  2D84               	goto	l165
  1575  0541                     l1632:
  1576                           
  1577                           ;utils.c: 62:              if(ucPin >= 4 && ucPin <= 7){
  1578  0541  3004               	movlw	4
  1579  0542  0227               	subwf	clearPin@ucPin,w
  1580  0543  1C03               	skipc
  1581  0544  2D46               	goto	u1101
  1582  0545  2D47               	goto	u1100
  1583  0546                     u1101:
  1584  0546  2D84               	goto	l165
  1585  0547                     u1100:
  1586  0547                     l1634:
  1587  0547  3008               	movlw	8
  1588  0548  0227               	subwf	clearPin@ucPin,w
  1589  0549  1803               	skipnc
  1590  054A  2D4C               	goto	u1111
  1591  054B  2D4D               	goto	u1110
  1592  054C                     u1111:
  1593  054C  2D84               	goto	l165
  1594  054D                     u1110:
  1595  054D                     l1636:
  1596                           
  1597                           ;utils.c: 63:                 PORTB &= ~(1<<ucPin);
  1598  054D  3001               	movlw	1
  1599  054E  00A5               	movwf	??_clearPin
  1600  054F  0A27               	incf	clearPin@ucPin,w
  1601  0550  2D53               	goto	u1124
  1602  0551                     u1125:
  1603  0551  1003               	clrc
  1604  0552  0DA5               	rlf	??_clearPin,f
  1605  0553                     u1124:
  1606  0553  3EFF               	addlw	-1
  1607  0554  1D03               	skipz
  1608  0555  2D51               	goto	u1125
  1609  0556  0825               	movf	??_clearPin,w
  1610  0557  3AFF               	xorlw	255
  1611  0558  00A6               	movwf	??_clearPin+1
  1612  0559  0826               	movf	??_clearPin+1,w
  1613  055A  0586               	andwf	6,f	;volatile
  1614                           
  1615                           ;utils.c: 64:             }else{
  1616  055B  2D84               	goto	l165
  1617  055C                     l1638:
  1618                           
  1619                           ;utils.c: 69:              if(ucPin >= 0 && ucPin <= 7){
  1620  055C  3008               	movlw	8
  1621  055D  0227               	subwf	clearPin@ucPin,w
  1622  055E  1803               	skipnc
  1623  055F  2D61               	goto	u1131
  1624  0560  2D62               	goto	u1130
  1625  0561                     u1131:
  1626  0561  2D84               	goto	l165
  1627  0562                     u1130:
  1628  0562                     l1640:
  1629                           
  1630                           ;utils.c: 70:                 PORTC &= ~(1<<ucPin);
  1631  0562  3001               	movlw	1
  1632  0563  00A5               	movwf	??_clearPin
  1633  0564  0A27               	incf	clearPin@ucPin,w
  1634  0565  2D68               	goto	u1144
  1635  0566                     u1145:
  1636  0566  1003               	clrc
  1637  0567  0DA5               	rlf	??_clearPin,f
  1638  0568                     u1144:
  1639  0568  3EFF               	addlw	-1
  1640  0569  1D03               	skipz
  1641  056A  2D66               	goto	u1145
  1642  056B  0825               	movf	??_clearPin,w
  1643  056C  3AFF               	xorlw	255
  1644  056D  00A6               	movwf	??_clearPin+1
  1645  056E  0826               	movf	??_clearPin+1,w
  1646  056F  0587               	andwf	7,f	;volatile
  1647                           
  1648                           ;utils.c: 71:             }else{
  1649  0570  2D84               	goto	l165
  1650  0571                     l1646:
  1651  0571  0824               	movf	clearPin@ucPort,w
  1652  0572  00A5               	movwf	??_clearPin
  1653  0573  01A6               	clrf	??_clearPin+1
  1654                           
  1655                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1656                           ; Switch size 1, requested type "simple"
  1657                           ; Number of cases is 1, Range of values is 0 to 0
  1658                           ; switch strategies available:
  1659                           ; Name         Instructions Cycles
  1660                           ; simple_byte            4     3 (average)
  1661                           ; direct_byte            7     6 (fixed)
  1662                           ; jumptable            260     6 (fixed)
  1663                           ;	Chosen strategy is simple_byte
  1664  0574  0826               	movf	??_clearPin+1,w
  1665  0575  3A00               	xorlw	0	; case 0
  1666  0576  1903               	skipnz
  1667  0577  2D79               	goto	l2688
  1668  0578  2D84               	goto	l165
  1669  0579                     l2688:
  1670                           
  1671                           ; Switch size 1, requested type "simple"
  1672                           ; Number of cases is 3, Range of values is 0 to 2
  1673                           ; switch strategies available:
  1674                           ; Name         Instructions Cycles
  1675                           ; direct_byte            9     6 (fixed)
  1676                           ; simple_byte           10     6 (average)
  1677                           ; jumptable            260     6 (fixed)
  1678                           ;	Chosen strategy is simple_byte
  1679  0579  0825               	movf	??_clearPin,w
  1680  057A  3A00               	xorlw	0	; case 0
  1681  057B  1903               	skipnz
  1682  057C  2D2C               	goto	l1628
  1683  057D  3A01               	xorlw	1	; case 1
  1684  057E  1903               	skipnz
  1685  057F  2D41               	goto	l1632
  1686  0580  3A03               	xorlw	3	; case 2
  1687  0581  1903               	skipnz
  1688  0582  2D5C               	goto	l1638
  1689  0583  2D84               	goto	l165
  1690  0584                     l165:
  1691  0584  0008               	return
  1692  0585                     __end_of_clearPin:
  1693                           
  1694                           	psect	text4
  1695  07B9                     __ptext4:	
  1696 ;; *************** function _initDisplay *****************
  1697 ;; Defined at:
  1698 ;;		line 116 in file "utils.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;		None
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;		None
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg, status,2
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMMON   BANK0   BANK1
  1712 ;;      Params:         0       0       0
  1713 ;;      Locals:         0       0       0
  1714 ;;      Temps:          0       1       0
  1715 ;;      Totals:         0       1       0
  1716 ;;Total ram usage:        1 bytes
  1717 ;; Hardware stack levels used: 1
  1718 ;; Hardware stack levels required when called: 1
  1719 ;; This function calls:
  1720 ;;		Nothing
  1721 ;; This function is called by:
  1722 ;;		_main
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           
  1727                           ;psect for function _initDisplay
  1728  07B9                     _initDisplay:
  1729  07B9                     l2348:	
  1730                           ;incstack = 0
  1731                           ; Regs used in _initDisplay: [wreg+status,2]
  1732                           
  1733                           
  1734                           ;utils.c: 118:     Display7seg4digitsVetor[0].data = 0x00;
  1735  07B9  1683               	bsf	3,5	;RP0=1, select bank1
  1736  07BA  1303               	bcf	3,6	;RP1=0, select bank1
  1737  07BB  01B1               	clrf	(_Display7seg4digitsVetor^(0+128)+2)
  1738                           
  1739                           ;utils.c: 119:     Display7seg4digitsVetor[0].pin = 0;
  1740  07BC  01AF               	clrf	_Display7seg4digitsVetor^(0+128)
  1741                           
  1742                           ;utils.c: 120:     Display7seg4digitsVetor[0].port = 0;
  1743  07BD  01B0               	clrf	(_Display7seg4digitsVetor^(0+128)+1)
  1744                           
  1745                           ;utils.c: 122:     Display7seg4digitsVetor[1].data = 0x00;
  1746  07BE  01B4               	clrf	(_Display7seg4digitsVetor^(0+128)+5)
  1747  07BF                     l2350:
  1748                           
  1749                           ;utils.c: 123:     Display7seg4digitsVetor[1].pin = 5;
  1750  07BF  3005               	movlw	5
  1751  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  1752  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  1753  07C2  00A0               	movwf	??_initDisplay
  1754  07C3  0820               	movf	??_initDisplay,w
  1755  07C4  1683               	bsf	3,5	;RP0=1, select bank1
  1756  07C5  1303               	bcf	3,6	;RP1=0, select bank1
  1757  07C6  00B2               	movwf	(_Display7seg4digitsVetor^(0+128)+3)
  1758  07C7                     l2352:
  1759                           
  1760                           ;utils.c: 124:     Display7seg4digitsVetor[1].port = 0;
  1761  07C7  01B3               	clrf	(_Display7seg4digitsVetor^(0+128)+4)
  1762  07C8                     l2354:
  1763                           
  1764                           ;utils.c: 126:     Display7seg4digitsVetor[2].data = 0x00;
  1765  07C8  01B7               	clrf	(_Display7seg4digitsVetor^(0+128)+8)
  1766  07C9                     l2356:
  1767                           
  1768                           ;utils.c: 127:     Display7seg4digitsVetor[2].pin = 1;
  1769  07C9  01B5               	clrf	(_Display7seg4digitsVetor^(0+128)+6)
  1770  07CA  0AB5               	incf	(_Display7seg4digitsVetor^(0+128)+6),f
  1771  07CB                     l2358:
  1772                           
  1773                           ;utils.c: 128:     Display7seg4digitsVetor[2].port = 0;
  1774  07CB  01B6               	clrf	(_Display7seg4digitsVetor^(0+128)+7)
  1775  07CC                     l2360:
  1776                           
  1777                           ;utils.c: 130:     Display7seg4digitsVetor[3].data = 0x00;
  1778  07CC  01BA               	clrf	(_Display7seg4digitsVetor^(0+128)+11)
  1779  07CD                     l2362:
  1780                           
  1781                           ;utils.c: 131:     Display7seg4digitsVetor[3].pin = 2;
  1782  07CD  3002               	movlw	2
  1783  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  1784  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  1785  07D0  00A0               	movwf	??_initDisplay
  1786  07D1  0820               	movf	??_initDisplay,w
  1787  07D2  1683               	bsf	3,5	;RP0=1, select bank1
  1788  07D3  1303               	bcf	3,6	;RP1=0, select bank1
  1789  07D4  00B8               	movwf	(_Display7seg4digitsVetor^(0+128)+9)
  1790                           
  1791                           ;utils.c: 132:     Display7seg4digitsVetor[3].port = 0;
  1792  07D5  01B9               	clrf	(_Display7seg4digitsVetor^(0+128)+10)
  1793  07D6                     l191:
  1794  07D6  0008               	return
  1795  07D7                     __end_of_initDisplay:
  1796                           
  1797                           	psect	text5
  1798  077D                     __ptext5:	
  1799 ;; *************** function _initButtons *****************
  1800 ;; Defined at:
  1801 ;;		line 136 in file "utils.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;		None
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMMON   BANK0   BANK1
  1815 ;;      Params:         0       0       0
  1816 ;;      Locals:         0       0       0
  1817 ;;      Temps:          0       1       0
  1818 ;;      Totals:         0       1       0
  1819 ;;Total ram usage:        1 bytes
  1820 ;; Hardware stack levels used: 1
  1821 ;; Hardware stack levels required when called: 1
  1822 ;; This function calls:
  1823 ;;		Nothing
  1824 ;; This function is called by:
  1825 ;;		_main
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           
  1830                           ;psect for function _initButtons
  1831  077D                     _initButtons:
  1832  077D                     l2364:	
  1833                           ;incstack = 0
  1834                           ; Regs used in _initButtons: [wreg+status,2]
  1835                           
  1836                           
  1837                           ;utils.c: 137:     Botoes[0].pin = 4;
  1838  077D  3004               	movlw	4
  1839  077E  1283               	bcf	3,5	;RP0=0, select bank0
  1840  077F  1303               	bcf	3,6	;RP1=0, select bank0
  1841  0780  00A0               	movwf	??_initButtons
  1842  0781  0820               	movf	??_initButtons,w
  1843  0782  1683               	bsf	3,5	;RP0=1, select bank1
  1844  0783  1303               	bcf	3,6	;RP1=0, select bank1
  1845  0784  00A0               	movwf	_Botoes^(0+128)
  1846  0785                     l2366:
  1847                           
  1848                           ;utils.c: 138:     Botoes[0].port = 1;
  1849  0785  01A1               	clrf	(_Botoes^(0+128)+1)
  1850  0786  0AA1               	incf	(_Botoes^(0+128)+1),f
  1851  0787                     l2368:
  1852                           
  1853                           ;utils.c: 139:     Botoes[0].status = 1;
  1854  0787  01A2               	clrf	(_Botoes^(0+128)+2)
  1855  0788  0AA2               	incf	(_Botoes^(0+128)+2),f
  1856                           
  1857                           ;utils.c: 141:     Botoes[1].pin = 6;
  1858  0789  3006               	movlw	6
  1859  078A  1283               	bcf	3,5	;RP0=0, select bank0
  1860  078B  1303               	bcf	3,6	;RP1=0, select bank0
  1861  078C  00A0               	movwf	??_initButtons
  1862  078D  0820               	movf	??_initButtons,w
  1863  078E  1683               	bsf	3,5	;RP0=1, select bank1
  1864  078F  1303               	bcf	3,6	;RP1=0, select bank1
  1865  0790  00A3               	movwf	(_Botoes^(0+128)+3)
  1866  0791                     l2370:
  1867                           
  1868                           ;utils.c: 142:     Botoes[1].port = 1;
  1869  0791  01A4               	clrf	(_Botoes^(0+128)+4)
  1870  0792  0AA4               	incf	(_Botoes^(0+128)+4),f
  1871  0793                     l2372:
  1872                           
  1873                           ;utils.c: 143:     Botoes[1].status = 1;
  1874  0793  01A5               	clrf	(_Botoes^(0+128)+5)
  1875  0794  0AA5               	incf	(_Botoes^(0+128)+5),f
  1876                           
  1877                           ;utils.c: 145:     Botoes[2].pin = 7;
  1878  0795  3007               	movlw	7
  1879  0796  1283               	bcf	3,5	;RP0=0, select bank0
  1880  0797  1303               	bcf	3,6	;RP1=0, select bank0
  1881  0798  00A0               	movwf	??_initButtons
  1882  0799  0820               	movf	??_initButtons,w
  1883  079A  1683               	bsf	3,5	;RP0=1, select bank1
  1884  079B  1303               	bcf	3,6	;RP1=0, select bank1
  1885  079C  00A6               	movwf	(_Botoes^(0+128)+6)
  1886  079D                     l2374:
  1887                           
  1888                           ;utils.c: 146:     Botoes[2].port = 1;
  1889  079D  01A7               	clrf	(_Botoes^(0+128)+7)
  1890  079E  0AA7               	incf	(_Botoes^(0+128)+7),f
  1891  079F                     l2376:
  1892                           
  1893                           ;utils.c: 147:     Botoes[2].status = 1;
  1894  079F  01A8               	clrf	(_Botoes^(0+128)+8)
  1895  07A0  0AA8               	incf	(_Botoes^(0+128)+8),f
  1896                           
  1897                           ;utils.c: 149:     Botoes[3].pin = 4;
  1898  07A1  3004               	movlw	4
  1899  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  1900  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  1901  07A4  00A0               	movwf	??_initButtons
  1902  07A5  0820               	movf	??_initButtons,w
  1903  07A6  1683               	bsf	3,5	;RP0=1, select bank1
  1904  07A7  1303               	bcf	3,6	;RP1=0, select bank1
  1905  07A8  00A9               	movwf	(_Botoes^(0+128)+9)
  1906  07A9                     l2378:
  1907                           
  1908                           ;utils.c: 150:     Botoes[3].port = 0;
  1909  07A9  01AA               	clrf	(_Botoes^(0+128)+10)
  1910  07AA                     l2380:
  1911                           
  1912                           ;utils.c: 151:     Botoes[3].status = 1;
  1913  07AA  01AB               	clrf	(_Botoes^(0+128)+11)
  1914  07AB  0AAB               	incf	(_Botoes^(0+128)+11),f
  1915  07AC                     l2382:
  1916                           
  1917                           ;utils.c: 153:     Botoes[4].pin = 5;
  1918  07AC  3005               	movlw	5
  1919  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  1920  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  1921  07AF  00A0               	movwf	??_initButtons
  1922  07B0  0820               	movf	??_initButtons,w
  1923  07B1  1683               	bsf	3,5	;RP0=1, select bank1
  1924  07B2  1303               	bcf	3,6	;RP1=0, select bank1
  1925  07B3  00AC               	movwf	(_Botoes^(0+128)+12)
  1926  07B4                     l2384:
  1927                           
  1928                           ;utils.c: 154:     Botoes[4].port = 1;
  1929  07B4  01AD               	clrf	(_Botoes^(0+128)+13)
  1930  07B5  0AAD               	incf	(_Botoes^(0+128)+13),f
  1931  07B6                     l2386:
  1932                           
  1933                           ;utils.c: 155:     Botoes[4].status = 1;
  1934  07B6  01AE               	clrf	(_Botoes^(0+128)+14)
  1935  07B7  0AAE               	incf	(_Botoes^(0+128)+14),f
  1936  07B8                     l194:
  1937  07B8  0008               	return
  1938  07B9                     __end_of_initButtons:
  1939                           
  1940                           	psect	text6
  1941  0185                     __ptext6:	
  1942 ;; *************** function _deviceStateMachine *****************
  1943 ;; Defined at:
  1944 ;;		line 334 in file "utils.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  ucButton        1    wreg     unsigned char 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  ucButton        1   49[BANK0 ] unsigned char 
  1949 ;;  i               2   47[BANK0 ] int 
  1950 ;;  ulTotalRoll     2   45[BANK0 ] int 
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMMON   BANK0   BANK1
  1960 ;;      Params:         0       0       0
  1961 ;;      Locals:         0       5       0
  1962 ;;      Temps:          0       3       0
  1963 ;;      Totals:         0       8       0
  1964 ;;Total ram usage:        8 bytes
  1965 ;; Hardware stack levels used: 1
  1966 ;; Hardware stack levels required when called: 3
  1967 ;; This function calls:
  1968 ;;		___awdiv
  1969 ;;		___awmod
  1970 ;;		_randomNumber
  1971 ;;		_writeCharOnDisplay
  1972 ;; This function is called by:
  1973 ;;		_main
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           
  1978                           ;psect for function _deviceStateMachine
  1979  0185                     _deviceStateMachine:
  1980                           
  1981                           ;incstack = 0
  1982                           ; Regs used in _deviceStateMachine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1983                           ;deviceStateMachine@ucButton stored from wreg
  1984  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1986  0187  00D1               	movwf	deviceStateMachine@ucButton
  1987  0188                     l2406:
  1988                           
  1989                           ;utils.c: 337:     if(1 == ucButton){
  1990  0188  0351               	decf	deviceStateMachine@ucButton,w
  1991  0189  1D03               	btfss	3,2
  1992  018A  298C               	goto	u1911
  1993  018B  298D               	goto	u1910
  1994  018C                     u1911:
  1995  018C  29C0               	goto	l2418
  1996  018D                     u1910:
  1997  018D                     l2408:
  1998                           
  1999                           ;utils.c: 338:         deviceCurrentState = ROLL;
  2000  018D  01E8               	clrf	_deviceCurrentState
  2001                           
  2002                           ;utils.c: 340:         int ulTotalRoll = 0;
  2003  018E  01CD               	clrf	deviceStateMachine@ulTotalRoll
  2004  018F  01CE               	clrf	deviceStateMachine@ulTotalRoll+1
  2005                           
  2006                           ;utils.c: 342:         int i;;utils.c: 343:         for(i = 0; i < diceState[0]; i++){
  2007  0190  01CF               	clrf	deviceStateMachine@i
  2008  0191  01D0               	clrf	deviceStateMachine@i+1
  2009  0192  29B2               	goto	l2414
  2010  0193                     l2410:
  2011                           
  2012                           ;utils.c: 344:             ulTotalRoll += (int)(randomNumber())%diceState[1];
  2013  0193  1283               	bcf	3,5	;RP0=0, select bank0
  2014  0194  1303               	bcf	3,6	;RP1=0, select bank0
  2015  0195  0867               	movf	_diceState+1,w
  2016  0196  00CA               	movwf	??_deviceStateMachine
  2017  0197  01CB               	clrf	??_deviceStateMachine+1
  2018  0198  084A               	movf	??_deviceStateMachine,w
  2019  0199  00BF               	movwf	___awmod@divisor
  2020  019A  084B               	movf	??_deviceStateMachine+1,w
  2021  019B  00C0               	movwf	___awmod@divisor+1
  2022  019C  2690               	fcall	_randomNumber
  2023  019D  1283               	bcf	3,5	;RP0=0, select bank0
  2024  019E  1303               	bcf	3,6	;RP1=0, select bank0
  2025  019F  0838               	movf	?_randomNumber+1,w
  2026  01A0  00C2               	movwf	___awmod@dividend+1
  2027  01A1  0837               	movf	?_randomNumber,w
  2028  01A2  00C1               	movwf	___awmod@dividend
  2029  01A3  2585               	fcall	___awmod
  2030  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  2031  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  2032  01A6  083F               	movf	?___awmod,w
  2033  01A7  07CD               	addwf	deviceStateMachine@ulTotalRoll,f
  2034  01A8  1803               	skipnc
  2035  01A9  0ACE               	incf	deviceStateMachine@ulTotalRoll+1,f
  2036  01AA  0840               	movf	?___awmod+1,w
  2037  01AB  07CE               	addwf	deviceStateMachine@ulTotalRoll+1,f
  2038  01AC                     l2412:
  2039                           
  2040                           ;utils.c: 345:         }
  2041  01AC  3001               	movlw	1
  2042  01AD  07CF               	addwf	deviceStateMachine@i,f
  2043  01AE  1803               	skipnc
  2044  01AF  0AD0               	incf	deviceStateMachine@i+1,f
  2045  01B0  3000               	movlw	0
  2046  01B1  07D0               	addwf	deviceStateMachine@i+1,f
  2047  01B2                     l2414:
  2048  01B2  0850               	movf	deviceStateMachine@i+1,w
  2049  01B3  3A80               	xorlw	128
  2050  01B4  00CA               	movwf	??_deviceStateMachine
  2051  01B5  3080               	movlw	128
  2052  01B6  024A               	subwf	??_deviceStateMachine,w
  2053  01B7  1D03               	skipz
  2054  01B8  29BB               	goto	u1925
  2055  01B9  0866               	movf	_diceState,w
  2056  01BA  024F               	subwf	deviceStateMachine@i,w
  2057  01BB                     u1925:
  2058  01BB  1C03               	skipc
  2059  01BC  29BE               	goto	u1921
  2060  01BD  29BF               	goto	u1920
  2061  01BE                     u1921:
  2062  01BE  2993               	goto	l2410
  2063  01BF                     u1920:
  2064  01BF  2ABD               	goto	l228
  2065  01C0                     l2418:
  2066  01C0  0868               	movf	_deviceCurrentState,w
  2067  01C1  1D03               	btfss	3,2
  2068  01C2  29C4               	goto	u1931
  2069  01C3  29C5               	goto	u1930
  2070  01C4                     u1931:
  2071  01C4  2A6F               	goto	l2472
  2072  01C5                     u1930:
  2073  01C5                     l2420:
  2074                           
  2075                           ;utils.c: 351:         deviceCurrentState = MENU;
  2076  01C5  01E8               	clrf	_deviceCurrentState
  2077  01C6  0AE8               	incf	_deviceCurrentState,f
  2078  01C7                     l2422:
  2079                           
  2080                           ;utils.c: 353:         writeCharOnDisplay('0' + diceState[0], 0);
  2081  01C7  01C6               	clrf	writeCharOnDisplay@ucDisplay
  2082  01C8  0866               	movf	_diceState,w
  2083  01C9  3E30               	addlw	48
  2084  01CA  22BE               	fcall	_writeCharOnDisplay
  2085                           
  2086                           ;utils.c: 354:         writeCharOnDisplay('d', 1);
  2087  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  2088  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  2089  01CD  01C6               	clrf	writeCharOnDisplay@ucDisplay
  2090  01CE  0AC6               	incf	writeCharOnDisplay@ucDisplay,f
  2091  01CF  3064               	movlw	100
  2092  01D0  22BE               	fcall	_writeCharOnDisplay
  2093                           
  2094                           ;utils.c: 355:         writeCharOnDisplay('0' + diceState[1]/10, 2);
  2095  01D1  3002               	movlw	2
  2096  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  2097  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  2098  01D4  00CA               	movwf	??_deviceStateMachine
  2099  01D5  084A               	movf	??_deviceStateMachine,w
  2100  01D6  00C6               	movwf	writeCharOnDisplay@ucDisplay
  2101  01D7  300A               	movlw	10
  2102  01D8  00A0               	movwf	___awdiv@divisor
  2103  01D9  3000               	movlw	0
  2104  01DA  00A1               	movwf	___awdiv@divisor+1
  2105  01DB  0867               	movf	_diceState+1,w
  2106  01DC  00CB               	movwf	??_deviceStateMachine+1
  2107  01DD  01CC               	clrf	??_deviceStateMachine+2
  2108  01DE  084B               	movf	??_deviceStateMachine+1,w
  2109  01DF  00A2               	movwf	___awdiv@dividend
  2110  01E0  084C               	movf	??_deviceStateMachine+2,w
  2111  01E1  00A3               	movwf	___awdiv@dividend+1
  2112  01E2  24BF               	fcall	___awdiv
  2113  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  2114  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  2115  01E5  0820               	movf	?___awdiv,w
  2116  01E6  3E30               	addlw	48
  2117  01E7  22BE               	fcall	_writeCharOnDisplay
  2118                           
  2119                           ;utils.c: 356:         writeCharOnDisplay('0' + diceState[1]%10, 3);
  2120  01E8  3003               	movlw	3
  2121  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  2122  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  2123  01EB  00CA               	movwf	??_deviceStateMachine
  2124  01EC  084A               	movf	??_deviceStateMachine,w
  2125  01ED  00C6               	movwf	writeCharOnDisplay@ucDisplay
  2126  01EE  300A               	movlw	10
  2127  01EF  00BF               	movwf	___awmod@divisor
  2128  01F0  3000               	movlw	0
  2129  01F1  00C0               	movwf	___awmod@divisor+1
  2130  01F2  0867               	movf	_diceState+1,w
  2131  01F3  00CB               	movwf	??_deviceStateMachine+1
  2132  01F4  01CC               	clrf	??_deviceStateMachine+2
  2133  01F5  084B               	movf	??_deviceStateMachine+1,w
  2134  01F6  00C1               	movwf	___awmod@dividend
  2135  01F7  084C               	movf	??_deviceStateMachine+2,w
  2136  01F8  00C2               	movwf	___awmod@dividend+1
  2137  01F9  2585               	fcall	___awmod
  2138  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  2139  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  2140  01FC  083F               	movf	?___awmod,w
  2141  01FD  3E30               	addlw	48
  2142  01FE  22BE               	fcall	_writeCharOnDisplay
  2143  01FF  2ABD               	goto	l228
  2144  0200                     l2426:
  2145                           
  2146                           ;utils.c: 364:             if(diceState[0] < 9 ){
  2147  0200  3009               	movlw	9
  2148  0201  0266               	subwf	_diceState,w
  2149  0202  1803               	skipnc
  2150  0203  2A05               	goto	u1941
  2151  0204  2A06               	goto	u1940
  2152  0205                     u1941:
  2153  0205  2A85               	goto	l2474
  2154  0206                     u1940:
  2155  0206                     l2428:
  2156                           
  2157                           ;utils.c: 365:                 diceState[0]++;
  2158  0206  3001               	movlw	1
  2159  0207  00CA               	movwf	??_deviceStateMachine
  2160  0208  084A               	movf	??_deviceStateMachine,w
  2161  0209  07E6               	addwf	_diceState,f
  2162  020A  2A85               	goto	l2474
  2163  020B                     l2430:
  2164                           
  2165                           ;utils.c: 370:             if(diceState[0] > 1){
  2166  020B  3002               	movlw	2
  2167  020C  0266               	subwf	_diceState,w
  2168  020D  1C03               	skipc
  2169  020E  2A10               	goto	u1951
  2170  020F  2A11               	goto	u1950
  2171  0210                     u1951:
  2172  0210  2A85               	goto	l2474
  2173  0211                     u1950:
  2174  0211                     l2432:
  2175                           
  2176                           ;utils.c: 371:                 diceState[0]--;
  2177  0211  3001               	movlw	1
  2178  0212  02E6               	subwf	_diceState,f
  2179  0213  2A85               	goto	l2474
  2180  0214                     l2434:
  2181                           
  2182                           ;utils.c: 376:             if(diceState[1] < 20){
  2183  0214  3014               	movlw	20
  2184  0215  0267               	subwf	_diceState+1,w
  2185  0216  1803               	skipnc
  2186  0217  2A19               	goto	u1961
  2187  0218  2A1A               	goto	u1960
  2188  0219                     u1961:
  2189  0219  2A85               	goto	l2474
  2190  021A                     u1960:
  2191  021A  2A34               	goto	l2450
  2192  021B                     l2438:
  2193                           
  2194                           ;utils.c: 379:                         diceState[1] = 20;
  2195  021B  3014               	movlw	20
  2196  021C  00CA               	movwf	??_deviceStateMachine
  2197  021D  084A               	movf	??_deviceStateMachine,w
  2198  021E  00E7               	movwf	_diceState+1
  2199                           
  2200                           ;utils.c: 380:                         break;
  2201  021F  2A85               	goto	l2474
  2202  0220                     l2440:
  2203                           
  2204                           ;utils.c: 382:                         diceState[1] = 12;
  2205  0220  300C               	movlw	12
  2206  0221  00CA               	movwf	??_deviceStateMachine
  2207  0222  084A               	movf	??_deviceStateMachine,w
  2208  0223  00E7               	movwf	_diceState+1
  2209                           
  2210                           ;utils.c: 383:                         break;
  2211  0224  2A85               	goto	l2474
  2212  0225                     l2442:
  2213                           
  2214                           ;utils.c: 385:                         diceState[1] = 10;
  2215  0225  300A               	movlw	10
  2216  0226  00CA               	movwf	??_deviceStateMachine
  2217  0227  084A               	movf	??_deviceStateMachine,w
  2218  0228  00E7               	movwf	_diceState+1
  2219                           
  2220                           ;utils.c: 386:                         break;
  2221  0229  2A85               	goto	l2474
  2222  022A                     l2444:
  2223                           
  2224                           ;utils.c: 388:                         diceState[1] = 8;
  2225  022A  3008               	movlw	8
  2226  022B  00CA               	movwf	??_deviceStateMachine
  2227  022C  084A               	movf	??_deviceStateMachine,w
  2228  022D  00E7               	movwf	_diceState+1
  2229                           
  2230                           ;utils.c: 389:                         break;
  2231  022E  2A85               	goto	l2474
  2232  022F                     l2446:
  2233                           
  2234                           ;utils.c: 391:                         diceState[1]++;
  2235  022F  3001               	movlw	1
  2236  0230  00CA               	movwf	??_deviceStateMachine
  2237  0231  084A               	movf	??_deviceStateMachine,w
  2238  0232  07E7               	addwf	_diceState+1,f
  2239                           
  2240                           ;utils.c: 392:                         break;
  2241  0233  2A85               	goto	l2474
  2242  0234                     l2450:
  2243  0234  0867               	movf	_diceState+1,w
  2244  0235  00CA               	movwf	??_deviceStateMachine
  2245  0236  01CB               	clrf	??_deviceStateMachine+1
  2246                           
  2247                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2248                           ; Switch size 1, requested type "simple"
  2249                           ; Number of cases is 1, Range of values is 0 to 0
  2250                           ; switch strategies available:
  2251                           ; Name         Instructions Cycles
  2252                           ; simple_byte            4     3 (average)
  2253                           ; direct_byte            7     6 (fixed)
  2254                           ; jumptable            260     6 (fixed)
  2255                           ;	Chosen strategy is simple_byte
  2256  0237  084B               	movf	??_deviceStateMachine+1,w
  2257  0238  3A00               	xorlw	0	; case 0
  2258  0239  1903               	skipnz
  2259  023A  2A3C               	goto	l2690
  2260  023B  2A2F               	goto	l2446
  2261  023C                     l2690:
  2262                           
  2263                           ; Switch size 1, requested type "simple"
  2264                           ; Number of cases is 4, Range of values is 6 to 12
  2265                           ; switch strategies available:
  2266                           ; Name         Instructions Cycles
  2267                           ; simple_byte           13     7 (average)
  2268                           ; direct_byte           16     9 (fixed)
  2269                           ; jumptable            263     9 (fixed)
  2270                           ;	Chosen strategy is simple_byte
  2271  023C  084A               	movf	??_deviceStateMachine,w
  2272  023D  3A06               	xorlw	6	; case 6
  2273  023E  1903               	skipnz
  2274  023F  2A2A               	goto	l2444
  2275  0240  3A0E               	xorlw	14	; case 8
  2276  0241  1903               	skipnz
  2277  0242  2A25               	goto	l2442
  2278  0243  3A02               	xorlw	2	; case 10
  2279  0244  1903               	skipnz
  2280  0245  2A20               	goto	l2440
  2281  0246  3A06               	xorlw	6	; case 12
  2282  0247  1903               	skipnz
  2283  0248  2A1B               	goto	l2438
  2284  0249  2A2F               	goto	l2446
  2285  024A                     l2452:
  2286                           
  2287                           ;utils.c: 399:             if(diceState[1] > 2){
  2288  024A  3003               	movlw	3
  2289  024B  0267               	subwf	_diceState+1,w
  2290  024C  1C03               	skipc
  2291  024D  2A4F               	goto	u1971
  2292  024E  2A50               	goto	u1970
  2293  024F                     u1971:
  2294  024F  2A85               	goto	l2474
  2295  0250                     u1970:
  2296  0250  2A59               	goto	l2468
  2297  0251                     l2462:
  2298                           
  2299                           ;utils.c: 411:                         diceState[1] = 6;
  2300  0251  3006               	movlw	6
  2301  0252  00CA               	movwf	??_deviceStateMachine
  2302  0253  084A               	movf	??_deviceStateMachine,w
  2303  0254  00E7               	movwf	_diceState+1
  2304                           
  2305                           ;utils.c: 412:                         break;
  2306  0255  2A85               	goto	l2474
  2307  0256                     l2464:
  2308                           
  2309                           ;utils.c: 414:                         diceState[1]--;
  2310  0256  3001               	movlw	1
  2311  0257  02E7               	subwf	_diceState+1,f
  2312                           
  2313                           ;utils.c: 415:                         break;
  2314  0258  2A85               	goto	l2474
  2315  0259                     l2468:
  2316  0259  0867               	movf	_diceState+1,w
  2317  025A  00CA               	movwf	??_deviceStateMachine
  2318  025B  01CB               	clrf	??_deviceStateMachine+1
  2319                           
  2320                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2321                           ; Switch size 1, requested type "simple"
  2322                           ; Number of cases is 1, Range of values is 0 to 0
  2323                           ; switch strategies available:
  2324                           ; Name         Instructions Cycles
  2325                           ; simple_byte            4     3 (average)
  2326                           ; direct_byte            7     6 (fixed)
  2327                           ; jumptable            260     6 (fixed)
  2328                           ;	Chosen strategy is simple_byte
  2329  025C  084B               	movf	??_deviceStateMachine+1,w
  2330  025D  3A00               	xorlw	0	; case 0
  2331  025E  1903               	skipnz
  2332  025F  2A61               	goto	l2692
  2333  0260  2A56               	goto	l2464
  2334  0261                     l2692:
  2335                           
  2336                           ; Switch size 1, requested type "simple"
  2337                           ; Number of cases is 4, Range of values is 8 to 20
  2338                           ; switch strategies available:
  2339                           ; Name         Instructions Cycles
  2340                           ; simple_byte           13     7 (average)
  2341                           ; direct_byte           22     9 (fixed)
  2342                           ; jumptable            263     9 (fixed)
  2343                           ;	Chosen strategy is simple_byte
  2344  0261  084A               	movf	??_deviceStateMachine,w
  2345  0262  3A08               	xorlw	8	; case 8
  2346  0263  1903               	skipnz
  2347  0264  2A51               	goto	l2462
  2348  0265  3A02               	xorlw	2	; case 10
  2349  0266  1903               	skipnz
  2350  0267  2A2A               	goto	l2444
  2351  0268  3A06               	xorlw	6	; case 12
  2352  0269  1903               	skipnz
  2353  026A  2A25               	goto	l2442
  2354  026B  3A18               	xorlw	24	; case 20
  2355  026C  1903               	skipnz
  2356  026D  2A20               	goto	l2440
  2357  026E  2A56               	goto	l2464
  2358  026F                     l2472:
  2359  026F  0851               	movf	deviceStateMachine@ucButton,w
  2360  0270  00CA               	movwf	??_deviceStateMachine
  2361  0271  01CB               	clrf	??_deviceStateMachine+1
  2362                           
  2363                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2364                           ; Switch size 1, requested type "simple"
  2365                           ; Number of cases is 1, Range of values is 0 to 0
  2366                           ; switch strategies available:
  2367                           ; Name         Instructions Cycles
  2368                           ; simple_byte            4     3 (average)
  2369                           ; direct_byte            7     6 (fixed)
  2370                           ; jumptable            260     6 (fixed)
  2371                           ;	Chosen strategy is simple_byte
  2372  0272  084B               	movf	??_deviceStateMachine+1,w
  2373  0273  3A00               	xorlw	0	; case 0
  2374  0274  1903               	skipnz
  2375  0275  2A77               	goto	l2694
  2376  0276  2A85               	goto	l2474
  2377  0277                     l2694:
  2378                           
  2379                           ; Switch size 1, requested type "simple"
  2380                           ; Number of cases is 4, Range of values is 2 to 5
  2381                           ; switch strategies available:
  2382                           ; Name         Instructions Cycles
  2383                           ; simple_byte           13     7 (average)
  2384                           ; direct_byte           13     9 (fixed)
  2385                           ; jumptable            263     9 (fixed)
  2386                           ;	Chosen strategy is simple_byte
  2387  0277  084A               	movf	??_deviceStateMachine,w
  2388  0278  3A02               	xorlw	2	; case 2
  2389  0279  1903               	skipnz
  2390  027A  2A00               	goto	l2426
  2391  027B  3A01               	xorlw	1	; case 3
  2392  027C  1903               	skipnz
  2393  027D  2A0B               	goto	l2430
  2394  027E  3A07               	xorlw	7	; case 4
  2395  027F  1903               	skipnz
  2396  0280  2A14               	goto	l2434
  2397  0281  3A01               	xorlw	1	; case 5
  2398  0282  1903               	skipnz
  2399  0283  2A4A               	goto	l2452
  2400  0284  2A85               	goto	l2474
  2401  0285                     l2474:
  2402                           
  2403                           ;utils.c: 423:         writeCharOnDisplay('0' + diceState[0], 0);
  2404  0285  01C6               	clrf	writeCharOnDisplay@ucDisplay
  2405  0286  0866               	movf	_diceState,w
  2406  0287  3E30               	addlw	48
  2407  0288  22BE               	fcall	_writeCharOnDisplay
  2408                           
  2409                           ;utils.c: 424:         writeCharOnDisplay('d', 1);
  2410  0289  1283               	bcf	3,5	;RP0=0, select bank0
  2411  028A  1303               	bcf	3,6	;RP1=0, select bank0
  2412  028B  01C6               	clrf	writeCharOnDisplay@ucDisplay
  2413  028C  0AC6               	incf	writeCharOnDisplay@ucDisplay,f
  2414  028D  3064               	movlw	100
  2415  028E  22BE               	fcall	_writeCharOnDisplay
  2416                           
  2417                           ;utils.c: 425:         writeCharOnDisplay('0' + diceState[1]/10, 2);
  2418  028F  3002               	movlw	2
  2419  0290  1283               	bcf	3,5	;RP0=0, select bank0
  2420  0291  1303               	bcf	3,6	;RP1=0, select bank0
  2421  0292  00CA               	movwf	??_deviceStateMachine
  2422  0293  084A               	movf	??_deviceStateMachine,w
  2423  0294  00C6               	movwf	writeCharOnDisplay@ucDisplay
  2424  0295  300A               	movlw	10
  2425  0296  00A0               	movwf	___awdiv@divisor
  2426  0297  3000               	movlw	0
  2427  0298  00A1               	movwf	___awdiv@divisor+1
  2428  0299  0867               	movf	_diceState+1,w
  2429  029A  00CB               	movwf	??_deviceStateMachine+1
  2430  029B  01CC               	clrf	??_deviceStateMachine+2
  2431  029C  084B               	movf	??_deviceStateMachine+1,w
  2432  029D  00A2               	movwf	___awdiv@dividend
  2433  029E  084C               	movf	??_deviceStateMachine+2,w
  2434  029F  00A3               	movwf	___awdiv@dividend+1
  2435  02A0  24BF               	fcall	___awdiv
  2436  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  2437  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  2438  02A3  0820               	movf	?___awdiv,w
  2439  02A4  3E30               	addlw	48
  2440  02A5  22BE               	fcall	_writeCharOnDisplay
  2441                           
  2442                           ;utils.c: 426:         writeCharOnDisplay('0' + diceState[1]%10, 3);
  2443  02A6  3003               	movlw	3
  2444  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2445  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2446  02A9  00CA               	movwf	??_deviceStateMachine
  2447  02AA  084A               	movf	??_deviceStateMachine,w
  2448  02AB  00C6               	movwf	writeCharOnDisplay@ucDisplay
  2449  02AC  300A               	movlw	10
  2450  02AD  00BF               	movwf	___awmod@divisor
  2451  02AE  3000               	movlw	0
  2452  02AF  00C0               	movwf	___awmod@divisor+1
  2453  02B0  0867               	movf	_diceState+1,w
  2454  02B1  00CB               	movwf	??_deviceStateMachine+1
  2455  02B2  01CC               	clrf	??_deviceStateMachine+2
  2456  02B3  084B               	movf	??_deviceStateMachine+1,w
  2457  02B4  00C1               	movwf	___awmod@dividend
  2458  02B5  084C               	movf	??_deviceStateMachine+2,w
  2459  02B6  00C2               	movwf	___awmod@dividend+1
  2460  02B7  2585               	fcall	___awmod
  2461  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  2462  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  2463  02BA  083F               	movf	?___awmod,w
  2464  02BB  3E30               	addlw	48
  2465  02BC  22BE               	fcall	_writeCharOnDisplay
  2466  02BD                     l228:
  2467  02BD  0008               	return
  2468  02BE                     __end_of_deviceStateMachine:
  2469                           
  2470                           	psect	text7
  2471  02BE                     __ptext7:	
  2472 ;; *************** function _writeCharOnDisplay *****************
  2473 ;; Defined at:
  2474 ;;		line 197 in file "utils.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;  ucCharacter     1    wreg     unsigned char 
  2477 ;;  ucDisplay       1   38[BANK0 ] unsigned char 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;  ucCharacter     1   41[BANK0 ] unsigned char 
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      void 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMMON   BANK0   BANK1
  2489 ;;      Params:         0       1       0
  2490 ;;      Locals:         0       1       0
  2491 ;;      Temps:          0       2       0
  2492 ;;      Totals:         0       4       0
  2493 ;;Total ram usage:        4 bytes
  2494 ;; Hardware stack levels used: 1
  2495 ;; Hardware stack levels required when called: 2
  2496 ;; This function calls:
  2497 ;;		___bmul
  2498 ;; This function is called by:
  2499 ;;		_main
  2500 ;;		_deviceStateMachine
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           
  2505                           ;psect for function _writeCharOnDisplay
  2506  02BE                     _writeCharOnDisplay:
  2507                           
  2508                           ;incstack = 0
  2509                           ; Regs used in _writeCharOnDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2510                           ;writeCharOnDisplay@ucCharacter stored from wreg
  2511  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  2512  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  2513  02C0  00C9               	movwf	writeCharOnDisplay@ucCharacter
  2514  02C1                     l2200:
  2515                           
  2516                           ;utils.c: 199:     if(ucDisplay < 0 || ucDisplay > 3){
  2517  02C1  3004               	movlw	4
  2518  02C2  0246               	subwf	writeCharOnDisplay@ucDisplay,w
  2519  02C3  1C03               	skipc
  2520  02C4  2AC6               	goto	u1771
  2521  02C5  2AC7               	goto	u1770
  2522  02C6                     u1771:
  2523  02C6  2B88               	goto	l2230
  2524  02C7                     u1770:
  2525  02C7  2BB3               	goto	l204
  2526  02C8                     l2204:
  2527                           
  2528                           ;utils.c: 209:             Display7seg4digitsVetor[ucDisplay].data = 0b00111111;
  2529  02C8  303F               	movlw	63
  2530  02C9  00C7               	movwf	??_writeCharOnDisplay
  2531  02CA  3003               	movlw	3
  2532  02CB  00C8               	movwf	??_writeCharOnDisplay+1
  2533  02CC  0848               	movf	??_writeCharOnDisplay+1,w
  2534  02CD  00A0               	movwf	___bmul@multiplicand
  2535  02CE  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2536  02CF  27D7               	fcall	___bmul
  2537  02D0  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2538  02D1  0084               	movwf	4
  2539  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2540  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  2541  02D4  0847               	movf	??_writeCharOnDisplay,w
  2542  02D5  1383               	bcf	3,7	;select IRP bank1
  2543  02D6  0080               	movwf	0
  2544                           
  2545                           ;utils.c: 210:             break;
  2546  02D7  2BB3               	goto	l204
  2547  02D8                     l2206:
  2548                           
  2549                           ;utils.c: 212:             Display7seg4digitsVetor[ucDisplay].data = 0b00000110;
  2550  02D8  3006               	movlw	6
  2551  02D9  00C7               	movwf	??_writeCharOnDisplay
  2552  02DA  3003               	movlw	3
  2553  02DB  00C8               	movwf	??_writeCharOnDisplay+1
  2554  02DC  0848               	movf	??_writeCharOnDisplay+1,w
  2555  02DD  00A0               	movwf	___bmul@multiplicand
  2556  02DE  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2557  02DF  27D7               	fcall	___bmul
  2558  02E0  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2559  02E1  0084               	movwf	4
  2560  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2561  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  2562  02E4  0847               	movf	??_writeCharOnDisplay,w
  2563  02E5  1383               	bcf	3,7	;select IRP bank1
  2564  02E6  0080               	movwf	0
  2565                           
  2566                           ;utils.c: 213:             break;
  2567  02E7  2BB3               	goto	l204
  2568  02E8                     l2208:
  2569                           
  2570                           ;utils.c: 215:             Display7seg4digitsVetor[ucDisplay].data = 0b01011011;
  2571  02E8  305B               	movlw	91
  2572  02E9  00C7               	movwf	??_writeCharOnDisplay
  2573  02EA  3003               	movlw	3
  2574  02EB  00C8               	movwf	??_writeCharOnDisplay+1
  2575  02EC  0848               	movf	??_writeCharOnDisplay+1,w
  2576  02ED  00A0               	movwf	___bmul@multiplicand
  2577  02EE  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2578  02EF  27D7               	fcall	___bmul
  2579  02F0  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2580  02F1  0084               	movwf	4
  2581  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  2582  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  2583  02F4  0847               	movf	??_writeCharOnDisplay,w
  2584  02F5  1383               	bcf	3,7	;select IRP bank1
  2585  02F6  0080               	movwf	0
  2586                           
  2587                           ;utils.c: 216:             break;
  2588  02F7  2BB3               	goto	l204
  2589  02F8                     l2210:
  2590                           
  2591                           ;utils.c: 218:             Display7seg4digitsVetor[ucDisplay].data = 0b01001111;
  2592  02F8  304F               	movlw	79
  2593  02F9  00C7               	movwf	??_writeCharOnDisplay
  2594  02FA  3003               	movlw	3
  2595  02FB  00C8               	movwf	??_writeCharOnDisplay+1
  2596  02FC  0848               	movf	??_writeCharOnDisplay+1,w
  2597  02FD  00A0               	movwf	___bmul@multiplicand
  2598  02FE  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2599  02FF  27D7               	fcall	___bmul
  2600  0300  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2601  0301  0084               	movwf	4
  2602  0302  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0303  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0304  0847               	movf	??_writeCharOnDisplay,w
  2605  0305  1383               	bcf	3,7	;select IRP bank1
  2606  0306  0080               	movwf	0
  2607                           
  2608                           ;utils.c: 219:             break;
  2609  0307  2BB3               	goto	l204
  2610  0308                     l2212:
  2611                           
  2612                           ;utils.c: 221:             Display7seg4digitsVetor[ucDisplay].data = 0b01100110;
  2613  0308  3066               	movlw	102
  2614  0309  00C7               	movwf	??_writeCharOnDisplay
  2615  030A  3003               	movlw	3
  2616  030B  00C8               	movwf	??_writeCharOnDisplay+1
  2617  030C  0848               	movf	??_writeCharOnDisplay+1,w
  2618  030D  00A0               	movwf	___bmul@multiplicand
  2619  030E  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2620  030F  27D7               	fcall	___bmul
  2621  0310  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2622  0311  0084               	movwf	4
  2623  0312  1283               	bcf	3,5	;RP0=0, select bank0
  2624  0313  1303               	bcf	3,6	;RP1=0, select bank0
  2625  0314  0847               	movf	??_writeCharOnDisplay,w
  2626  0315  1383               	bcf	3,7	;select IRP bank1
  2627  0316  0080               	movwf	0
  2628                           
  2629                           ;utils.c: 222:             break;
  2630  0317  2BB3               	goto	l204
  2631  0318                     l2214:
  2632                           
  2633                           ;utils.c: 224:             Display7seg4digitsVetor[ucDisplay].data = 0b01101101;
  2634  0318  306D               	movlw	109
  2635  0319  00C7               	movwf	??_writeCharOnDisplay
  2636  031A  3003               	movlw	3
  2637  031B  00C8               	movwf	??_writeCharOnDisplay+1
  2638  031C  0848               	movf	??_writeCharOnDisplay+1,w
  2639  031D  00A0               	movwf	___bmul@multiplicand
  2640  031E  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2641  031F  27D7               	fcall	___bmul
  2642  0320  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2643  0321  0084               	movwf	4
  2644  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2645  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2646  0324  0847               	movf	??_writeCharOnDisplay,w
  2647  0325  1383               	bcf	3,7	;select IRP bank1
  2648  0326  0080               	movwf	0
  2649                           
  2650                           ;utils.c: 225:             break;
  2651  0327  2BB3               	goto	l204
  2652  0328                     l2216:
  2653                           
  2654                           ;utils.c: 227:             Display7seg4digitsVetor[ucDisplay].data = 0b01111101;
  2655  0328  307D               	movlw	125
  2656  0329  00C7               	movwf	??_writeCharOnDisplay
  2657  032A  3003               	movlw	3
  2658  032B  00C8               	movwf	??_writeCharOnDisplay+1
  2659  032C  0848               	movf	??_writeCharOnDisplay+1,w
  2660  032D  00A0               	movwf	___bmul@multiplicand
  2661  032E  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2662  032F  27D7               	fcall	___bmul
  2663  0330  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2664  0331  0084               	movwf	4
  2665  0332  1283               	bcf	3,5	;RP0=0, select bank0
  2666  0333  1303               	bcf	3,6	;RP1=0, select bank0
  2667  0334  0847               	movf	??_writeCharOnDisplay,w
  2668  0335  1383               	bcf	3,7	;select IRP bank1
  2669  0336  0080               	movwf	0
  2670                           
  2671                           ;utils.c: 228:             break;
  2672  0337  2BB3               	goto	l204
  2673  0338                     l2218:
  2674                           
  2675                           ;utils.c: 230:             Display7seg4digitsVetor[ucDisplay].data = 0b00000111;
  2676  0338  3007               	movlw	7
  2677  0339  00C7               	movwf	??_writeCharOnDisplay
  2678  033A  3003               	movlw	3
  2679  033B  00C8               	movwf	??_writeCharOnDisplay+1
  2680  033C  0848               	movf	??_writeCharOnDisplay+1,w
  2681  033D  00A0               	movwf	___bmul@multiplicand
  2682  033E  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2683  033F  27D7               	fcall	___bmul
  2684  0340  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2685  0341  0084               	movwf	4
  2686  0342  1283               	bcf	3,5	;RP0=0, select bank0
  2687  0343  1303               	bcf	3,6	;RP1=0, select bank0
  2688  0344  0847               	movf	??_writeCharOnDisplay,w
  2689  0345  1383               	bcf	3,7	;select IRP bank1
  2690  0346  0080               	movwf	0
  2691                           
  2692                           ;utils.c: 231:             break;
  2693  0347  2BB3               	goto	l204
  2694  0348                     l2220:
  2695                           
  2696                           ;utils.c: 233:             Display7seg4digitsVetor[ucDisplay].data = 0b01111111;
  2697  0348  307F               	movlw	127
  2698  0349  00C7               	movwf	??_writeCharOnDisplay
  2699  034A  3003               	movlw	3
  2700  034B  00C8               	movwf	??_writeCharOnDisplay+1
  2701  034C  0848               	movf	??_writeCharOnDisplay+1,w
  2702  034D  00A0               	movwf	___bmul@multiplicand
  2703  034E  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2704  034F  27D7               	fcall	___bmul
  2705  0350  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2706  0351  0084               	movwf	4
  2707  0352  1283               	bcf	3,5	;RP0=0, select bank0
  2708  0353  1303               	bcf	3,6	;RP1=0, select bank0
  2709  0354  0847               	movf	??_writeCharOnDisplay,w
  2710  0355  1383               	bcf	3,7	;select IRP bank1
  2711  0356  0080               	movwf	0
  2712                           
  2713                           ;utils.c: 234:             break;
  2714  0357  2BB3               	goto	l204
  2715  0358                     l2222:
  2716                           
  2717                           ;utils.c: 236:             Display7seg4digitsVetor[ucDisplay].data = 0b01100111;
  2718  0358  3067               	movlw	103
  2719  0359  00C7               	movwf	??_writeCharOnDisplay
  2720  035A  3003               	movlw	3
  2721  035B  00C8               	movwf	??_writeCharOnDisplay+1
  2722  035C  0848               	movf	??_writeCharOnDisplay+1,w
  2723  035D  00A0               	movwf	___bmul@multiplicand
  2724  035E  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2725  035F  27D7               	fcall	___bmul
  2726  0360  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2727  0361  0084               	movwf	4
  2728  0362  1283               	bcf	3,5	;RP0=0, select bank0
  2729  0363  1303               	bcf	3,6	;RP1=0, select bank0
  2730  0364  0847               	movf	??_writeCharOnDisplay,w
  2731  0365  1383               	bcf	3,7	;select IRP bank1
  2732  0366  0080               	movwf	0
  2733                           
  2734                           ;utils.c: 237:             break;
  2735  0367  2BB3               	goto	l204
  2736  0368                     l2224:
  2737                           
  2738                           ;utils.c: 239:             Display7seg4digitsVetor[ucDisplay].data = 0b01011110;
  2739  0368  305E               	movlw	94
  2740  0369  00C7               	movwf	??_writeCharOnDisplay
  2741  036A  3003               	movlw	3
  2742  036B  00C8               	movwf	??_writeCharOnDisplay+1
  2743  036C  0848               	movf	??_writeCharOnDisplay+1,w
  2744  036D  00A0               	movwf	___bmul@multiplicand
  2745  036E  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2746  036F  27D7               	fcall	___bmul
  2747  0370  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2748  0371  0084               	movwf	4
  2749  0372  1283               	bcf	3,5	;RP0=0, select bank0
  2750  0373  1303               	bcf	3,6	;RP1=0, select bank0
  2751  0374  0847               	movf	??_writeCharOnDisplay,w
  2752  0375  1383               	bcf	3,7	;select IRP bank1
  2753  0376  0080               	movwf	0
  2754                           
  2755                           ;utils.c: 240:             break;
  2756  0377  2BB3               	goto	l204
  2757  0378                     l2226:
  2758                           
  2759                           ;utils.c: 242:             Display7seg4digitsVetor[ucDisplay].data = 0b01110111;
  2760  0378  3077               	movlw	119
  2761  0379  00C7               	movwf	??_writeCharOnDisplay
  2762  037A  3003               	movlw	3
  2763  037B  00C8               	movwf	??_writeCharOnDisplay+1
  2764  037C  0848               	movf	??_writeCharOnDisplay+1,w
  2765  037D  00A0               	movwf	___bmul@multiplicand
  2766  037E  0846               	movf	writeCharOnDisplay@ucDisplay,w
  2767  037F  27D7               	fcall	___bmul
  2768  0380  3EB1               	addlw	(low ((_Display7seg4digitsVetor| 0+2)))& (0+255)
  2769  0381  0084               	movwf	4
  2770  0382  1283               	bcf	3,5	;RP0=0, select bank0
  2771  0383  1303               	bcf	3,6	;RP1=0, select bank0
  2772  0384  0847               	movf	??_writeCharOnDisplay,w
  2773  0385  1383               	bcf	3,7	;select IRP bank1
  2774  0386  0080               	movwf	0
  2775                           
  2776                           ;utils.c: 243:             break;
  2777  0387  2BB3               	goto	l204
  2778  0388                     l2230:
  2779  0388  0849               	movf	writeCharOnDisplay@ucCharacter,w
  2780  0389  00C7               	movwf	??_writeCharOnDisplay
  2781  038A  01C8               	clrf	??_writeCharOnDisplay+1
  2782                           
  2783                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2784                           ; Switch size 1, requested type "simple"
  2785                           ; Number of cases is 1, Range of values is 0 to 0
  2786                           ; switch strategies available:
  2787                           ; Name         Instructions Cycles
  2788                           ; simple_byte            4     3 (average)
  2789                           ; direct_byte            7     6 (fixed)
  2790                           ; jumptable            260     6 (fixed)
  2791                           ;	Chosen strategy is simple_byte
  2792  038B  0848               	movf	??_writeCharOnDisplay+1,w
  2793  038C  3A00               	xorlw	0	; case 0
  2794  038D  1903               	skipnz
  2795  038E  2B90               	goto	l2696
  2796  038F  2B78               	goto	l2226
  2797  0390                     l2696:
  2798                           
  2799                           ; Switch size 1, requested type "simple"
  2800                           ; Number of cases is 11, Range of values is 48 to 100
  2801                           ; switch strategies available:
  2802                           ; Name         Instructions Cycles
  2803                           ; simple_byte           34    18 (average)
  2804                           ; direct_byte           62     9 (fixed)
  2805                           ; jumptable            263     9 (fixed)
  2806                           ;	Chosen strategy is simple_byte
  2807  0390  0847               	movf	??_writeCharOnDisplay,w
  2808  0391  3A30               	xorlw	48	; case 48
  2809  0392  1903               	skipnz
  2810  0393  2AC8               	goto	l2204
  2811  0394  3A01               	xorlw	1	; case 49
  2812  0395  1903               	skipnz
  2813  0396  2AD8               	goto	l2206
  2814  0397  3A03               	xorlw	3	; case 50
  2815  0398  1903               	skipnz
  2816  0399  2AE8               	goto	l2208
  2817  039A  3A01               	xorlw	1	; case 51
  2818  039B  1903               	skipnz
  2819  039C  2AF8               	goto	l2210
  2820  039D  3A07               	xorlw	7	; case 52
  2821  039E  1903               	skipnz
  2822  039F  2B08               	goto	l2212
  2823  03A0  3A01               	xorlw	1	; case 53
  2824  03A1  1903               	skipnz
  2825  03A2  2B18               	goto	l2214
  2826  03A3  3A03               	xorlw	3	; case 54
  2827  03A4  1903               	skipnz
  2828  03A5  2B28               	goto	l2216
  2829  03A6  3A01               	xorlw	1	; case 55
  2830  03A7  1903               	skipnz
  2831  03A8  2B38               	goto	l2218
  2832  03A9  3A0F               	xorlw	15	; case 56
  2833  03AA  1903               	skipnz
  2834  03AB  2B48               	goto	l2220
  2835  03AC  3A01               	xorlw	1	; case 57
  2836  03AD  1903               	skipnz
  2837  03AE  2B58               	goto	l2222
  2838  03AF  3A5D               	xorlw	93	; case 100
  2839  03B0  1903               	skipnz
  2840  03B1  2B68               	goto	l2224
  2841  03B2  2B78               	goto	l2226
  2842  03B3                     l204:
  2843  03B3  0008               	return
  2844  03B4                     __end_of_writeCharOnDisplay:
  2845                           
  2846                           	psect	text8
  2847  07D7                     __ptext8:	
  2848 ;; *************** function ___bmul *****************
  2849 ;; Defined at:
  2850 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul8.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  multiplier      1    wreg     unsigned char 
  2853 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2856 ;;  product         1    2[BANK0 ] unsigned char 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      unsigned char 
  2859 ;; Registers used:
  2860 ;;		wreg, status,2, status,0
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMMON   BANK0   BANK1
  2866 ;;      Params:         0       1       0
  2867 ;;      Locals:         0       2       0
  2868 ;;      Temps:          0       1       0
  2869 ;;      Totals:         0       4       0
  2870 ;;Total ram usage:        4 bytes
  2871 ;; Hardware stack levels used: 1
  2872 ;; Hardware stack levels required when called: 1
  2873 ;; This function calls:
  2874 ;;		Nothing
  2875 ;; This function is called by:
  2876 ;;		_main
  2877 ;;		_shiftDisplays
  2878 ;;		_writeCharOnDisplay
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           
  2883                           ;psect for function ___bmul
  2884  07D7                     ___bmul:
  2885                           
  2886                           ;incstack = 0
  2887                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2888                           ;___bmul@multiplier stored from wreg
  2889  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  2890  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  2891  07D9  00A3               	movwf	___bmul@multiplier
  2892  07DA                     l2166:
  2893  07DA  01A2               	clrf	___bmul@product
  2894  07DB                     l2168:
  2895  07DB  1C23               	btfss	___bmul@multiplier,0
  2896  07DC  2FDE               	goto	u1691
  2897  07DD  2FDF               	goto	u1690
  2898  07DE                     u1691:
  2899  07DE  2FE3               	goto	l2172
  2900  07DF                     u1690:
  2901  07DF                     l2170:
  2902  07DF  0820               	movf	___bmul@multiplicand,w
  2903  07E0  00A1               	movwf	??___bmul
  2904  07E1  0821               	movf	??___bmul,w
  2905  07E2  07A2               	addwf	___bmul@product,f
  2906  07E3                     l2172:
  2907  07E3  1003               	clrc
  2908  07E4  0DA0               	rlf	___bmul@multiplicand,f
  2909  07E5                     l2174:
  2910  07E5  1003               	clrc
  2911  07E6  0CA3               	rrf	___bmul@multiplier,f
  2912  07E7  0823               	movf	___bmul@multiplier,w
  2913  07E8  1D03               	btfss	3,2
  2914  07E9  2FEB               	goto	u1701
  2915  07EA  2FEC               	goto	u1700
  2916  07EB                     u1701:
  2917  07EB  2FDB               	goto	l2168
  2918  07EC                     u1700:
  2919  07EC                     l2176:
  2920  07EC  0822               	movf	___bmul@product,w
  2921  07ED                     l370:
  2922  07ED  0008               	return
  2923  07EE                     __end_of___bmul:
  2924                           
  2925                           	psect	text9
  2926  0690                     __ptext9:	
  2927 ;; *************** function _randomNumber *****************
  2928 ;; Defined at:
  2929 ;;		line 431 in file "utils.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  4   23[BANK0 ] unsigned long 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2, status,0, pclath, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMMON   BANK0   BANK1
  2943 ;;      Params:         0       4       0
  2944 ;;      Locals:         0       0       0
  2945 ;;      Temps:          0       4       0
  2946 ;;      Totals:         0       8       0
  2947 ;;Total ram usage:        8 bytes
  2948 ;; Hardware stack levels used: 1
  2949 ;; Hardware stack levels required when called: 2
  2950 ;; This function calls:
  2951 ;;		___llmod
  2952 ;;		___lmul
  2953 ;; This function is called by:
  2954 ;;		_main
  2955 ;;		_deviceStateMachine
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           
  2960                           ;psect for function _randomNumber
  2961  0690                     _randomNumber:
  2962  0690                     l2236:	
  2963                           ;incstack = 0
  2964                           ; Regs used in _randomNumber: [wreg+status,2+status,0+pclath+cstack]
  2965                           
  2966                           
  2967                           ;utils.c: 432:     randomSeed = (37*randomSeed + 98)%1373;
  2968  0690  3000               	movlw	0
  2969  0691  1283               	bcf	3,5	;RP0=0, select bank0
  2970  0692  1303               	bcf	3,6	;RP1=0, select bank0
  2971  0693  00B0               	movwf	___llmod@divisor+3
  2972  0694  3000               	movlw	0
  2973  0695  00AF               	movwf	___llmod@divisor+2
  2974  0696  3005               	movlw	5
  2975  0697  00AE               	movwf	___llmod@divisor+1
  2976  0698  305D               	movlw	93
  2977  0699  00AD               	movwf	___llmod@divisor
  2978  069A  3062               	movlw	98
  2979  069B  00BB               	movwf	??_randomNumber
  2980  069C  3000               	movlw	0
  2981  069D  00BC               	movwf	??_randomNumber+1
  2982  069E  3000               	movlw	0
  2983  069F  00BD               	movwf	??_randomNumber+2
  2984  06A0  3000               	movlw	0
  2985  06A1  00BE               	movwf	??_randomNumber+3
  2986  06A2  0860               	movf	_randomSeed+3,w
  2987  06A3  00A3               	movwf	___lmul@multiplier+3
  2988  06A4  085F               	movf	_randomSeed+2,w
  2989  06A5  00A2               	movwf	___lmul@multiplier+2
  2990  06A6  085E               	movf	_randomSeed+1,w
  2991  06A7  00A1               	movwf	___lmul@multiplier+1
  2992  06A8  085D               	movf	_randomSeed,w
  2993  06A9  00A0               	movwf	___lmul@multiplier
  2994  06AA  3000               	movlw	0
  2995  06AB  00A7               	movwf	___lmul@multiplicand+3
  2996  06AC  3000               	movlw	0
  2997  06AD  00A6               	movwf	___lmul@multiplicand+2
  2998  06AE  3000               	movlw	0
  2999  06AF  00A5               	movwf	___lmul@multiplicand+1
  3000  06B0  3025               	movlw	37
  3001  06B1  00A4               	movwf	___lmul@multiplicand
  3002  06B2  2735               	fcall	___lmul
  3003  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  3004  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  3005  06B5  0820               	movf	?___lmul,w
  3006  06B6  07BB               	addwf	??_randomNumber,f
  3007  06B7  0821               	movf	?___lmul+1,w
  3008  06B8  1803               	skipnc
  3009  06B9  0F21               	incfsz	?___lmul+1,w
  3010  06BA  2EBC               	goto	u1780
  3011  06BB  2EBD               	goto	u1781
  3012  06BC                     u1780:
  3013  06BC  07BC               	addwf	??_randomNumber+1,f
  3014  06BD                     u1781:
  3015  06BD  0822               	movf	?___lmul+2,w
  3016  06BE  1803               	skipnc
  3017  06BF  0F22               	incfsz	?___lmul+2,w
  3018  06C0  2EC2               	goto	u1782
  3019  06C1  2EC3               	goto	u1783
  3020  06C2                     u1782:
  3021  06C2  07BD               	addwf	??_randomNumber+2,f
  3022  06C3                     u1783:
  3023  06C3  0823               	movf	?___lmul+3,w
  3024  06C4  1803               	skipnc
  3025  06C5  0A23               	incf	?___lmul+3,w
  3026  06C6  07BE               	addwf	??_randomNumber+3,f
  3027  06C7  083E               	movf	??_randomNumber+3,w
  3028  06C8  00B4               	movwf	___llmod@dividend+3
  3029  06C9  083D               	movf	??_randomNumber+2,w
  3030  06CA  00B3               	movwf	___llmod@dividend+2
  3031  06CB  083C               	movf	??_randomNumber+1,w
  3032  06CC  00B2               	movwf	___llmod@dividend+1
  3033  06CD  083B               	movf	??_randomNumber,w
  3034  06CE  00B1               	movwf	___llmod@dividend
  3035  06CF  263A               	fcall	___llmod
  3036  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  3037  06D1  1303               	bcf	3,6	;RP1=0, select bank0
  3038  06D2  0830               	movf	?___llmod+3,w
  3039  06D3  00E0               	movwf	_randomSeed+3
  3040  06D4  082F               	movf	?___llmod+2,w
  3041  06D5  00DF               	movwf	_randomSeed+2
  3042  06D6  082E               	movf	?___llmod+1,w
  3043  06D7  00DE               	movwf	_randomSeed+1
  3044  06D8  082D               	movf	?___llmod,w
  3045  06D9  00DD               	movwf	_randomSeed
  3046  06DA                     l2238:
  3047                           
  3048                           ;utils.c: 433:     return randomSeed;
  3049  06DA  0860               	movf	_randomSeed+3,w
  3050  06DB  00BA               	movwf	?_randomNumber+3
  3051  06DC  085F               	movf	_randomSeed+2,w
  3052  06DD  00B9               	movwf	?_randomNumber+2
  3053  06DE  085E               	movf	_randomSeed+1,w
  3054  06DF  00B8               	movwf	?_randomNumber+1
  3055  06E0  085D               	movf	_randomSeed,w
  3056  06E1  00B7               	movwf	?_randomNumber
  3057  06E2                     l258:
  3058  06E2  0008               	return
  3059  06E3                     __end_of_randomNumber:
  3060                           
  3061                           	psect	text10
  3062  0735                     __ptext10:	
  3063 ;; *************** function ___lmul *****************
  3064 ;; Defined at:
  3065 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul32.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3068 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  product         4    9[BANK0 ] unsigned long 
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  4    0[BANK0 ] unsigned long 
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMMON   BANK0   BANK1
  3080 ;;      Params:         0       8       0
  3081 ;;      Locals:         0       4       0
  3082 ;;      Temps:          0       1       0
  3083 ;;      Totals:         0      13       0
  3084 ;;Total ram usage:       13 bytes
  3085 ;; Hardware stack levels used: 1
  3086 ;; Hardware stack levels required when called: 1
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		_randomNumber
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           
  3095                           ;psect for function ___lmul
  3096  0735                     ___lmul:
  3097  0735                     l2152:	
  3098                           ;incstack = 0
  3099                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3100                           
  3101  0735  3000               	movlw	0
  3102  0736  1283               	bcf	3,5	;RP0=0, select bank0
  3103  0737  1303               	bcf	3,6	;RP1=0, select bank0
  3104  0738  00AC               	movwf	___lmul@product+3
  3105  0739  3000               	movlw	0
  3106  073A  00AB               	movwf	___lmul@product+2
  3107  073B  3000               	movlw	0
  3108  073C  00AA               	movwf	___lmul@product+1
  3109  073D  3000               	movlw	0
  3110  073E  00A9               	movwf	___lmul@product
  3111  073F                     l2154:
  3112  073F  1C20               	btfss	___lmul@multiplier,0
  3113  0740  2F42               	goto	u1641
  3114  0741  2F43               	goto	u1640
  3115  0742                     u1641:
  3116  0742  2F5A               	goto	l2158
  3117  0743                     u1640:
  3118  0743                     l2156:
  3119  0743  0824               	movf	___lmul@multiplicand,w
  3120  0744  07A9               	addwf	___lmul@product,f
  3121  0745  0825               	movf	___lmul@multiplicand+1,w
  3122  0746  1103               	clrz
  3123  0747  1803               	skipnc
  3124  0748  3E01               	addlw	1
  3125  0749  1903               	skipnz
  3126  074A  2F4C               	goto	u1651
  3127  074B  07AA               	addwf	___lmul@product+1,f
  3128  074C                     u1651:
  3129  074C  0826               	movf	___lmul@multiplicand+2,w
  3130  074D  1103               	clrz
  3131  074E  1803               	skipnc
  3132  074F  3E01               	addlw	1
  3133  0750  1903               	skipnz
  3134  0751  2F53               	goto	u1652
  3135  0752  07AB               	addwf	___lmul@product+2,f
  3136  0753                     u1652:
  3137  0753  0827               	movf	___lmul@multiplicand+3,w
  3138  0754  1103               	clrz
  3139  0755  1803               	skipnc
  3140  0756  3E01               	addlw	1
  3141  0757  1903               	skipnz
  3142  0758  2F5A               	goto	u1653
  3143  0759  07AC               	addwf	___lmul@product+3,f
  3144  075A                     u1653:
  3145  075A                     l2158:
  3146  075A  3001               	movlw	1
  3147  075B  00A8               	movwf	??___lmul
  3148  075C                     u1665:
  3149  075C  1003               	clrc
  3150  075D  0DA4               	rlf	___lmul@multiplicand,f
  3151  075E  0DA5               	rlf	___lmul@multiplicand+1,f
  3152  075F  0DA6               	rlf	___lmul@multiplicand+2,f
  3153  0760  0DA7               	rlf	___lmul@multiplicand+3,f
  3154  0761  0BA8               	decfsz	??___lmul,f
  3155  0762  2F5C               	goto	u1665
  3156  0763                     l2160:
  3157  0763  3001               	movlw	1
  3158  0764                     u1675:
  3159  0764  1003               	clrc
  3160  0765  0CA3               	rrf	___lmul@multiplier+3,f
  3161  0766  0CA2               	rrf	___lmul@multiplier+2,f
  3162  0767  0CA1               	rrf	___lmul@multiplier+1,f
  3163  0768  0CA0               	rrf	___lmul@multiplier,f
  3164  0769  3EFF               	addlw	-1
  3165  076A  1D03               	skipz
  3166  076B  2F64               	goto	u1675
  3167  076C  0823               	movf	___lmul@multiplier+3,w
  3168  076D  0422               	iorwf	___lmul@multiplier+2,w
  3169  076E  0421               	iorwf	___lmul@multiplier+1,w
  3170  076F  0420               	iorwf	___lmul@multiplier,w
  3171  0770  1D03               	skipz
  3172  0771  2F73               	goto	u1681
  3173  0772  2F74               	goto	u1680
  3174  0773                     u1681:
  3175  0773  2F3F               	goto	l2154
  3176  0774                     u1680:
  3177  0774                     l2162:
  3178  0774  082C               	movf	___lmul@product+3,w
  3179  0775  00A3               	movwf	?___lmul+3
  3180  0776  082B               	movf	___lmul@product+2,w
  3181  0777  00A2               	movwf	?___lmul+2
  3182  0778  082A               	movf	___lmul@product+1,w
  3183  0779  00A1               	movwf	?___lmul+1
  3184  077A  0829               	movf	___lmul@product,w
  3185  077B  00A0               	movwf	?___lmul
  3186  077C                     l358:
  3187  077C  0008               	return
  3188  077D                     __end_of___lmul:
  3189                           
  3190                           	psect	text11
  3191  063A                     __ptext11:	
  3192 ;; *************** function ___llmod *****************
  3193 ;; Defined at:
  3194 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\llmod.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;  divisor         4   13[BANK0 ] unsigned long 
  3197 ;;  dividend        4   17[BANK0 ] unsigned long 
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;  counter         1   22[BANK0 ] unsigned char 
  3200 ;; Return value:  Size  Location     Type
  3201 ;;                  4   13[BANK0 ] unsigned long 
  3202 ;; Registers used:
  3203 ;;		wreg, status,2, status,0
  3204 ;; Tracked objects:
  3205 ;;		On entry : 0/0
  3206 ;;		On exit  : 0/0
  3207 ;;		Unchanged: 0/0
  3208 ;; Data sizes:     COMMON   BANK0   BANK1
  3209 ;;      Params:         0       8       0
  3210 ;;      Locals:         0       1       0
  3211 ;;      Temps:          0       1       0
  3212 ;;      Totals:         0      10       0
  3213 ;;Total ram usage:       10 bytes
  3214 ;; Hardware stack levels used: 1
  3215 ;; Hardware stack levels required when called: 1
  3216 ;; This function calls:
  3217 ;;		Nothing
  3218 ;; This function is called by:
  3219 ;;		_main
  3220 ;;		_randomNumber
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function ___llmod
  3226  063A                     ___llmod:
  3227  063A                     l2180:	
  3228                           ;incstack = 0
  3229                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  3230                           
  3231  063A  1283               	bcf	3,5	;RP0=0, select bank0
  3232  063B  1303               	bcf	3,6	;RP1=0, select bank0
  3233  063C  0830               	movf	___llmod@divisor+3,w
  3234  063D  042F               	iorwf	___llmod@divisor+2,w
  3235  063E  042E               	iorwf	___llmod@divisor+1,w
  3236  063F  042D               	iorwf	___llmod@divisor,w
  3237  0640  1903               	skipnz
  3238  0641  2E43               	goto	u1711
  3239  0642  2E44               	goto	u1710
  3240  0643                     u1711:
  3241  0643  2E87               	goto	l2196
  3242  0644                     u1710:
  3243  0644                     l2182:
  3244  0644  01B6               	clrf	___llmod@counter
  3245  0645  0AB6               	incf	___llmod@counter,f
  3246  0646  2E54               	goto	l2186
  3247  0647                     l2184:
  3248  0647  3001               	movlw	1
  3249  0648  00B5               	movwf	??___llmod
  3250  0649                     u1725:
  3251  0649  1003               	clrc
  3252  064A  0DAD               	rlf	___llmod@divisor,f
  3253  064B  0DAE               	rlf	___llmod@divisor+1,f
  3254  064C  0DAF               	rlf	___llmod@divisor+2,f
  3255  064D  0DB0               	rlf	___llmod@divisor+3,f
  3256  064E  0BB5               	decfsz	??___llmod,f
  3257  064F  2E49               	goto	u1725
  3258  0650  3001               	movlw	1
  3259  0651  00B5               	movwf	??___llmod
  3260  0652  0835               	movf	??___llmod,w
  3261  0653  07B6               	addwf	___llmod@counter,f
  3262  0654                     l2186:
  3263  0654  1FB0               	btfss	___llmod@divisor+3,7
  3264  0655  2E57               	goto	u1731
  3265  0656  2E58               	goto	u1730
  3266  0657                     u1731:
  3267  0657  2E47               	goto	l2184
  3268  0658                     u1730:
  3269  0658                     l2188:
  3270  0658  0830               	movf	___llmod@divisor+3,w
  3271  0659  0234               	subwf	___llmod@dividend+3,w
  3272  065A  1D03               	skipz
  3273  065B  2E66               	goto	u1745
  3274  065C  082F               	movf	___llmod@divisor+2,w
  3275  065D  0233               	subwf	___llmod@dividend+2,w
  3276  065E  1D03               	skipz
  3277  065F  2E66               	goto	u1745
  3278  0660  082E               	movf	___llmod@divisor+1,w
  3279  0661  0232               	subwf	___llmod@dividend+1,w
  3280  0662  1D03               	skipz
  3281  0663  2E66               	goto	u1745
  3282  0664  082D               	movf	___llmod@divisor,w
  3283  0665  0231               	subwf	___llmod@dividend,w
  3284  0666                     u1745:
  3285  0666  1C03               	skipc
  3286  0667  2E69               	goto	u1741
  3287  0668  2E6A               	goto	u1740
  3288  0669                     u1741:
  3289  0669  2E78               	goto	l2192
  3290  066A                     u1740:
  3291  066A                     l2190:
  3292  066A  082D               	movf	___llmod@divisor,w
  3293  066B  02B1               	subwf	___llmod@dividend,f
  3294  066C  082E               	movf	___llmod@divisor+1,w
  3295  066D  1C03               	skipc
  3296  066E  0F2E               	incfsz	___llmod@divisor+1,w
  3297  066F  02B2               	subwf	___llmod@dividend+1,f
  3298  0670  082F               	movf	___llmod@divisor+2,w
  3299  0671  1C03               	skipc
  3300  0672  0F2F               	incfsz	___llmod@divisor+2,w
  3301  0673  02B3               	subwf	___llmod@dividend+2,f
  3302  0674  0830               	movf	___llmod@divisor+3,w
  3303  0675  1C03               	skipc
  3304  0676  0F30               	incfsz	___llmod@divisor+3,w
  3305  0677  02B4               	subwf	___llmod@dividend+3,f
  3306  0678                     l2192:
  3307  0678  3001               	movlw	1
  3308  0679                     u1755:
  3309  0679  1003               	clrc
  3310  067A  0CB0               	rrf	___llmod@divisor+3,f
  3311  067B  0CAF               	rrf	___llmod@divisor+2,f
  3312  067C  0CAE               	rrf	___llmod@divisor+1,f
  3313  067D  0CAD               	rrf	___llmod@divisor,f
  3314  067E  3EFF               	addlw	-1
  3315  067F  1D03               	skipz
  3316  0680  2E79               	goto	u1755
  3317  0681                     l2194:
  3318  0681  3001               	movlw	1
  3319  0682  02B6               	subwf	___llmod@counter,f
  3320  0683  1D03               	btfss	3,2
  3321  0684  2E86               	goto	u1761
  3322  0685  2E87               	goto	u1760
  3323  0686                     u1761:
  3324  0686  2E58               	goto	l2188
  3325  0687                     u1760:
  3326  0687                     l2196:
  3327  0687  0834               	movf	___llmod@dividend+3,w
  3328  0688  00B0               	movwf	?___llmod+3
  3329  0689  0833               	movf	___llmod@dividend+2,w
  3330  068A  00AF               	movwf	?___llmod+2
  3331  068B  0832               	movf	___llmod@dividend+1,w
  3332  068C  00AE               	movwf	?___llmod+1
  3333  068D  0831               	movf	___llmod@dividend,w
  3334  068E  00AD               	movwf	?___llmod
  3335  068F                     l566:
  3336  068F  0008               	return
  3337  0690                     __end_of___llmod:
  3338                           
  3339                           	psect	text12
  3340  0585                     __ptext12:	
  3341 ;; *************** function ___awmod *****************
  3342 ;; Defined at:
  3343 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;  divisor         2   31[BANK0 ] int 
  3346 ;;  dividend        2   33[BANK0 ] int 
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;  sign            1   37[BANK0 ] unsigned char 
  3349 ;;  counter         1   36[BANK0 ] unsigned char 
  3350 ;; Return value:  Size  Location     Type
  3351 ;;                  2   31[BANK0 ] int 
  3352 ;; Registers used:
  3353 ;;		wreg, status,2, status,0
  3354 ;; Tracked objects:
  3355 ;;		On entry : 0/0
  3356 ;;		On exit  : 0/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMMON   BANK0   BANK1
  3359 ;;      Params:         0       4       0
  3360 ;;      Locals:         0       2       0
  3361 ;;      Temps:          0       1       0
  3362 ;;      Totals:         0       7       0
  3363 ;;Total ram usage:        7 bytes
  3364 ;; Hardware stack levels used: 1
  3365 ;; Hardware stack levels required when called: 1
  3366 ;; This function calls:
  3367 ;;		Nothing
  3368 ;; This function is called by:
  3369 ;;		_deviceStateMachine
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           
  3374                           ;psect for function ___awmod
  3375  0585                     ___awmod:
  3376  0585                     l1698:	
  3377                           ;incstack = 0
  3378                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3379                           
  3380  0585  1283               	bcf	3,5	;RP0=0, select bank0
  3381  0586  1303               	bcf	3,6	;RP1=0, select bank0
  3382  0587  01C5               	clrf	___awmod@sign
  3383  0588                     l1700:
  3384  0588  1FC2               	btfss	___awmod@dividend+1,7
  3385  0589  2D8B               	goto	u1251
  3386  058A  2D8C               	goto	u1250
  3387  058B                     u1251:
  3388  058B  2D93               	goto	l1706
  3389  058C                     u1250:
  3390  058C                     l1702:
  3391  058C  09C1               	comf	___awmod@dividend,f
  3392  058D  09C2               	comf	___awmod@dividend+1,f
  3393  058E  0AC1               	incf	___awmod@dividend,f
  3394  058F  1903               	skipnz
  3395  0590  0AC2               	incf	___awmod@dividend+1,f
  3396  0591                     l1704:
  3397  0591  01C5               	clrf	___awmod@sign
  3398  0592  0AC5               	incf	___awmod@sign,f
  3399  0593                     l1706:
  3400  0593  1FC0               	btfss	___awmod@divisor+1,7
  3401  0594  2D96               	goto	u1261
  3402  0595  2D97               	goto	u1260
  3403  0596                     u1261:
  3404  0596  2D9C               	goto	l1710
  3405  0597                     u1260:
  3406  0597                     l1708:
  3407  0597  09BF               	comf	___awmod@divisor,f
  3408  0598  09C0               	comf	___awmod@divisor+1,f
  3409  0599  0ABF               	incf	___awmod@divisor,f
  3410  059A  1903               	skipnz
  3411  059B  0AC0               	incf	___awmod@divisor+1,f
  3412  059C                     l1710:
  3413  059C  083F               	movf	___awmod@divisor,w
  3414  059D  0440               	iorwf	___awmod@divisor+1,w
  3415  059E  1903               	btfsc	3,2
  3416  059F  2DA1               	goto	u1271
  3417  05A0  2DA2               	goto	u1270
  3418  05A1                     u1271:
  3419  05A1  2DD1               	goto	l1728
  3420  05A2                     u1270:
  3421  05A2                     l1712:
  3422  05A2  01C4               	clrf	___awmod@counter
  3423  05A3  0AC4               	incf	___awmod@counter,f
  3424  05A4  2DB0               	goto	l1718
  3425  05A5                     l1714:
  3426  05A5  3001               	movlw	1
  3427  05A6                     u1285:
  3428  05A6  1003               	clrc
  3429  05A7  0DBF               	rlf	___awmod@divisor,f
  3430  05A8  0DC0               	rlf	___awmod@divisor+1,f
  3431  05A9  3EFF               	addlw	-1
  3432  05AA  1D03               	skipz
  3433  05AB  2DA6               	goto	u1285
  3434  05AC                     l1716:
  3435  05AC  3001               	movlw	1
  3436  05AD  00C3               	movwf	??___awmod
  3437  05AE  0843               	movf	??___awmod,w
  3438  05AF  07C4               	addwf	___awmod@counter,f
  3439  05B0                     l1718:
  3440  05B0  1FC0               	btfss	___awmod@divisor+1,7
  3441  05B1  2DB3               	goto	u1291
  3442  05B2  2DB4               	goto	u1290
  3443  05B3                     u1291:
  3444  05B3  2DA5               	goto	l1714
  3445  05B4                     u1290:
  3446  05B4                     l1720:
  3447  05B4  0840               	movf	___awmod@divisor+1,w
  3448  05B5  0242               	subwf	___awmod@dividend+1,w
  3449  05B6  1D03               	skipz
  3450  05B7  2DBA               	goto	u1305
  3451  05B8  083F               	movf	___awmod@divisor,w
  3452  05B9  0241               	subwf	___awmod@dividend,w
  3453  05BA                     u1305:
  3454  05BA  1C03               	skipc
  3455  05BB  2DBD               	goto	u1301
  3456  05BC  2DBE               	goto	u1300
  3457  05BD                     u1301:
  3458  05BD  2DC4               	goto	l1724
  3459  05BE                     u1300:
  3460  05BE                     l1722:
  3461  05BE  083F               	movf	___awmod@divisor,w
  3462  05BF  02C1               	subwf	___awmod@dividend,f
  3463  05C0  0840               	movf	___awmod@divisor+1,w
  3464  05C1  1C03               	skipc
  3465  05C2  03C2               	decf	___awmod@dividend+1,f
  3466  05C3  02C2               	subwf	___awmod@dividend+1,f
  3467  05C4                     l1724:
  3468  05C4  3001               	movlw	1
  3469  05C5                     u1315:
  3470  05C5  1003               	clrc
  3471  05C6  0CC0               	rrf	___awmod@divisor+1,f
  3472  05C7  0CBF               	rrf	___awmod@divisor,f
  3473  05C8  3EFF               	addlw	-1
  3474  05C9  1D03               	skipz
  3475  05CA  2DC5               	goto	u1315
  3476  05CB                     l1726:
  3477  05CB  3001               	movlw	1
  3478  05CC  02C4               	subwf	___awmod@counter,f
  3479  05CD  1D03               	btfss	3,2
  3480  05CE  2DD0               	goto	u1321
  3481  05CF  2DD1               	goto	u1320
  3482  05D0                     u1321:
  3483  05D0  2DB4               	goto	l1720
  3484  05D1                     u1320:
  3485  05D1                     l1728:
  3486  05D1  0845               	movf	___awmod@sign,w
  3487  05D2  1903               	btfsc	3,2
  3488  05D3  2DD5               	goto	u1331
  3489  05D4  2DD6               	goto	u1330
  3490  05D5                     u1331:
  3491  05D5  2DDB               	goto	l1732
  3492  05D6                     u1330:
  3493  05D6                     l1730:
  3494  05D6  09C1               	comf	___awmod@dividend,f
  3495  05D7  09C2               	comf	___awmod@dividend+1,f
  3496  05D8  0AC1               	incf	___awmod@dividend,f
  3497  05D9  1903               	skipnz
  3498  05DA  0AC2               	incf	___awmod@dividend+1,f
  3499  05DB                     l1732:
  3500  05DB  0842               	movf	___awmod@dividend+1,w
  3501  05DC  00C0               	movwf	?___awmod+1
  3502  05DD  0841               	movf	___awmod@dividend,w
  3503  05DE  00BF               	movwf	?___awmod
  3504  05DF                     l510:
  3505  05DF  0008               	return
  3506  05E0                     __end_of___awmod:
  3507                           
  3508                           	psect	text13
  3509  04BF                     __ptext13:	
  3510 ;; *************** function ___awdiv *****************
  3511 ;; Defined at:
  3512 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  divisor         2    0[BANK0 ] int 
  3515 ;;  dividend        2    2[BANK0 ] int 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  quotient        2    7[BANK0 ] int 
  3518 ;;  sign            1    6[BANK0 ] unsigned char 
  3519 ;;  counter         1    5[BANK0 ] unsigned char 
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  2    0[BANK0 ] int 
  3522 ;; Registers used:
  3523 ;;		wreg, status,2, status,0
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMMON   BANK0   BANK1
  3529 ;;      Params:         0       4       0
  3530 ;;      Locals:         0       4       0
  3531 ;;      Temps:          0       1       0
  3532 ;;      Totals:         0       9       0
  3533 ;;Total ram usage:        9 bytes
  3534 ;; Hardware stack levels used: 1
  3535 ;; Hardware stack levels required when called: 1
  3536 ;; This function calls:
  3537 ;;		Nothing
  3538 ;; This function is called by:
  3539 ;;		_deviceStateMachine
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           
  3544                           ;psect for function ___awdiv
  3545  04BF                     ___awdiv:
  3546  04BF                     l2242:	
  3547                           ;incstack = 0
  3548                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3549                           
  3550  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  3551  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  3552  04C1  01A6               	clrf	___awdiv@sign
  3553  04C2                     l2244:
  3554  04C2  1FA1               	btfss	___awdiv@divisor+1,7
  3555  04C3  2CC5               	goto	u1791
  3556  04C4  2CC6               	goto	u1790
  3557  04C5                     u1791:
  3558  04C5  2CCD               	goto	l2250
  3559  04C6                     u1790:
  3560  04C6                     l2246:
  3561  04C6  09A0               	comf	___awdiv@divisor,f
  3562  04C7  09A1               	comf	___awdiv@divisor+1,f
  3563  04C8  0AA0               	incf	___awdiv@divisor,f
  3564  04C9  1903               	skipnz
  3565  04CA  0AA1               	incf	___awdiv@divisor+1,f
  3566  04CB                     l2248:
  3567  04CB  01A6               	clrf	___awdiv@sign
  3568  04CC  0AA6               	incf	___awdiv@sign,f
  3569  04CD                     l2250:
  3570  04CD  1FA3               	btfss	___awdiv@dividend+1,7
  3571  04CE  2CD0               	goto	u1801
  3572  04CF  2CD1               	goto	u1800
  3573  04D0                     u1801:
  3574  04D0  2CDA               	goto	l2256
  3575  04D1                     u1800:
  3576  04D1                     l2252:
  3577  04D1  09A2               	comf	___awdiv@dividend,f
  3578  04D2  09A3               	comf	___awdiv@dividend+1,f
  3579  04D3  0AA2               	incf	___awdiv@dividend,f
  3580  04D4  1903               	skipnz
  3581  04D5  0AA3               	incf	___awdiv@dividend+1,f
  3582  04D6                     l2254:
  3583  04D6  3001               	movlw	1
  3584  04D7  00A4               	movwf	??___awdiv
  3585  04D8  0824               	movf	??___awdiv,w
  3586  04D9  06A6               	xorwf	___awdiv@sign,f
  3587  04DA                     l2256:
  3588  04DA  01A7               	clrf	___awdiv@quotient
  3589  04DB  01A8               	clrf	___awdiv@quotient+1
  3590  04DC                     l2258:
  3591  04DC  0820               	movf	___awdiv@divisor,w
  3592  04DD  0421               	iorwf	___awdiv@divisor+1,w
  3593  04DE  1903               	btfsc	3,2
  3594  04DF  2CE1               	goto	u1811
  3595  04E0  2CE2               	goto	u1810
  3596  04E1                     u1811:
  3597  04E1  2D19               	goto	l2278
  3598  04E2                     u1810:
  3599  04E2                     l2260:
  3600  04E2  01A5               	clrf	___awdiv@counter
  3601  04E3  0AA5               	incf	___awdiv@counter,f
  3602  04E4  2CF0               	goto	l2266
  3603  04E5                     l2262:
  3604  04E5  3001               	movlw	1
  3605  04E6                     u1825:
  3606  04E6  1003               	clrc
  3607  04E7  0DA0               	rlf	___awdiv@divisor,f
  3608  04E8  0DA1               	rlf	___awdiv@divisor+1,f
  3609  04E9  3EFF               	addlw	-1
  3610  04EA  1D03               	skipz
  3611  04EB  2CE6               	goto	u1825
  3612  04EC                     l2264:
  3613  04EC  3001               	movlw	1
  3614  04ED  00A4               	movwf	??___awdiv
  3615  04EE  0824               	movf	??___awdiv,w
  3616  04EF  07A5               	addwf	___awdiv@counter,f
  3617  04F0                     l2266:
  3618  04F0  1FA1               	btfss	___awdiv@divisor+1,7
  3619  04F1  2CF3               	goto	u1831
  3620  04F2  2CF4               	goto	u1830
  3621  04F3                     u1831:
  3622  04F3  2CE5               	goto	l2262
  3623  04F4                     u1830:
  3624  04F4                     l2268:
  3625  04F4  3001               	movlw	1
  3626  04F5                     u1845:
  3627  04F5  1003               	clrc
  3628  04F6  0DA7               	rlf	___awdiv@quotient,f
  3629  04F7  0DA8               	rlf	___awdiv@quotient+1,f
  3630  04F8  3EFF               	addlw	-1
  3631  04F9  1D03               	skipz
  3632  04FA  2CF5               	goto	u1845
  3633  04FB  0821               	movf	___awdiv@divisor+1,w
  3634  04FC  0223               	subwf	___awdiv@dividend+1,w
  3635  04FD  1D03               	skipz
  3636  04FE  2D01               	goto	u1855
  3637  04FF  0820               	movf	___awdiv@divisor,w
  3638  0500  0222               	subwf	___awdiv@dividend,w
  3639  0501                     u1855:
  3640  0501  1C03               	skipc
  3641  0502  2D04               	goto	u1851
  3642  0503  2D05               	goto	u1850
  3643  0504                     u1851:
  3644  0504  2D0C               	goto	l2274
  3645  0505                     u1850:
  3646  0505                     l2270:
  3647  0505  0820               	movf	___awdiv@divisor,w
  3648  0506  02A2               	subwf	___awdiv@dividend,f
  3649  0507  0821               	movf	___awdiv@divisor+1,w
  3650  0508  1C03               	skipc
  3651  0509  03A3               	decf	___awdiv@dividend+1,f
  3652  050A  02A3               	subwf	___awdiv@dividend+1,f
  3653  050B                     l2272:
  3654  050B  1427               	bsf	___awdiv@quotient,0
  3655  050C                     l2274:
  3656  050C  3001               	movlw	1
  3657  050D                     u1865:
  3658  050D  1003               	clrc
  3659  050E  0CA1               	rrf	___awdiv@divisor+1,f
  3660  050F  0CA0               	rrf	___awdiv@divisor,f
  3661  0510  3EFF               	addlw	-1
  3662  0511  1D03               	skipz
  3663  0512  2D0D               	goto	u1865
  3664  0513                     l2276:
  3665  0513  3001               	movlw	1
  3666  0514  02A5               	subwf	___awdiv@counter,f
  3667  0515  1D03               	btfss	3,2
  3668  0516  2D18               	goto	u1871
  3669  0517  2D19               	goto	u1870
  3670  0518                     u1871:
  3671  0518  2CF4               	goto	l2268
  3672  0519                     u1870:
  3673  0519                     l2278:
  3674  0519  0826               	movf	___awdiv@sign,w
  3675  051A  1903               	btfsc	3,2
  3676  051B  2D1D               	goto	u1881
  3677  051C  2D1E               	goto	u1880
  3678  051D                     u1881:
  3679  051D  2D23               	goto	l2282
  3680  051E                     u1880:
  3681  051E                     l2280:
  3682  051E  09A7               	comf	___awdiv@quotient,f
  3683  051F  09A8               	comf	___awdiv@quotient+1,f
  3684  0520  0AA7               	incf	___awdiv@quotient,f
  3685  0521  1903               	skipnz
  3686  0522  0AA8               	incf	___awdiv@quotient+1,f
  3687  0523                     l2282:
  3688  0523  0828               	movf	___awdiv@quotient+1,w
  3689  0524  00A1               	movwf	?___awdiv+1
  3690  0525  0827               	movf	___awdiv@quotient,w
  3691  0526  00A0               	movwf	?___awdiv
  3692  0527                     l497:
  3693  0527  0008               	return
  3694  0528                     __end_of___awdiv:
  3695                           
  3696                           	psect	text14
  3697  06E3                     __ptext14:	
  3698 ;; *************** function _configBoard *****************
  3699 ;; Defined at:
  3700 ;;		line 250 in file "utils.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;		None
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;		None
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  1    wreg      void 
  3707 ;; Registers used:
  3708 ;;		wreg, status,2, status,0
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMMON   BANK0   BANK1
  3714 ;;      Params:         0       0       0
  3715 ;;      Locals:         0       0       0
  3716 ;;      Temps:          0       1       0
  3717 ;;      Totals:         0       1       0
  3718 ;;Total ram usage:        1 bytes
  3719 ;; Hardware stack levels used: 1
  3720 ;; Hardware stack levels required when called: 1
  3721 ;; This function calls:
  3722 ;;		Nothing
  3723 ;; This function is called by:
  3724 ;;		_main
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           
  3729                           ;psect for function _configBoard
  3730  06E3                     _configBoard:
  3731  06E3                     l2286:	
  3732                           ;incstack = 0
  3733                           ; Regs used in _configBoard: [wreg+status,2+status,0]
  3734                           
  3735                           
  3736                           ;utils.c: 260:     OSCCON |= (1<<0);
  3737  06E3  1683               	bsf	3,5	;RP0=1, select bank1
  3738  06E4  1303               	bcf	3,6	;RP1=0, select bank1
  3739  06E5  140F               	bsf	15,0	;volatile
  3740  06E6                     l2288:
  3741                           
  3742                           ;utils.c: 261:     OSCCON &= ~(1<<1);
  3743  06E6  30FD               	movlw	253
  3744  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  3745  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  3746  06E9  00A0               	movwf	??_configBoard
  3747  06EA  0820               	movf	??_configBoard,w
  3748  06EB  1683               	bsf	3,5	;RP0=1, select bank1
  3749  06EC  1303               	bcf	3,6	;RP1=0, select bank1
  3750  06ED  058F               	andwf	15,f	;volatile
  3751  06EE                     l2290:
  3752                           
  3753                           ;utils.c: 262:     OSCCON |= (1<<2);
  3754  06EE  150F               	bsf	15,2	;volatile
  3755                           
  3756                           ;utils.c: 263:     OSCCON &= ~(1<<3);
  3757  06EF  30F7               	movlw	247
  3758  06F0  1283               	bcf	3,5	;RP0=0, select bank0
  3759  06F1  1303               	bcf	3,6	;RP1=0, select bank0
  3760  06F2  00A0               	movwf	??_configBoard
  3761  06F3  0820               	movf	??_configBoard,w
  3762  06F4  1683               	bsf	3,5	;RP0=1, select bank1
  3763  06F5  1303               	bcf	3,6	;RP1=0, select bank1
  3764  06F6  058F               	andwf	15,f	;volatile
  3765                           
  3766                           ;utils.c: 264:     OSCCON |= (0b01110000);
  3767  06F7  3070               	movlw	112
  3768  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  3769  06F9  1303               	bcf	3,6	;RP1=0, select bank0
  3770  06FA  00A0               	movwf	??_configBoard
  3771  06FB  0820               	movf	??_configBoard,w
  3772  06FC  1683               	bsf	3,5	;RP0=1, select bank1
  3773  06FD  1303               	bcf	3,6	;RP1=0, select bank1
  3774  06FE  048F               	iorwf	15,f	;volatile
  3775  06FF                     l2292:
  3776                           
  3777                           ;utils.c: 267:     ANSEL = 0x00;
  3778  06FF  1283               	bcf	3,5	;RP0=0, select bank2
  3779  0700  1703               	bsf	3,6	;RP1=1, select bank2
  3780  0701  019E               	clrf	30	;volatile
  3781  0702                     l2294:
  3782                           
  3783                           ;utils.c: 268:     ANSELH = 0x00;
  3784  0702  019F               	clrf	31	;volatile
  3785  0703                     l2296:
  3786                           
  3787                           ;utils.c: 274:     TRISA = 0b00010000;
  3788  0703  3010               	movlw	16
  3789  0704  1683               	bsf	3,5	;RP0=1, select bank1
  3790  0705  1303               	bcf	3,6	;RP1=0, select bank1
  3791  0706  0085               	movwf	5	;volatile
  3792  0707                     l2298:
  3793                           
  3794                           ;utils.c: 275:     TRISB = 0b11110000;
  3795  0707  30F0               	movlw	240
  3796  0708  0086               	movwf	6	;volatile
  3797  0709                     l2300:
  3798                           
  3799                           ;utils.c: 276:     TRISC = 0x00;
  3800  0709  0187               	clrf	7	;volatile
  3801  070A                     l2302:
  3802                           
  3803                           ;utils.c: 279:     PORTA = 0xff;
  3804  070A  30FF               	movlw	255
  3805  070B  1283               	bcf	3,5	;RP0=0, select bank0
  3806  070C  1303               	bcf	3,6	;RP1=0, select bank0
  3807  070D  0085               	movwf	5	;volatile
  3808  070E                     l2304:
  3809                           
  3810                           ;utils.c: 280:     PORTB = 0xff;
  3811  070E  30FF               	movlw	255
  3812  070F  0086               	movwf	6	;volatile
  3813  0710                     l2306:
  3814                           
  3815                           ;utils.c: 281:     PORTC = 0x00;
  3816  0710  0187               	clrf	7	;volatile
  3817  0711                     l2308:
  3818                           
  3819                           ;utils.c: 295:     nRABPU = 0;
  3820  0711  1683               	bsf	3,5	;RP0=1, select bank1
  3821  0712  1303               	bcf	3,6	;RP1=0, select bank1
  3822  0713  1381               	bcf	1,7	;volatile
  3823  0714                     l2310:
  3824                           
  3825                           ;utils.c: 297:     T0CS = 0;
  3826  0714  1281               	bcf	1,5	;volatile
  3827  0715                     l2312:
  3828                           
  3829                           ;utils.c: 299:     PSA = 0;
  3830  0715  1181               	bcf	1,3	;volatile
  3831  0716                     l2314:
  3832                           
  3833                           ;utils.c: 301:     PS0 = 1;
  3834  0716  1401               	bsf	1,0	;volatile
  3835  0717                     l2316:
  3836                           
  3837                           ;utils.c: 302:     PS1 = 1;
  3838  0717  1481               	bsf	1,1	;volatile
  3839  0718                     l2318:
  3840                           
  3841                           ;utils.c: 303:     PS2 = 0;
  3842  0718  1101               	bcf	1,2	;volatile
  3843  0719                     l2320:
  3844                           
  3845                           ;utils.c: 306:     TMR0= 133;
  3846  0719  3085               	movlw	133
  3847  071A  1283               	bcf	3,5	;RP0=0, select bank0
  3848  071B  1303               	bcf	3,6	;RP1=0, select bank0
  3849  071C  0081               	movwf	1	;volatile
  3850  071D                     l2322:
  3851                           
  3852                           ;utils.c: 307:     GIE=1;
  3853  071D  178B               	bsf	11,7	;volatile
  3854  071E                     l2324:
  3855                           
  3856                           ;utils.c: 308:     PEIE=1;
  3857  071E  170B               	bsf	11,6	;volatile
  3858  071F                     l2326:
  3859                           
  3860                           ;utils.c: 309:     T0IE=1;
  3861  071F  168B               	bsf	11,5	;volatile
  3862  0720                     l2328:
  3863                           
  3864                           ;utils.c: 310:     RABIE = 1;
  3865  0720  158B               	bsf	11,3	;volatile
  3866  0721                     l2330:
  3867                           
  3868                           ;utils.c: 311:     T0IF = 0;
  3869  0721  110B               	bcf	11,2	;volatile
  3870  0722                     l2332:
  3871                           
  3872                           ;utils.c: 312:     RABIF = 0;
  3873  0722  100B               	bcf	11,0	;volatile
  3874  0723                     l2334:
  3875                           
  3876                           ;utils.c: 316:     WPUA4 = 1;
  3877  0723  1683               	bsf	3,5	;RP0=1, select bank1
  3878  0724  1303               	bcf	3,6	;RP1=0, select bank1
  3879  0725  1615               	bsf	21,4	;volatile
  3880  0726                     l2336:
  3881                           
  3882                           ;utils.c: 317:     WPUB4 = 1;
  3883  0726  1283               	bcf	3,5	;RP0=0, select bank2
  3884  0727  1703               	bsf	3,6	;RP1=1, select bank2
  3885  0728  1615               	bsf	21,4	;volatile
  3886  0729                     l2338:
  3887                           
  3888                           ;utils.c: 318:     WPUB5 = 1;
  3889  0729  1695               	bsf	21,5	;volatile
  3890  072A                     l2340:
  3891                           
  3892                           ;utils.c: 319:     WPUB6 = 1;
  3893  072A  1715               	bsf	21,6	;volatile
  3894  072B                     l2342:
  3895                           
  3896                           ;utils.c: 320:     WPUB7 = 1;
  3897  072B  1795               	bsf	21,7	;volatile
  3898  072C                     l2344:
  3899                           
  3900                           ;utils.c: 324:     IOCA = 0b00010000;
  3901  072C  3010               	movlw	16
  3902  072D  1683               	bsf	3,5	;RP0=1, select bank1
  3903  072E  1303               	bcf	3,6	;RP1=0, select bank1
  3904  072F  0096               	movwf	22	;volatile
  3905  0730                     l2346:
  3906                           
  3907                           ;utils.c: 325:     IOCB = 0b11110000;
  3908  0730  30F0               	movlw	240
  3909  0731  1283               	bcf	3,5	;RP0=0, select bank2
  3910  0732  1703               	bsf	3,6	;RP1=1, select bank2
  3911  0733  0096               	movwf	22	;volatile
  3912  0734                     l221:
  3913  0734  0008               	return
  3914  0735                     __end_of_configBoard:
  3915                           
  3916                           	psect	text15
  3917  03B4                     __ptext15:	
  3918 ;; *************** function _my_isr_routine *****************
  3919 ;; Defined at:
  3920 ;;		line 42 in file "main.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;		None
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, status,2, status,0
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMMON   BANK0   BANK1
  3934 ;;      Params:         0       0       0
  3935 ;;      Locals:         0       0       0
  3936 ;;      Temps:          6       0       0
  3937 ;;      Totals:         6       0       0
  3938 ;;Total ram usage:        6 bytes
  3939 ;; Hardware stack levels used: 1
  3940 ;; This function calls:
  3941 ;;		Nothing
  3942 ;; This function is called by:
  3943 ;;		Interrupt level 1
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           
  3948                           ;psect for function _my_isr_routine
  3949  03B4                     _my_isr_routine:
  3950  03B4                     i1l1938:
  3951                           
  3952                           ;main.c: 45:     if(T0IF)
  3953  03B4  1D0B               	btfss	11,2	;volatile
  3954  03B5  2BB7               	goto	u143_21
  3955  03B6  2BB8               	goto	u143_20
  3956  03B7                     u143_21:
  3957  03B7  2BCB               	goto	i1l1944
  3958  03B8                     u143_20:
  3959  03B8                     i1l1940:
  3960                           
  3961                           ;main.c: 46:     {;main.c: 47:         T0IF = 0;
  3962  03B8  110B               	bcf	11,2	;volatile
  3963  03B9                     i1l1942:
  3964                           
  3965                           ;main.c: 48:         TMR0 = 133;
  3966  03B9  3085               	movlw	133
  3967  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  3968  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  3969  03BC  0081               	movwf	1	;volatile
  3970                           
  3971                           ;main.c: 49:         uiCounterms++;
  3972  03BD  3001               	movlw	1
  3973  03BE  07D7               	addwf	_uiCounterms,f
  3974  03BF  3000               	movlw	0
  3975  03C0  1803               	skipnc
  3976  03C1  3001               	movlw	1
  3977  03C2  07D8               	addwf	_uiCounterms+1,f
  3978  03C3  3000               	movlw	0
  3979  03C4  1803               	skipnc
  3980  03C5  3001               	movlw	1
  3981  03C6  07D9               	addwf	_uiCounterms+2,f
  3982  03C7  3000               	movlw	0
  3983  03C8  1803               	skipnc
  3984  03C9  3001               	movlw	1
  3985  03CA  07DA               	addwf	_uiCounterms+3,f
  3986  03CB                     i1l1944:
  3987                           
  3988                           ;main.c: 54:     if(RABIF){
  3989  03CB  1C0B               	btfss	11,0	;volatile
  3990  03CC  2BCE               	goto	u144_21
  3991  03CD  2BCF               	goto	u144_20
  3992  03CE                     u144_21:
  3993  03CE  2C4A               	goto	i1l50
  3994  03CF                     u144_20:
  3995  03CF                     i1l1946:
  3996                           
  3997                           ;main.c: 56:         if(uiCounterms - uiButtonDebounce > 19){
  3998  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  3999  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  4000  03D1  0857               	movf	_uiCounterms,w
  4001  03D2  00F0               	movwf	??_my_isr_routine
  4002  03D3  0858               	movf	_uiCounterms+1,w
  4003  03D4  00F1               	movwf	??_my_isr_routine+1
  4004  03D5  0859               	movf	_uiCounterms+2,w
  4005  03D6  00F2               	movwf	??_my_isr_routine+2
  4006  03D7  085A               	movf	_uiCounterms+3,w
  4007  03D8  00F3               	movwf	??_my_isr_routine+3
  4008  03D9  0876               	movf	_uiButtonDebounce,w
  4009  03DA  02F0               	subwf	??_my_isr_routine,f
  4010  03DB  0877               	movf	_uiButtonDebounce+1,w
  4011  03DC  1C03               	skipc
  4012  03DD  0F77               	incfsz	_uiButtonDebounce+1,w
  4013  03DE  2BE0               	goto	u145_21
  4014  03DF  2BE1               	goto	u145_22
  4015  03E0                     u145_21:
  4016  03E0  02F1               	subwf	??_my_isr_routine+1,f
  4017  03E1                     u145_22:
  4018  03E1  0878               	movf	_uiButtonDebounce+2,w
  4019  03E2  1C03               	skipc
  4020  03E3  0F78               	incfsz	_uiButtonDebounce+2,w
  4021  03E4  2BE6               	goto	u145_23
  4022  03E5  2BE7               	goto	u145_24
  4023  03E6                     u145_23:
  4024  03E6  02F2               	subwf	??_my_isr_routine+2,f
  4025  03E7                     u145_24:
  4026  03E7  0879               	movf	_uiButtonDebounce+3,w
  4027  03E8  1C03               	skipc
  4028  03E9  0F79               	incfsz	_uiButtonDebounce+3,w
  4029  03EA  2BEC               	goto	u145_25
  4030  03EB  2BED               	goto	u145_26
  4031  03EC                     u145_25:
  4032  03EC  02F3               	subwf	??_my_isr_routine+3,f
  4033  03ED                     u145_26:
  4034  03ED  0873               	movf	??_my_isr_routine+3,w
  4035  03EE  1D03               	btfss	3,2
  4036  03EF  2BFE               	goto	u146_20
  4037  03F0  0872               	movf	??_my_isr_routine+2,w
  4038  03F1  1D03               	btfss	3,2
  4039  03F2  2BFE               	goto	u146_20
  4040  03F3  0871               	movf	??_my_isr_routine+1,w
  4041  03F4  1D03               	btfss	3,2
  4042  03F5  2BFE               	goto	u146_20
  4043  03F6  3014               	movlw	20
  4044  03F7  0270               	subwf	??_my_isr_routine,w
  4045  03F8  1D03               	skipz
  4046  03F9  2BFA               	goto	u146_23
  4047  03FA                     u146_23:
  4048  03FA  1C03               	btfss	3,0
  4049  03FB  2BFD               	goto	u146_21
  4050  03FC  2BFE               	goto	u146_20
  4051  03FD                     u146_21:
  4052  03FD  2C49               	goto	i1l1952
  4053  03FE                     u146_20:
  4054  03FE                     i1l1948:
  4055                           
  4056                           ;main.c: 58:             readButtonStatus[0] = (PORTB & (1<<4))>>4;
  4057  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  4058  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  4059  0400  0806               	movf	6,w	;volatile
  4060  0401  00F0               	movwf	??_my_isr_routine
  4061  0402  3004               	movlw	4
  4062  0403                     u147_25:
  4063  0403  1003               	clrc
  4064  0404  0CF0               	rrf	??_my_isr_routine,f
  4065  0405  3EFF               	addlw	-1
  4066  0406  1D03               	skipz
  4067  0407  2C03               	goto	u147_25
  4068  0408  0870               	movf	??_my_isr_routine,w
  4069  0409  3901               	andlw	1
  4070  040A  00F1               	movwf	??_my_isr_routine+1
  4071  040B  0871               	movf	??_my_isr_routine+1,w
  4072  040C  00E1               	movwf	_readButtonStatus
  4073                           
  4074                           ;main.c: 59:             readButtonStatus[1] = (PORTB & (1<<6))>>6;
  4075  040D  0806               	movf	6,w	;volatile
  4076  040E  00F0               	movwf	??_my_isr_routine
  4077  040F  3006               	movlw	6
  4078  0410                     u148_25:
  4079  0410  1003               	clrc
  4080  0411  0CF0               	rrf	??_my_isr_routine,f
  4081  0412  3EFF               	addlw	-1
  4082  0413  1D03               	skipz
  4083  0414  2C10               	goto	u148_25
  4084  0415  0870               	movf	??_my_isr_routine,w
  4085  0416  3901               	andlw	1
  4086  0417  00F1               	movwf	??_my_isr_routine+1
  4087  0418  0871               	movf	??_my_isr_routine+1,w
  4088  0419  00E2               	movwf	_readButtonStatus+1
  4089                           
  4090                           ;main.c: 60:             readButtonStatus[2] = (PORTB & (1<<7))>>7;
  4091  041A  0806               	movf	6,w	;volatile
  4092  041B  00F0               	movwf	??_my_isr_routine
  4093  041C  3007               	movlw	7
  4094  041D                     u149_25:
  4095  041D  1003               	clrc
  4096  041E  0CF0               	rrf	??_my_isr_routine,f
  4097  041F  3EFF               	addlw	-1
  4098  0420  1D03               	skipz
  4099  0421  2C1D               	goto	u149_25
  4100  0422  0870               	movf	??_my_isr_routine,w
  4101  0423  3901               	andlw	1
  4102  0424  00F1               	movwf	??_my_isr_routine+1
  4103  0425  0871               	movf	??_my_isr_routine+1,w
  4104  0426  00E3               	movwf	_readButtonStatus+2
  4105                           
  4106                           ;main.c: 61:             readButtonStatus[3] = (PORTA & (1<<4))>>4;
  4107  0427  0805               	movf	5,w	;volatile
  4108  0428  00F0               	movwf	??_my_isr_routine
  4109  0429  3004               	movlw	4
  4110  042A                     u150_25:
  4111  042A  1003               	clrc
  4112  042B  0CF0               	rrf	??_my_isr_routine,f
  4113  042C  3EFF               	addlw	-1
  4114  042D  1D03               	skipz
  4115  042E  2C2A               	goto	u150_25
  4116  042F  0870               	movf	??_my_isr_routine,w
  4117  0430  3901               	andlw	1
  4118  0431  00F1               	movwf	??_my_isr_routine+1
  4119  0432  0871               	movf	??_my_isr_routine+1,w
  4120  0433  00E4               	movwf	_readButtonStatus+3
  4121                           
  4122                           ;main.c: 62:             readButtonStatus[4] = (PORTB & (1<<5))>>5;
  4123  0434  0806               	movf	6,w	;volatile
  4124  0435  00F0               	movwf	??_my_isr_routine
  4125  0436  3005               	movlw	5
  4126  0437                     u151_25:
  4127  0437  1003               	clrc
  4128  0438  0CF0               	rrf	??_my_isr_routine,f
  4129  0439  3EFF               	addlw	-1
  4130  043A  1D03               	skipz
  4131  043B  2C37               	goto	u151_25
  4132  043C  0870               	movf	??_my_isr_routine,w
  4133  043D  3901               	andlw	1
  4134  043E  00F1               	movwf	??_my_isr_routine+1
  4135  043F  0871               	movf	??_my_isr_routine+1,w
  4136  0440  00E5               	movwf	_readButtonStatus+4
  4137  0441                     i1l1950:
  4138                           
  4139                           ;main.c: 65:             uiButtonDebounce = uiCounterms;
  4140  0441  085A               	movf	_uiCounterms+3,w
  4141  0442  00F9               	movwf	_uiButtonDebounce+3
  4142  0443  0859               	movf	_uiCounterms+2,w
  4143  0444  00F8               	movwf	_uiButtonDebounce+2
  4144  0445  0858               	movf	_uiCounterms+1,w
  4145  0446  00F7               	movwf	_uiButtonDebounce+1
  4146  0447  0857               	movf	_uiCounterms,w
  4147  0448  00F6               	movwf	_uiButtonDebounce
  4148  0449                     i1l1952:
  4149                           
  4150                           ;main.c: 68:         RABIF = 0;
  4151  0449  100B               	bcf	11,0	;volatile
  4152  044A                     i1l50:
  4153  044A  0875               	movf	??_my_isr_routine+5,w
  4154  044B  008A               	movwf	10
  4155  044C  0E74               	swapf	??_my_isr_routine+4,w
  4156  044D  0083               	movwf	3
  4157  044E  0EFE               	swapf	btemp,f
  4158  044F  0E7E               	swapf	btemp,w
  4159  0450  0009               	retfie
  4160  0451                     __end_of_my_isr_routine:
  4161  007E                     btemp	set	126	;btemp
  4162  007E                     wtemp0	set	126
  4163                           
  4164                           	psect	intentry
  4165  0004                     __pintentry:	
  4166                           ;incstack = 0
  4167                           ; Regs used in _my_isr_routine: [wreg+status,2+status,0]
  4168                           
  4169  0004                     interrupt_function:
  4170  007E                     saved_w	set	btemp
  4171  0004  00FE               	movwf	btemp
  4172  0005  0E03               	swapf	3,w
  4173  0006  00F4               	movwf	??_my_isr_routine+4
  4174  0007  080A               	movf	10,w
  4175  0008  00F5               	movwf	??_my_isr_routine+5
  4176  0009  2BB4               	ljmp	_my_isr_routine
  4177                           
  4178                           	psect	config
  4179                           
  4180                           ;Config register CONFIG @ 0x2007
  4181                           ;	Oscillator Selection bits
  4182                           ;	FOSC = INTRCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O function
      +                           on RA5/OSC1/CLKIN
  4183                           ;	Watchdog Timer Enable bit
  4184                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4185                           ;	Power-up Timer Enable bit
  4186                           ;	PWRTE = OFF, PWRT disabled
  4187                           ;	MCLR Pin Function Select bit
  4188                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  4189                           ;	Code Protection bit
  4190                           ;	CP = OFF, Program memory code protection is disabled
  4191                           ;	Data Code Protection bit
  4192                           ;	CPD = OFF, Data memory code protection is disabled
  4193                           ;	Brown-out Reset Selection bits
  4194                           ;	BOREN = OFF, BOR disabled
  4195                           ;	Internal External Switchover bit
  4196                           ;	IESO = ON, Internal External Switchover mode is enabled
  4197                           ;	Fail-Safe Clock Monitor Enabled bit
  4198                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4199  2007                     	org	8199
  4200  2007  34D4               	dw	13524

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     55      73
    BANK1            32      0      27

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _my_isr_routine in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_deviceStateMachine
    _shiftDisplays->_clearPin
    _shiftDisplays->_setPin
    _setPin->___bmul
    _clearPin->___bmul
    _deviceStateMachine->_writeCharOnDisplay
    _writeCharOnDisplay->___awmod
    _randomNumber->___llmod
    ___llmod->___lmul
    ___awmod->_randomNumber

Critical Paths under _my_isr_routine in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr_routine in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   13060
                                             50 BANK0      5     5      0
                             ___bmul
                            ___llmod
                        _configBoard
                 _deviceStateMachine
                        _initButtons
                        _initDisplay
                       _randomNumber
                      _shiftDisplays
                 _writeCharOnDisplay
 ---------------------------------------------------------------------------------
 (1) _shiftDisplays                                        3     3      0    1667
                                              8 BANK0      3     3      0
                             ___bmul
                           _clearPin
                             _setPin
 ---------------------------------------------------------------------------------
 (2) _setPin                                               4     3      1     328
                                              4 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _clearPin                                             4     3      1     328
                                              4 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initDisplay                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initButtons                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _deviceStateMachine                                   8     8      0    5275
                                             42 BANK0      8     8      0
                            ___awdiv
                            ___awmod
                       _randomNumber
                 _writeCharOnDisplay
 ---------------------------------------------------------------------------------
 (1) _writeCharOnDisplay                                   4     3      1    2525
                                             38 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1    1011
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _randomNumber                                         8     4      4    1088
                                             23 BANK0      8     4      4
                            ___llmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     316
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     772
                                             13 BANK0     10     2      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     752
                                             31 BANK0      7     3      4
                       _randomNumber (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     805
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _configBoard                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _my_isr_routine                                       6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___bmul
   ___llmod
     ___lmul (ARG)
   _configBoard
   _deviceStateMachine
     ___awdiv
     ___awmod
       _randomNumber (ARG)
         ___llmod
         ___lmul
     _randomNumber
     _writeCharOnDisplay
       ___awdiv (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
   _initButtons
   _initDisplay
   _randomNumber
   _shiftDisplays
     ___bmul
     _clearPin
       ___bmul (ARG)
     _setPin
       ___bmul (ARG)
   _writeCharOnDisplay

 _my_isr_routine (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0      1B       6       84.4%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     37      49       4       91.2%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      6E       8        0.0%
ABS                  0      0      6E       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Nov 19 17:33:44 2021

               ___bmul@product 0022                             l62 00F0                   ___awdiv@sign 0026  
                           fsr 0004                            l200 04BE                            l204 03B3  
                          l221 0734                            l150 0639                            l228 02BD  
                          l165 0584                            l510 05DF                            l191 07D6  
                          l258 06E2                            l370 07ED                            l194 07B8  
                          l358 077C                            l566 068F                            l497 0527  
                          _GIE 005F                            _PS0 0408                            _PS1 0409  
                          _PS2 040A                            _PSA 040B                 clearPin@ucPort 0024  
                          fsr0 0004                            indf 0000                   ___awmod@sign 0045  
                         l2200 02C1                           l2210 02F8                           l2300 0709  
                         l2220 0348                           l2212 0308                           l2204 02C8  
                         l2310 0714                           l2302 070A                           l2222 0358  
                         l2214 0318                           l2206 02D8                           l2230 0388  
                         l2320 0719                           l2312 0715                           l2304 070E  
                         l2160 0763                           l2152 0735                           l2224 0368  
                         l2216 0328                           l2208 02E8                           l1600 05E4  
                         l2400 04AF                           l2330 0721                           l2322 071D  
                         l2314 0716                           l2306 0710                           l2250 04CD  
                         l2242 04BF                           l2162 0774                           l2154 073F  
                         l2170 07DF                           l2226 0378                           l2218 0338  
                         l2410 0193                           l1610 0612                           l1602 05EA  
                         l2402 04B7                           l2340 072A                           l2332 0722  
                         l2324 071E                           l2316 0717                           l2308 0711  
                         l2260 04E2                           l2252 04D1                           l2244 04C2  
                         l1700 0588                           l2180 063A                           l2156 0743  
                         l2236 0690                           l2172 07E3                           l2420 01C5  
                         l2412 01AC                           l1612 0618                           l1604 05F8  
                         l2404 04BB                           l2500 004B                           l2342 072B  
                         l2334 0723                           l2326 071F                           l2318 0718  
                         l2270 0505                           l2262 04E5                           l2254 04D6  
                         l2246 04C6                           l1710 059C                           l1702 058C  
                         l2190 066A                           l2182 0644                           l2158 075A  
                         l2238 06DA                           l2174 07E5                           l2166 07DA  
                         l2430 020B                           l2422 01C7                           l2414 01B2  
                         l2406 0188                           l2350 07BF                           l1630 0532  
                         l1606 05FE                           l2510 00AA                           l2502 0066  
                         l2344 072C                           l2336 0726                           l2328 0720  
                         l2280 051E                           l2272 050B                           l2264 04EC  
                         l2256 04DA                           l2248 04CB                           l1720 05B4  
                         l1712 05A2                           l1704 0591                           l2192 0678  
                         l2184 0647                           l2176 07EC                           l2168 07DB  
                         l2440 0220                           l2432 0211                           l2408 018D  
                         l2360 07CC                           l2352 07C7                           l1640 0562  
                         l1632 0541                           l1608 0604                           l2520 00EE  
                         l2504 0067                           l2346 0730                           l2338 0729  
                         l2290 06EE                           l2282 0523                           l2274 050C  
                         l2266 04F0                           l2258 04DC                           l1730 05D6  
                         l1722 05BE                           l1714 05A5                           l1706 0593  
                         l2194 0681                           l2186 0654                           l2442 0225  
                         l2450 0234                           l2434 0214                           l2426 0200  
                         l2418 01C0                           l2370 0791                           l2362 07CD  
                         l2354 07C8                           l1634 0547                           l1626 052B  
                         l1618 0626                           l2530 0111                           l2522 010D  
                         l2506 0080                           l2514 00BD                           l2292 06FF  
                         l2276 0513                           l2268 04F4                           l1732 05DB  
                         l1724 05C4                           l1716 05AC                           l1708 0597  
                         l2188 0658                           l2196 0687                           l2452 024A  
                         l2444 022A                           l2428 0206                           l2380 07AA  
                         l2372 0793                           l2364 077D                           l2356 07C9  
                         l2348 07B9                           l1636 054D                           l1628 052C  
                         l2540 0167                           l2532 0128                           l2524 010E  
                         l2516 00D3                           l2508 0088                           l2294 0702  
                         l2286 06E3                           l2278 0519                           l1726 05CB  
                         l1718 05B0                           l2462 0251                           l2446 022F  
                         l2438 021B                           l2382 07AC                           l2374 079D  
                         l2366 0785                           l2358 07CB                           l1638 055C  
                         l1646 0571                           l2390 046D                           l2542 0179  
                         l2534 0130                           l2518 00DB                           l2296 0703  
                         l2288 06E6                           l1728 05D1                           l2464 0256  
                         l2472 026F                           l2384 07B4                           l2376 079F  
                         l2368 0787                           l2392 0475                           l2544 017D  
                         l2536 0149                           l2298 0707                           l2474 0285  
                         l2386 07B6                           l2378 07A9                           l2394 0482  
                         l2538 015F                           l2490 002D                           l2468 0259  
                         l2396 0486                           l2388 0451                           l2492 0032  
                         l1598 05E3                           l2398 0495                           l2494 0038  
                         l2496 0040                           l2488 002A                           l1698 0585  
                         l2690 023C                           l2498 0048                           l2692 0261  
                         l2694 0277                           l2686 062E                           l2696 0390  
                         l2688 0579                           _T0IE 005D                           _T0IF 005A  
                         _T0CS 040D                           u1010 05EA                           u1011 05E9  
                         u1100 0547                           u1101 0546                           u1110 054D  
                         u1030 05FE                           u1111 054C                           u1031 05FD  
                         u1040 0604                           u1024 05F0                           u2000 0088  
                         u1041 0603                           u1025 05EE                           u2001 0087  
                         u1130 0562                           u2010 0097                           u1131 0561  
                         u2011 0098                           u1300 05BE                           u1124 0553  
                         u1060 0618                           u2020 00D3                           u2012 009D  
                         u1301 05BD                           u1125 0551                           u1061 0617  
                         u2021 00D2                           u2013 009E                           u1054 060A  
                         u2030 00DB                           u1055 0608                           u2031 00DA  
                         u1320 05D1                           u1144 0568                           u1080 0532  
                         u2040 010D                           u1321 05D0                           u1305 05BA  
                         u1145 0566                           u1081 0531                           u2041 010C  
                         u1330 05D6                           u1250 058C                           u1074 061E  
                         u2050 0128                           u1331 05D5                           u1315 05C5  
                         u1251 058B                           u1075 061C                           u2051 0127  
                         _IOCA 0096                           u1260 0597                           u2060 0130  
                         _IOCB 0116                           u1261 0596                           u2061 012F  
                         u1270 05A2                           u1094 0538                           u2070 015F  
                         u1271 05A1                           u1095 0536                           u2071 015E  
                         u2080 0167                           u2081 0166                           u1290 05B4  
                         u2090 0183                           u1291 05B3                           u2091 0182  
                         u1700 07EC                           u1285 05A6                           u1701 07EB  
                         u1710 0644                           u1711 0643                           u1800 04D1  
                         u1640 0743                           u1801 04D0                           u1641 0742  
                         u1810 04E2                           u1730 0658                           u1811 04E1  
                         u1731 0657                           u1651 074C                           u1740 066A  
                         u1652 0753                           u1900 04B7                           u1741 0669  
                         u1725 0649                           u1653 075A                           u1901 04B6  
                         u1830 04F4                           u1910 018D                           u1831 04F3  
                         u1911 018C                           u1760 0687                           u1680 0774  
                         u1920 01BF                           u1825 04E6                           u1761 0686  
                         u1745 0666                           u1681 0773                           u1665 075C  
                         u1921 01BE                           u1850 0505                           u1690 07DF  
                         u1770 02C7                           u1930 01C5                           u1851 0504  
                         u1755 0679                           u1675 0764                           u1691 07DE  
                         u1771 02C6                           u1931 01C4                           u1780 06BC  
                         u1940 0206                           u1845 04F5                           u1781 06BD  
                         u1941 0205                           u1925 01BB                           u1870 0519  
                         u1790 04C6                           u1782 06C2                           u1950 0211  
                         u1871 0518                           u1855 0501                           u1791 04C5  
                         u1783 06C3                           u1951 0210                           u1880 051E  
                         u1960 021A                           u1881 051D                           u1865 050D  
                         u1961 0219                           u1970 0250                           u1890 0482  
                         u1971 024F                           u1891 0481                           _PEIE 005E  
                         u1980 0066                           u1981 0065                           u1990 0080  
                         u1895 047E                           u1991 007F                           i1l50 044A  
                         _TMR0 0001                           _main 002A                           btemp 007E  
                         start 000A              ___bmul@multiplier 0023                   ?_initDisplay 0070  
                 ?_initButtons 0070               _readButtonStatus 0061                          ?_main 0070  
              __end_of___awdiv 0528                __end_of___awmod 05E0                          _ANSEL 011E  
              ___awdiv@divisor 0020                __end_of___llmod 0690                          _RABIE 005B  
                        _RABIF 0058                ___awdiv@counter 0025                          _PORTA 0005  
                        _PORTB 0006                          _PORTC 0007                          _TRISA 0085  
                        _TRISB 0086                          _TRISC 0087                          _WPUA4 04AC  
                        _WPUB4 08AC                          _WPUB5 08AD                          _WPUB6 08AE  
                        _WPUB7 08AF            ___lmul@multiplicand 0024                  _indiceDisplay 005B  
                        main@i 0056                          pclath 000A                          status 0003  
   __end_of_writeCharOnDisplay 03B4                          wtemp0 007E                __initialization 000B  
                 __end_of_main 0185                         ??_main 0052               ___llmod@dividend 0031  
             ___awdiv@dividend 0022                         _ANSELH 011F                         i1l1940 03B8  
                       i1l1950 0441                         i1l1942 03B9                         i1l1952 0449  
                       i1l1944 03CB                         i1l1946 03CF                         i1l1938 03B4  
                       i1l1948 03FE                         u150_25 042A                         u143_20 03B8  
                       u143_21 03B7                         u151_25 0437                         u144_20 03CF  
                       u144_21 03CE                         u145_21 03E0                         u145_22 03E1  
                       u145_23 03E6                         u145_24 03E7                         u145_25 03EC  
                       u145_26 03ED                         u146_20 03FE                         u146_21 03FD  
                       u146_23 03FA                         u147_25 0403                         u148_25 0410  
                       u149_25 041D                         _OSCCON 008F               __end_of_clearPin 0585  
                       _Botoes 00A0                         _nRABPU 040F           __size_of_configBoard 0052  
                       ___bmul 07D7                         ___lmul 0735                      ??___awdiv 0024  
        __end_of_shiftDisplays 04BF                      ??___awmod 0043                      ??___llmod 0035  
             ___awdiv@quotient 0027                         _setPin 05E0                ___awmod@divisor 003F  
              ___awmod@counter 0044                         saved_w 007E    __size_of_deviceStateMachine 0139  
      __end_of__initialization 0028               _uiButtonDebounce 0076            ___bmul@multiplicand 0020  
               __pcstackCOMMON 0070                  ?_randomNumber 0037     deviceStateMachine@ucButton 0051  
                 __pidataBANK0 07EE           __size_of_initDisplay 001E           __size_of_initButtons 003C  
                   __pbssBANK0 0057                     __pbssBANK1 00A0                 ??_randomNumber 003B  
                   __pmaintext 002A                        ?___bmul 0020                        ?___lmul 0020  
                   __pintentry 0004                 ___lmul@product 0029                        ?_setPin 0024  
                  setPin@ucPin 0027                      ?_clearPin 0024        __size_of_my_isr_routine 009D  
              __size_of___bmul 0017                        ___awdiv 04BF                __size_of___lmul 0048  
                      ___awmod 0585                        ___llmod 063A             _writeCharOnDisplay 02BE  
              __size_of_setPin 005A                        __ptext1 0451                        __ptext2 05E0  
                      __ptext3 0528                        __ptext4 07B9                        __ptext5 077D  
                      __ptext6 0185                        __ptext7 02BE                        __ptext8 07D7  
                      __ptext9 0690               ___awmod@dividend 0041            ?_writeCharOnDisplay 0046  
                   ??_clearPin 0025                     _randomSeed 005D                        clrloop0 07F7  
         end_of_initialization 0028           ??_writeCharOnDisplay 0047  writeCharOnDisplay@ucCharacter 0049  
         __end_of_randomNumber 06E3             _deviceCurrentState 0068                  clearPin@ucPin 0027  
                ??_configBoard 0020                 __end_of___bmul 07EE                 __end_of___lmul 077D  
               __end_of_setPin 063A            start_initialization 000B     __end_of_deviceStateMachine 02BE  
               _my_isr_routine 03B4         __size_of_shiftDisplays 006E                ___llmod@divisor 002D  
              ___llmod@counter 0036                  ??_initDisplay 0020                       ??___bmul 0021  
                ??_initButtons 0020                       ??___lmul 0028            __end_of_configBoard 0735  
                  __pdataBANK0 0061                       ??_setPin 0025                    __pbssCOMMON 0076  
                    ___latbits 0000                  __pcstackBANK0 0020         __end_of_my_isr_routine 0451  
            __size_of_clearPin 005D                      _diceState 0066                       ?___awdiv 0020  
                     ?___awmod 003F                       ?___llmod 002D                  _shiftDisplays 0451  
          __end_of_initDisplay 07D7          __size_of_randomNumber 0053            __end_of_initButtons 07B9  
              ?_my_isr_routine 0070                   setPin@ucPort 0024              interrupt_function 0004  
          deviceStateMachine@i 004F                    _configBoard 06E3                      clear_ram0 07F6  
                 _randomNumber 0690                 ?_shiftDisplays 0070              ___lmul@multiplier 0020  
  __size_of_writeCharOnDisplay 00F6                    _initDisplay 07B9                    _initButtons 077D  
             __size_of___awdiv 0069               __size_of___awmod 005B               __size_of___llmod 0056  
      _Display7seg4digitsVetor 00AF                       _clearPin 0528                       __ptext10 0735  
                     __ptext11 063A                       __ptext12 0585                       __ptext13 04BF  
                     __ptext14 06E3                       __ptext15 03B4                    _uiCounterms 0057  
                __size_of_main 015B             _deviceStateMachine 0185                ??_shiftDisplays 0028  
          ?_deviceStateMachine 0070    writeCharOnDisplay@ucDisplay 0046  deviceStateMachine@ulTotalRoll 004D  
         ??_deviceStateMachine 004A                       intlevel1 0000               ??_my_isr_routine 0070  
                 ?_configBoard 0070  
